Import:
  - common

View:
  onLoad:
    executeCode:
      body: |
        // get extender info
        ensemble.invokeAPI("getExtenders");
      onComplete:
        startTimer:
          id: timeoutTimer
          options:
            isGlobal: true  # global timer. Will only ever have 1 running
            repeat: true
            repeatInterval: 15  # repeat every 15 seconds
          onTimer:
            invokeAPI:
              name: getCurrentUser
              onResponse: |-
                //@code
                if (response.body.status.user != 'admin') {
                  // stop the timer and log out
                  ensemble.stopTimer('timeoutTimer');
                  ensemble.navigateScreen({
                    'name': 'Logout',
                    'options': {
                      'clearAllScreens': true
                    }
                  });
                }

  styles:
    scrollableView: true
    backgroundColor: 0xFFEAEAEA
    showNavigation: flase

  Column:
    styles: { backgroundColor: 0xFFEAEAEA, scrollable: true, fontSize: 16 }
    children:
      -  PageHeader:
          inputs:
            title: r@kpn.nav.dashboard
            showConnectionWarning: ${ensemble.storage.internetConnected == false}
            showSlaveDeviceWarning: ${ isMaster() == false }
      - Column:
          styles:
            backgroundColor: 0xffeaeaea
            padding: 16
          children:
            - Flex:
                id: myFlex
                styles:
                  gap: 16
                  direction: '${device.width > 768 ? "horizontal" : "vertical"}'
                children:
                  - Column:
                      styles:
                        gap: 16
                        expanded: '${myFlex.direction == "horizontal" ? true : false}'

                      children:
                        # wifi card
                        - Column:
                            styles:
                              backgroundColor: white
                              shadowColor: 0xFFDEDEDE
                              shadowRadius: 1
                              shadowOffset: [0, 0]
                              borderRadius: 10
                              padding: 24 0 8 24

                            children:
                              - Wifi

                        # Connected devices card
                        - Conditional:
                            conditions:
                              - if: ${ isMaster() }
                                Column:
                                  styles:
                                    backgroundColor: white
                                    shadowColor: 0xFFDEDEDE
                                    shadowRadius: 1
                                    shadowOffset: [0, 0]
                                    borderRadius: 10
                                    padding: 24 0 24 24
                                  children:
                                    - ConnectedDevices

                  # Column 2
                  - Column:
                      styles:
                        gap: 16
                        expanded: '${myFlex.direction == "horizontal" ? true : false}'
                      children:
                        - Column:
                            styles:
                              backgroundColor: white
                              shadowColor: 0xFFDEDEDE
                              shadowRadius: 1
                              shadowOffset: [ 0, 0 ]
                              borderRadius: 10
                              padding: 24 0 24 24
                            children:
                              - InternetConnection


                  # modem
                  - Column:
                      styles:
                        gap: 16
                        expanded: '${myFlex.direction == "horizontal" ? true : false}'
                      children:
                        - Column:
                            styles:
                              backgroundColor: white
                              shadowColor: 0xFFDEDEDE
                              shadowRadius: 1
                              shadowOffset: [0, 0]
                              borderRadius: 10
                              padding: 24 0 24 24
                            children:
                              - Modem


Wifi:
  onLoad:
    invokeAPI:
      name: getWifiStatus
      onResponse:
        invokeAPI:
          name: getPrivWiFi
          onResponse:
            invokeAPI:
              name: getGuestWiFiInfo
              onResponse: |
                //@code
                ensemble.storage.set('mainWifi',getPrivWiFi.body.status.wlanvap.vap2g0priv.SSID);
                ensemble.storage.set('guestWifi',getGuestWiFiInfo.body.status.wlanvap.vap5g0guest.SSID);
                
                ensemble.storage.set('vap2g0priv',getPrivWiFi.body.status.wlanvap.vap2g0priv.SSID);
                ensemble.storage.set('vap5g0priv',getPrivWiFi.body.status.wlanvap.vap5g0priv.SSID);
                ensemble.storage.set('vap2g0ext',getPrivWiFi.body.status.wlanvap.vap2g0ext.SSID);
                ensemble.storage.set('vap5g0ext',getPrivWiFi.body.status.wlanvap.vap5g0ext.SSID);
                ensemble.storage.set('vap2g0guest',getGuestWiFiInfo.body.status.wlanvap.vap2g0guest.SSID);
                ensemble.storage.set('vap5g0guest',getGuestWiFiInfo.body.status.wlanvap.vap5g0guest.SSID);

  Column:
    styles: { gap: 12 }
    children:

      - CardTitle:
          inputs:
            title: r@kpn.nav.wifi

      - Row:
          styles: { gap: 16, crossAxis: center, padding: 0 24 0 0 }
          children:
            - Icon:
                name: "${ getWifiStatus.body.status.Status == true ? 0xe9d6 : 0xe9d3 }"
                library: kpnSI
                id: mainWifiIcon
                styles:
                  size: 80
                  color:  "${ getWifiStatus.body.status.Status == true ? 0xFF009900 : 0xFF939393 }"
            - Text:
                styles: { overflow: wrap, expanded: true }
                text: "${ getWifiStatus.body.status.Status == true ? 'r@kpn.home.wifi_signal_on' : 'r@kpn.home.wifi_signal_off' }"

      - WifiTypeDetails:
          inputs:
            title: r@kpn.home.main_wifi
            status: "${ getPrivWiFi.body.status.wlanvap.vap2g0priv.VAPStatus == 'Up' ?  'r@kpn.home.wifi_active' : 'r@kpn.home.wifi_inactive'}"
            ssid: ${getPrivWiFi.body.status.wlanvap.vap2g0priv.SSID}
            color: "${ getPrivWiFi.body.status.wlanvap.vap2g0priv.VAPStatus == 'Up' ?  0xFF009900 : 0xFF939393 }"
            icon: "${ getPrivWiFi.body.status.wlanvap.vap2g0priv.VAPStatus == 'Up' ?  0xe9be : 0xe9bd }"
            wifiPageTabIndex: 0

      - WifiTypeDetails:
          inputs:
            title: r@kpn.home.guest_wifi
            status: "${ getGuestWiFiInfo.body.status.wlanvap.vap5g0guest.VAPStatus == 'Up' ?  'r@kpn.home.wifi_active' : 'r@kpn.home.wifi_inactive'}"
            ssid: ${getGuestWiFiInfo.body.status.wlanvap.vap5g0guest.SSID}
            color: "${ getGuestWiFiInfo.body.status.wlanvap.vap5g0guest.VAPStatus == 'Up' ?  0xFF009900 : 0xFF939393 }"
            icon: "${ getGuestWiFiInfo.body.status.wlanvap.vap5g0guest.VAPStatus == 'Up' ?  0xe9be : 0xe9bd }"
            wifiPageTabIndex: 1

      - WifiTypeDetails:
          inputs:
            title: r@kpn.home.extra_2g_wifi
            status: "${ getPrivWiFi.body.status.wlanvap.vap2g0ext.VAPStatus == 'Up' ?  'r@kpn.home.wifi_active' : 'r@kpn.home.wifi_inactive'}"
            ssid: ${getPrivWiFi.body.status.wlanvap.vap2g0ext.SSID}
            color: "${ getPrivWiFi.body.status.wlanvap.vap2g0ext.VAPStatus == 'Up' ?  0xFF009900 : 0xFF939393 }"
            icon: "${ getPrivWiFi.body.status.wlanvap.vap2g0ext.VAPStatus == 'Up' ?  0xe9be : 0xe9bd }"
            wifiPageTabIndex: 2
            extraWifiTab: 0

      - WifiTypeDetails:
          inputs:
            title: r@kpn.home.extra_5g_wifi
            status: "${ getPrivWiFi.body.status.wlanvap.vap5g0ext.VAPStatus == 'Up' ?  'r@kpn.home.wifi_active' : 'r@kpn.home.wifi_inactive'}"
            ssid: ${getPrivWiFi.body.status.wlanvap.vap5g0ext.SSID}
            color: "${ getPrivWiFi.body.status.wlanvap.vap5g0ext.VAPStatus == 'Up' ?  0xFF009900 : 0xFF939393 }"
            icon: "${ getPrivWiFi.body.status.wlanvap.vap5g0ext.VAPStatus == 'Up' ?  0xe9be : 0xe9bd }"
            wifiPageTabIndex: 2
            extraWifiTab: 1

WifiTypeDetails:
  inputs:
    - title
    - status
    - ssid
    - color
    - icon
    - wifiPageTabIndex
    - extraWifiTab
  Column:
    children:
      - Divider
      - Row:
          onTap:
            navigateScreen:
              name: "${device.width > 768 ? 'AppExtender' : 'AppExtenderDrawer'}"
              inputs:
                selectedIndex: 2
                wifiPageTabIndex: ${wifiPageTabIndex}
                extraWifiTab: ${extraWifiTab}
          styles: { gap: 8, fontSize: 12, padding: 16 16 16 0, backgroundColor: white }
          children:
            - Icon:
                name: ${icon}
                library: kpnUI
                id: guestWifiIcon
                styles:
                  size: 24
                  color: ${color}
            - Column:
                styles: { gap: 2, expanded: true }
                children:
                  - Text:
                      text: ${title}
                  - Text:
                      text: ${ssid}
                      selectable: true
                      styles:
                        textStyle:
                          fontWeight: w500
                          color: ${color}
                          overflow: ellipsis
            - Text:
                text: ${status}
            - Icon:
                name: 0xe920
                library: kpnUI
                styles: { size: 24, color: 0xFF939393 }

InternetConnection:
  onLoad:
    invokeAPI:
      name: getInternetConnection
      onResponse:
        invokeAPI:
          name: getDeviceSelf
          onResponse:
            invokeAPI:
              name: getWANInfo
              onResponse: |
                //@code
                if (response.body.data.ConnectionState == "Connected" || response.body.data.ConnectionState == "Bound") {
                  internetConnectionIcon.color = 0xFF009900;
                  internetConnectionStatus.text = 'r@kpn.home.active_connection_type';
                } else {
                  internetConnectionIcon.color = 0xFFE52E2E;
                }
                
                ensemble.storage.set('hgwIp', getWANInfo.body.data.IPAddress);
  Column:
    children:
      - CardTitle:
          inputs:
            title: r@kpn.nav.internet_link
      - Row:
          styles: { gap: 16, crossAxis: center, padding: 8 24 8 0 }
          children:
            - Icon:
                name: 0xe970
                library: kpnSI
                id: internetConnectionIcon
                styles: { size: 80, color: 0xFFD3D3D3 }
            - Text:
                id: internetConnectionStatus
                styles: { overflow: wrap, expanded: true  }
                text: r@kpn.home.inactive_connection_type
      - Divider:
          styles: { margin: 8 0 16 0 }
      - EyebrowText:
          inputs:
            title: r@kpn.ip4_address
      - Text:
          text: ${getWANInfo.body.data.IPAddress}
          selectable: true
      - Spacer:
          styles: { size: 16 }

      - EyebrowText:
          inputs:
            title: r@kpn.ip6_address
      - Text:
          text: "${getWANInfo.body.data.IPv6Address == '' ? '-' : getWANInfo.body.data.IPv6Address}"
          selectable: true
      - Spacer:
          styles: { size: 16 }

      # TODO - verify this is supported on extenders
      # - EyebrowText:
      #     inputs:
      #       title: r@kpn.home.internet_last_change
      # - Text:
      #    id: connectionLastChange
      #    selectable: true
      # - Spacer:
      #     styles: { size: 16 }

      - EyebrowText:
          inputs:
            title: r@kpn.interface
      - Text:
          text: '${ getDeviceSelf.body.status[0].ULinks[0].Type == "wifi"  || getDeviceSelf.body.status[0].ULinks[0].Type == "wifiguest" ? "WiFi" : "Ethernet" }'
          selectable: true


Modem:
  onLoad:
    executeActionGroup:
      actions:
        - invokeAPI:
            name: getDeviceInfo
        - invokeAPI:
            name: getLatestVersion
        - invokeAPI:
            name: getLed
        - invokeAPI:
            name: getDeviceInfoHGW
                  
  Column:
    children:
      - CardTitle:
          inputs:
            title: r@kpn.home.this_modem

      - Row:
          styles: { gap: 16, crossAxis: center, padding: 0 24 0 0 }
          children:
            - Icon:
                name: ${ensemble.storage.appConfig["deviceIcon"]}
                library: kpnSI
                styles: { size: 80, color: 0xFF009900 }
            - Text:
                styles: { overflow: wrap, expanded: true  }
                text: ${ensemble.storage.appConfig["deviceTypeLabel"]}
                selectable: true
      - Divider:
          styles: { margin: 16 0 }
          
      - EyebrowText:
          inputs:
            title: r@kpn.home.device_name
      - Text:
          text: ${getDeviceInfoHGW.body.status.Name}
          selectable: true
      - Spacer:
          styles: { size: 16 }

      - EyebrowText:
          inputs:
            title: r@kpn.operational
      - Text:
          text: ${getDeviceInfo.body.status.UpTime.prettyDuration()}
          selectable: true
      - Spacer:
          styles: { size: 16 }

      - EyebrowText:
          inputs:
            title: r@kpn.home.serial_number
      - Text:
          text: ${getDeviceInfo.body.status.SerialNumber}
          selectable: true
      - Spacer:
          styles: { size: 16 }
          
      - EyebrowText:
          inputs:
            title: r@kpn.home.firmware_version
      - Text:
          text: ${getDeviceInfo.body.status.SoftwareVersion}
          selectable: true
      - Spacer:
          styles: { size: 8 }
      
      - Conditional:
          conditions:
            - if: ${getLatestVersion.body != null && getLatestVersion.body.data.updateAvailable == true}
              Column:
                onTap:
                  navigateScreen:
                    name: ${ensemble.storage.appConfig["appNav"]}
                    inputs:
                      selectedIndex: 6
                      tabIndex: 3
                children:
                  - Text:
                      selectable: true
                      styles:
                        padding: 4 8
                        margin: 0 12 0 0
                        backgroundColor: 0xFFddebf7
                        borderRadius: 4
                        textStyle:
                          fontSize: 14
                          fontWeight: w600
                          overflow: wrap
                      text: r@kpn.home.available_upgrade_version ${getLatestVersion.body.data.newVersion}
      - Spacer:
          styles: { size: 16 }

      - EyebrowText:
          inputs:
            title: r@kpn.mode
      - Text:
          text: ${ensemble.storage.deviceMode}
          selectable: true
      - Divider:
          styles: { margin: 16 0 }

      - Column:
          styles:
            padding: 8 16 8 0
          children:
            - Dropdown:
                label: r@kpn.led
                value: ${getLed.body.status.Brightness}
                styles:
                  variant: box
                items:
                  - { "label": "r@kpn.led_on", "value": 255 }
                  - { "label": "r@kpn.led_dimmed", "value": 12 }
                  - { "label": "r@kpn.led_off", "value": 0 }
                onChange:
                  invokeAPI:
                    name: setLed
                    inputs:
                      brightness: ${this.value}
                    

ConnectedDevices:
  onLoad:
    invokeAPI:
      name: getSSWs
      onResponse:
        invokeAPI:
          name: getActiveDevices

  Column:
    children:
      - CardTitle:
          inputs:
            title: r@kpn.local_network.connected_devices
      - Row:
          styles: { gap: 16, crossAxis: center, padding: 0 8 0 0 }
          children:
            - Icon:
                name: 0xe987
                library: kpnSI
                styles: { size: 80, color: 0xFF009900 }
            - Text:
                id: totalDeviceCount
                selectable: true
                text: ${ getActiveDevices.body.devicesPerInterface['all'] } r@kpn.home.in_total
                styles: { overflow: wrap, expanded: true }
            - Icon:
                name: 0xe920
                library: kpnUI
                styles: { size: 24, color: 0xFF939393 }
      - Divider:
          styles: { margin: 16 0 }
      - Column:
          children:
            - Row:
                styles: { gap: 8, padding: 0 24 0 0 }
                children:
                  - Column:
                      children:
                        - Text:
                            text: r@kpn.home.wired
                            selectable: true
                        - EyebrowText:
                            inputs:
                              title: r@kpn.home.wired_description
                  - Spacer
                  - Text:
                      text: ${getActiveDevices.body.devicesPerInterface['ethernet']}
                      selectable: true
                      styles: { color: 0xFF939393 }

            # main wifi
            - Column:
                # visible: "${ getPrivWiFi.body.status.wlanvap.vap2g0priv.VAPStatus == 'Up' ? true : false }"
                children:
                  - Divider:
                      styles: { margin: 16 0 }
                  - Row:
                      styles: { gap: 8, padding: 0 24 0 0 }
                      children:
                        - Column:
                            children:
                              - Text:
                                  text: r@kpn.home.main_wifi
                                  selectable: true
                              - EyebrowText:
                                  inputs:
                                    title: r@kpn.home.main_wifi_description

                        - Spacer
                        - Text:
                            text: ${getActiveDevices.body.devicesPerInterface['vap2g0priv'] + getActiveDevices.body.devicesPerInterface['vap5g0priv'] }
                            styles: { color: 0xFF939393 }
                            selectable: true

            # guest wifi
            - Column:
                # visible: "${ getGuestWiFiInfo.body.status.wlanvap.vap5g0guest.VAPStatus == 'Up' ? true : false }"
                children:
                  - Divider:
                      styles: { margin: 16 0 }
                  - Row:
                      styles: { gap: 8, padding: 0 24 0 0 }
                      children:
                        - Column:
                            children:
                              - Text:
                                  text: r@kpn.home.guest_wifi
                                  selectable: true
                              - EyebrowText:
                                  inputs:
                                    title: r@kpn.home.guest_wifi_description
                        - Spacer
                        - Text:
                            text: ${getActiveDevices.body.devicesPerInterface['vap2g0guest'] + getActiveDevices.body.devicesPerInterface['vap5g0guest'] }
                            styles: { color: 0xFF939393 }
                            selectable: true

            # extra 2g wifi
            - Column:
                # visible: "${ getPrivWiFi.body.status.wlanvap.vap2g0ext.VAPStatus == 'Up' ? true : false }"
                children:
                  - Divider:
                      styles: { margin: 16 0 }
                  - Row:
                      styles: { gap: 8, padding: 0 24 0 0 }
                      children:
                        - Column:
                            styles: { expanded: true }
                            children:
                              - Text:
                                  text: r@kpn.home.extra_2g_wifi
                                  selectable: true
                              - EyebrowText:
                                  inputs:
                                    title: r@kpn.home.extra_2g_wifi_description

                        - Text:
                            text: ${getActiveDevices.body.devicesPerInterface['vap2g0ext'] + getActiveDevices.body.devicesPerInterface['vap2g0Ext']}
                            styles: { color: 0xFF939393 }
                            selectable: true

            # extra 5g wifi
            - Column:
                # visible: "${ getPrivWiFi.body.status.wlanvap.vap5g0ext.VAPStatus == 'Up' ? true : false }"
                children:
                  - Divider:
                      styles: { margin: 16 0 }
                  - Row:
                      styles: { gap: 8, padding: 0 24 0 0 }
                      children:
                        - Column:
                            styles: { expanded: true }
                            children:
                              - Text:
                                  text: r@kpn.home.extra_5g_wifi
                                  selectable: true
                              - EyebrowText:
                                  inputs:
                                    title: r@kpn.home.extra_5g_wifi_description
                        - Text:
                            text: ${getActiveDevices.body.devicesPerInterface['vap5g0ext'] + getActiveDevices.body.devicesPerInterface['vap5g0Ext']}
                            styles: { color: 0xFF939393 }
                            selectable: true


API:
  getActiveDevices:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices"
      "method": "get"
      "parameters":
        "expression":
          "wifi": "not interface and wifi and .Active==true"
          "ethernet": "not interface and eth and .Active==true"
        "flags": "full_links"
    onResponse: |
      //@code

      var devicesPerInterface = {
        'all': 0,
        'ethernet': 0,
        'vap2g0priv': 0,
        'vap5g0priv': 0,
        'vap2g0guest': 0,
        'vap5g0guest': 0,
        'vap2g0ext': 0,
        'vap5g0ext': 0,
        'vap2g0Ext': 0,
        'vap5g0Ext': 0
      };

      // count ethernet devices
      response.body.status.ethernet.map(function(wired_device) {
        // exclude extenders and switches
        var tagsArray = wired_device.Tags.split(' ');
        if (tagsArray.includes('ssw') == false && tagsArray.includes('hnid') == false) {

          // exclude ghost devices
          if (wired_device.ULinks != null && wired_device.ULinks.length > 0) {
            // exclude alternative macs
            if (ensemble.storage.alternative_devices_macs.includes(wired_device.Key) == false)
              devicesPerInterface['ethernet'] = devicesPerInterface['ethernet'] + 1;
            
            devicesPerInterface['all'] = devicesPerInterface['all'] + 1;
          }
        }
      });
      
      // count wifi devices
      response.body.status.wifi.map(function(wireless_device) {
        // exclude extenders and switches
        var tagsArray = wireless_device.Tags.split(' ');
        if (tagsArray.includes('ssw') == false && tagsArray.includes('hnid') == false) {
          var interface = 'vap5g0priv';
          // exclude ghost devices
          if (wireless_device.ULinks != null && wireless_device.ULinks.length > 0) {
            // exclude alternative macs
            if (ensemble.storage.alternative_devices_macs.includes(wireless_device.Key) == false) {
              if (devicesPerInterface[wireless_device.ULinks[0].Key] != null ) {
                interface = wireless_device.ULinks[0].Key;
              } else {
                // handle devices connected to extenders
                // example format: "Key": "_C0:D7:AA:25:AA:0F_ETH1"
                var keyArr = wireless_device.ULinks[0].Key.split("_");
                if (keyArr.length == 3)
                  interface = keyArr[2];
              }

              devicesPerInterface[interface] = devicesPerInterface[interface] + 1;
              devicesPerInterface['all'] = devicesPerInterface['all'] + 1;
            }
          }
        }
      });

      response.body.devicesPerInterface = devicesPerInterface;
      ensemble.storage.totalActiveDeviceCount = devicesPerInterface['all'];

  getSSWs:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices"
      "method": "get"
      "parameters":
        "expression": "not interface and not self and ssw"
        "flags": "alternatives"
    onResponse: |
      ensemble.storage.extenderCount = response.body.status.length;
      ensemble.storage.alternative_devices_macs = [];
      response.body.status.map(function (d) {

        if (d.Alternative == null ) {
        } else {
          d.Alternative.map(function(a) {
            ensemble.storage.alternative_devices_macs.push(a.Key);
          });
        }
      });


  getDeviceInfo:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "DeviceInfo"
      "method": "get"
      "parameters": ""

  getDeviceInfoHGW:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices.Device.HGW"
      "method": "get"
      "parameters": { }

  getWifiStatus:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NMC.Wifi"
      "method": "get"
      "parameters": {}

  getPrivWiFi:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NeMo.Intf.lan"
      "method": "getMIBs"
      "parameters": {
        "mibs": "wlanvap",
        "flag": "!backhaul"
      }

  getGuestWiFiStatus:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NMC.Guest"
      "method": "get"
      "parameters": ""

  getGuestWiFiInfo:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NeMo.Intf.brguest"
      "method": "getMIBs"
      "parameters": { mibs: "wlanvap", flag: "!backhaul", traverse: "one level down" }

  getWANInfo:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NMC"
      "method": "getWANStatus"
      "parameters": {}

  getInternetConnection:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NeMo.Intf.data"
      "method": "getMIBs"
      "parameters": {"mibs": "base ppp dhcp"}


  getCurrentUser:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "HTTPService"
      "method": "getCurrentUser"
      "parameters": {}

  getLed:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "LEDs.LED.Root"
      "method": "get"
      "parameters": {}

  setLed:
    inputs: [ brightness ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "LEDs.LED.Root"
      "method": "set"
      "parameters":
        "Brightness": ${brightness}
  
  getLatestVersion:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "WebuiupgradeService"
      "method": "getLatestVersion"
      "parameters": {}

  getExtenders:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices"
      "method": "get"
      "parameters":
        "expression": "not interface and not self and ssw"
        "flags": "full_links"
    onResponse: |
      var extenders = {};
      var extendersMacs = {};
      response.body.status.map(function(d) {
        extendersMacs[d.Key] = d.Name;

        var thisExtender = {};
        thisExtender = {
          "Name": d.Name,
          "BaseMac": d.Key
        }
        extenders[d.Key] = thisExtender;
        ensemble.storage.extenders = extenders;
      });

      // keep a flat object for fast lookup
      ensemble.storage.extendersMacs = extendersMacs;


  getDeviceSelf:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices"
      "method": "get"
      "parameters": 
        "expression": "self and interface and not logical"
        "flags": "full_links"




Global: |-
  //@code

  function getGhostDeviceMac (inputMac) {

    // get last two characters
    var lastTwo = inputMac.substring(15,17);
    var lastTwoNum = parseInt(lastTwo, 16);

    // adjust to get the ghost device last two
    var ghostDeviceLastTwo = lastTwoNum - 7;
    ghostDeviceLastTwoNum = ghostDeviceLastTwo.toString(16);

    // ghost device full mac
    var ghostDeviceMac = inputMac.substring(0,14) + ':' + ghostDeviceLastTwoNum.toUpperCase();

    return(ghostDeviceMac);
  }
