Import:
  - common
  - wifiUtils
  - mockData


View:
  onLoad:
    executeActionGroup:
      actions:
        - invokeAPI:
            name: getStaticLeases
        - invokeAPI:
            name: getDevicesSchedule
        - invokeAPI:
            name: getTopology
        - invokeAPI:
            name: getTopologyGuest
        - invokeAPI:
            name: getSSWs
        - invokeAPI:
            name: getWifiStatus


  styles:
    scrollableView: true
    backgroundColor: 0xFFEAEAEA
    showNavigationIcon: true
  body:
    Column:
      styles:
        fontSize: 16
      children:
        -  PageHeader:
            inputs:
              title: r@kpn.nav.local_network
              showConnectionWarning: ${ensemble.storage.internetConnected == false}
              showSlaveDeviceWarning: ${ isMaster() == false }
        - LoadingContainer:
            isLoading: ${getSSWs.body == null}
            useShimmer: false
            loadingWidget: 
              Row:
                styles:
                  crossAxis: center
                  mainAxisSize: max
                  height: ${device.height - 160}
                children:
                  - Spacer
                  - Progress:
                      styles: { size: 50 }
                  - Spacer
            widget:
              Column:
                children:
                  - Conditional:
                      conditions:
                        - if: ${ensemble.storage.appConfig['deviceType'] != 'sw2'}
                          TabBar:
                            styles: { tabPadding: 0 16, color: 0xFF009900, tabBackgroundColor: 0xFFFFFFFF, tabFontWeight: bold, activeTabColor: 0xFF009900, indicatorColor: 0xFF009900, indicatorThickness: 4 }
                            selectedIndex: ${tabIndex}
                            items:
                              - label: r@kpn.local_network.topology
                                body: Topology

                              - label: r@kpn.local_network.connected_devices
                                body: ConnectedDevices

                              - label: r@kpn.local_network.dhcp
                                body: DHCP

                              - label: r@kpn.local_network.reserved_ip
                                body: ReservedIps

                              - label: r@kpn.local_network.dyndns
                                body: DYNDNS

                              - label: r@kpn.local_network.ipv6
                                body: Ipv6

                              #below changed from usage to Ethernet ports and should shown the usage of the Ethernet ports
                              - label: r@kpn.local_network.ethernet_ports
                                body: Ethernet
                        - else:
                          TabBar:
                            visible: "${ensemble.storage.appConfig['deviceType'] == 'sw2' && getAllPortParams.body }"
                            styles: { tabPadding: 0 16, color: 0xFF009900, tabBackgroundColor: 0xFFFFFFFF, tabFontWeight: bold, activeTabColor: 0xFF009900, indicatorColor: 0xFF009900, indicatorThickness: 4 }
                            selectedIndex: ${tabIndex}
                            items:
                              - label: r@kpn.local_network.topology
                                body: Topology

                              - label: r@kpn.local_network.connected_devices
                                body: ConnectedDevices

                              #below changed from usage to Ethernet ports and should shown the usage of the Ethernet ports
                              - label: r@kpn.local_network.ethernet_ports
                                body: Ethernet


LoadingToast:
  Column:
    styles: { backgroundColor: 0xFFDAF0DA, borderRadius: 4 , width: 100, height: 100, crossAxis: center, mainAxis: center}
    children:
      - Progress:
          id: progressIndicator
          display: circular
          countdown: 5
          styles: { color: 0xFF009900, thickness: 2 }
          onCountdownComplete:
            invokeAPI:
              name: getDevicesSchedule
              onResponse:
                invokeAPI:
                  name: listMST
                  onResponse:
                    invokeAPI:
                      name: getTopology
                      onResponse:
                        invokeAPI:
                          name: getTopologyGuest


Topology:
  Column:
    styles:
      padding: 16
    children:
      - Column:
          styles:
            backgroundColor: 0xFFFFFFFF
            shadowColor: 0xFFDEDEDE
            shadowRadius: 3
            shadowOffset: [ 0, 0 ]
            borderRadius: 10
            padding: 16
            gap: 16
          children:

            # header
            - Row:
                styles:
                  gap: 24
                  crossAxis: center
                children:
                  - ContentTitle:
                      inputs:
                        title: r@kpn.local_network.topology
                  - Conditional:
                      conditions:
                        - if: ${device.width > mobileBreakPoint}
                          TopologyLegend:
                  # reload button
                  - Spacer
                  - Row:
                      visible: false
                      id: reloadingChartIndicator
                      styles: { gap: , crossAxis: center }
                      children:
                        - Progress:
                            styles:
                              size: 24
                        - Text:
                            text: r@kpn.reloading
                            styles:
                              padding: 0 8

                  - Button:
                      label: r@kpn.reload
                      onTap:
                        executeCode:
                          body: |
                            reloadingChartIndicator.visible = true;
                          onComplete:
                            executeActionGroup:
                              actions:
                                - invokeAPI:
                                    name: getStaticLeases
                                - invokeAPI:
                                    name: getDevicesSchedule
                                - invokeAPI:
                                    name: getTopology
                                - invokeAPI:
                                    name: getTopologyGuest
                                - invokeAPI:
                                    name: getSSWs
                                - invokeAPI:
                                    name: getWifiStatus
                                    onResponse: |
                                      reloadingChartIndicator.visible = false;
            - Divider
            # diagram
            - FittedRow:
                styles:
                  childrenFits:
                    - auto
                    - auto
                    - 1
                    - auto
                children:

                  # main gateway
                  - Conditional:
                      conditions:
                        - if: ${device.width > mobileBreakPoint}
                          Stack:
                            styles:
                              alignChildren: topRight
                            children:

                              - Image:
                                  source: topology_side.png
                                  styles:
                                    width: 150
                                    margin: 50 0 0 0
                              - Column:
                                  styles:
                                    crossAxis: center
                                    width: 155
                                    padding: 24 0
                                  children:
                                    - Text:
                                        text: ${ensemble.storage.appConfig["deviceTypeLabel"]}
                                        selectable: false
                                        styles:
                                          textStyle:
                                            fontWeight: bold
                                            fontSize: 18
                                            color: 0xFF009900
                                    - Text:
                                        text: ${ensemble.storage.deviceInfo.ExternalIPAddress}
                                        selectable: false
                                        styles:
                                          textStyle:
                                            color: 0xFF939393
                                            fontWeight: bold
                                    - Stack:
                                        styles:
                                          alignChildren: topRight
                                        children:
                                          - Icon:
                                              library: kpnSI
                                              name: ${ensemble.storage.appConfig["deviceIcon"]}
                                              styles:
                                                color: white
                                                size: 90
                                                padding: 40 16 16 16
                                          - Icon:
                                              name: "${ getWifiStatus.body.status.Status ? 0xE9BE : 0xE9BD }"
                                              library: kpnUI
                                              id: mainWifiIcon
                                              styles:
                                                padding: 24 0 0 16
                                                color: white
                                                size: 32
                                    - Spacer:
                                        styles:
                                          size: 16
                                    - Row:
                                        styles:
                                          gap: 2
                                          mainAxis: center
                                          width: 155
                                        children:
                                          - Text:
                                              text: ${ensemble.storage.extenderCount}
                                              selectable: false
                                              styles:
                                                textStyle:
                                                  fontWeight: bold
                                          - Text:
                                              text: "${ensemble.storage.extenderCount == 1 ? 'r@kpn.extender_count_single' : 'r@kpn.extender_count_multiple'}"
                                              selectable: false
                                              styles:
                                                textStyle:
                                                  fontWeight: bold
                                    - Text:
                                        text: "${ensemble.storage.totalActiveDeviceCount} ${ensemble.storage.totalActiveDeviceCount == 1 ? 'r@kpn.device_count_single' : 'r@kpn.device_count_multiple'}"
                                        selectable: false
                                        styles:
                                          textStyle:
                                            fontWeight: bold
                        
                        
                  - Shape:
                      styles:
                        backgroundColor: 0xFF2B9A01
                        width: 6
                        height: ${ calculateTopologyHeight(getTopology.body.activeExtenders, getTopologyGuest.body.activeExtenders, getSSWs.body.inactiveExtenders ) }
                        borderRadius: 6
                  # network map
                  - Column:
                      children:
                        - Extenders:
                            inputs:
                              extenders: ${getTopology.body.activeExtenders.concat(getTopologyGuest.body.activeExtenders)}
                        - Extenders:
                            inputs:
                              extenders: ${getSSWs.body.inactiveExtenders}
                        - Spacer:
                            styles:
                              size: 12
                        - Homeplugs:
                            inputs:
                              homeplugs: ${getTopology.body.activeHomeplugs}
                              parent: gateway
                        - Spacer:
                            styles:
                              size: 12
                        - DeviceList:
                            inputs:
                              devices: ${getTopology.body.activeDirectDevices.concat(getTopologyGuest.body.activeDirectDevices)}
                              displayLeftBorder: false


TopologyLegend:
  body:
    Row:
      children:
        - Column:
            children:
              - Image:
                  source: line-green-solid.png
                  styles:
                    width: 30
                    height: 2
                    fit: cover
                    margin: 8 0
              - Image:
                  source: line-orange-solid.png
                  styles:
                    width: 30
                    height: 2
                    fit: cover
                    margin: 8 0
        - Spacer:
            styles:
              size: 8
        - Column:
            styles:
              gap: 4
            children:
              - Text:
                  text: r@kpn.topology_legend.ethernet_green
                  styles:
                    textStyle:
                      fontSize: 11
              - Text:
                  text: r@kpn.topology_legend.ethernet_red
                  styles:
                    textStyle:
                      fontSize: 11
        - Spacer:
            styles:
              size: 24
        - Column:
            children:
              - Image:
                  source: line-green-dashed.png
                  styles:
                    width: 30
                    height: 2
                    fit: cover
                    margin: 8 0
              - Image:
                  source: line-orange-dashed.png
                  styles:
                    width: 30
                    height: 2
                    fit: cover
                    margin: 8 0
        - Spacer:
            styles:
              size: 8
        - Column:
            styles:
              gap: 4
            children:
              - Text:
                  text: r@kpn.topology_legend.wifi_green
                  styles:
                    textStyle:
                      fontSize: 11
              - Text:
                  text: r@kpn.topology_legend.wifi_red
                  styles:
                    textStyle:
                      fontSize: 11
        - Spacer:
            styles:
              size: 24
        - Column:
            styles:
              gap: 8
              crossAxis: center
            children:
              - Icon:
                  name: 0xe978
                  library: kpnUI
                  styles:
                    size: 18
              - Image:
                  source: line-power-solid.png
                  styles:
                    width: 30
                    height: 4
                    fit: cover
                    margin: 2 0
        - Spacer:
            styles:
              size: 8
        - Column:
            styles:
              gap: 4
            children:
              - Text:
                  text: r@kpn.topology_legend.switch
                  styles:
                    textStyle:
                      fontSize: 11
              - Text:
                  text: r@kpn.topology_legend.plug
                  styles:
                    textStyle:
                      fontSize: 11


Extenders:
  inputs:
    - extenders
  body:
    Column:
      item-template:
        data: ${extenders}
        name: e
        template:
          Extender:
            inputs:
              extender: ${e}


Homeplugs:
  inputs:
    - homeplugs
    - parent
  body:
    Column:
      item-template:
        data: ${homeplugs}
        name: h
        template:
          Homeplug:
            inputs:
              homeplug: ${h}
              parent: ${parent}


Extender:
  inputs:
    - extender
  onLoad: |
    extenderConnection.source = getTopologyLine(extender.connectionDetails, extender.switchConnected);
    
    // calculate the left border height
    var extenderLeftBorderTopLine = 0;
    
    if (extender.activeDirectDevices) {
      // height added per device
      extenderLeftBorderTopLine = (extender.activeDirectDevices.length - 1) * 44;
      if (extender.activeDirectDevices.length > 5)
        extenderLeftBorderTopLine = 184;
    }
    
    extenderLeftBorderTop.height = extenderLeftBorderTopLine;

    var extenderLeftBorderBottomLine = 0;
    if (extender.activeExtenders) {
      extender.activeExtenders.map(function (ex) {
        if (ex.activeDirectDevices.length > 0) {
          if (ex.activeDirectDevices.length > 5)
            extenderLeftBorderBottomLine = extenderLeftBorderBottomLine + 200;
          else
            extenderLeftBorderBottomLine = extenderLeftBorderBottomLine + ((ex.activeDirectDevices.length - 1) * 44);
        }
        else
          extenderLeftBorderBottomLine = extenderLeftBorderBottomLine + 100;
      });
    }
      
    if (extender.activeExtenders && extender.activeExtenders.length > 0)
      extenderLeftBorderBottom.height = extenderLeftBorderBottomLine;
    
  body:
    Column:
      styles:
        margin: 8 0
      children:
        - FittedRow:
            styles:
              childrenFits:
                - auto
                - 1
            children:
              - Column:
                  children:
                    - Row:
                        styles:
                          crossAxis: center
                        children:
                          - Image:
                              id: extenderConnection
                              styles:
                                margin: 62 0 0 0
                                height: 2
                                width: 80
                                fit: fitWidth
                          - Column:
                              testId: topologyExtender
                              onTap:
                                showDialog:
                                  widget:
                                    SlaveDeviceDetails:
                                      inputs:
                                        mac: ${extender.Key}
                                        iconColor: "${ extender.Active == false ? 'grey' : extender.SSW.State == 'Synced' ? 0xFF009900 : 0xFFE52E2E }"
                                  options:
                                    maxWidth: 700
                                    style: none
                              styles:
                                crossAxis: center
                                width: 120
                                height: 123
                              children:
                                - Text:
                                    text: ${extender.Name}
                                    selectable: false
                                    styles:
                                      overflow: ellipsis
                                      maxLines: 1
                                      textStyle:
                                        color: 0xFF0077CC
                                        fontWeight: bold
                                        fontSize: 12
                                
                                # active device count or offline
                                - Conditional:
                                    conditions:
                                      - if: ${extender.activeDirectDevices.length == 1}
                                        Text:
                                          text: ${extender.activeDirectDevices.length} r@kpn.device_count_single
                                          selectable: false
                                          styles:
                                            textStyle:
                                              color: 0xFF939393
                                              fontWeight: w500
                                              fontSize: 12
                                      - elseif: ${extender.activeDirectDevices.length > 1 || extender.activeDirectDevices.length == 0}
                                        Text:
                                          text: ${extender.activeDirectDevices.length} r@kpn.device_count_multiple
                                          selectable: false
                                          styles:
                                            textStyle:
                                              color: 0xFF939393
                                              fontWeight: w500
                                              fontSize: 12
                                      - elseif: ${extender.Active == false}
                                        Text:
                                          text: r@kpn.login.extenders.extender_noaccessible
                                          selectable: false
                                          styles:
                                            textStyle:
                                              color: 0xFF939393
                                              fontWeight: w500
                                              fontSize: 12
                                - Icon:
                                    name: ${getDeviceIcon(extender.SSW.ModelName)}
                                    library: kpnSI
                                    styles:
                                      size: 72
                                      color: "${ extender.Active == false ? 'grey' : extender.SSW.State == 'Synced' ? 0xFF009900 : 0xFFE52E2E }"
                                
                          - Image:
                              visible: ${extender.Active == true && extender.activeDirectDevices.length > 1}
                              source: line-green-solid.png
                              styles:
                                margin: 62 0 0 0
                                height: 2
                                width: 40
                                fit: fitWidth
                    - Image:
                        id: extenderLeftBorderTop
                        source: line-vertical.png
                        visible: ${extender.Active == true && extender.activeExtenders.length > 0}
                        styles:
                          width: 2
                          fit: cover
                          margin: 0 0 0 140

              - Conditional:
                  conditions:
                    - if: ${extender.Active == true && extender.activeDirectDevices.length > 0}
                      DeviceList:
                        inputs:
                          devices: ${extender.activeDirectDevices}
                          displayLeftBorder: true

        - Conditional:
            conditions:
              - if: ${extender.activeExtenders.length > 0 && extender.Active == true}
                FittedRow:
                  styles:
                    childrenFits:
                      - auto
                      - 1
                  children:
                    - Image:
                        id: extenderLeftBorderBottom
                        source: line-vertical.png
                        styles:
                          margin: 0 0 0 140
                          width: 2
                          fit: cover
                          height: 0
                    - Extenders:
                        inputs:
                          extenders: ${extender.activeExtenders}


Homeplug:
  inputs:
    - homeplug
  onLoad: |
    var extenderLeftBorderBottomLine = 0;
    if (homeplug.activeExtenders) 
      extenderLeftBorderBottomLine = extenderLeftBorderBottomLine + (homeplug.activeExtenders.length * 120);
    
    // calculate the left border height
    var extenderLeftBorderTopLine = 0;
    
    if (homeplug.activeDirectDevices) {
      // height added per device
      extenderLeftBorderTopLine = (homeplug.activeDirectDevices.length - 1) * 44;
      if (homeplug.activeDirectDevices.length > 5)
        extenderLeftBorderTopLine = 184;
    }
    
    extenderLeftBorderTop.height = extenderLeftBorderTopLine;
    if (homeplug.activeExtenders && homeplug.activeExtenders.length > 0)
      extenderLeftBorderBottom.height = 95;
    
  body:
    Column:
      children:
        - FittedRow:
            styles:
              childrenFits:
                - auto
                - 1
            children:
              - Column:
                  children:
                    - Row:
                        styles:
                          crossAxis: center
                        children:
                          - Image:
                              id: extenderConnection
                              source: '${parent == "plug" ? "line-power-solid.png" : getTopologyLine(homeplug.connectionDetails, homeplug.switchConnected) }'
                              styles:
                                margin: '${parent == "plug" ? 4 : 8} 0 0 0'
                                height: '${parent == "plug" ? 4 : 2}'
                                width: 80
                                fit: fitWidth
                          - Row:
                              testId: topologyHomeplug
                              onTap:
                                showDialog:
                                  widget:
                                    HomePlugDeviceDetails:
                                      inputs:
                                        mac: ${homeplug.Key}
                                  options:
                                    maxWidth: 700
                                    style: none
                              styles:
                                crossAxis: center
                                height: 48
                              children:
                                - Icon:
                                    library: kpnSI
                                    name: 0xE93F
                                    styles:
                                      size: 32
                                      padding: 8
                                      backgroundColor: 0xFFF3F3F3
                                      borderRadius: 100
                                - Text:
                                    text: ${homeplug.Name}
                                    styles:
                                      margin: 0 8
                                      textStyle:
                                        overflow: ellipsis
                                        color: 0xFF0077CC
                                        fontWeight: w500
                                        fontSize: 12
                                        width: 150
                          - Image:
                              visible: ${homeplug.Active == true && homeplug.activeDirectDevices.length + homeplug.activeHomeplugs.length > 1}
                              source: line-power-solid.png
                              styles:
                                margin: 8 0 0 0
                                height: 4
                                width: 40
                                fit: fitWidth
              - Column:
                  children:
                    - Conditional:
                        conditions:
                          - if: ${homeplug.Active == true && homeplug.activeDirectDevices.length > 0}
                            DeviceList:
                              inputs:
                                devices: ${homeplug.activeDirectDevices}
                                displayLeftBorder: true
                                parentIsPlug: true

                    - Conditional:
                        conditions:
                          - if: ${homeplug.activeHomeplugs.length > 0 && homeplug.Active == true}
                            Homeplugs:
                              inputs:
                                homeplugs: ${homeplug.activeHomeplugs}
                                parent: plug

        - Conditional:
            conditions:
              - if: ${homeplug.activeExtenders.length > 0 && homeplug.Active == true}
                FittedRow:
                  styles:
                    childrenFits:
                      - auto
                      - 1
                  children:
                    - Image:
                        id: extenderLeftBorderBottom
                        source: line-vertical.png
                        styles:
                          margin: 0 0 0 125
                          width: 2
                          fit: cover
                          height: 0
                    - Extenders:
                        inputs:
                          extenders: ${extender.activeExtenders}


DeviceList:
  inputs:
    - devices
    - displayLeftBorder
    - parentIsPlug
  onLoad: |
    var h = devices.length * 44 - 44;
    if (devices.length > 4)
        h = 178;
    leftBorder.height = h;
  body:
    FittedRow:
      margin: "${ parentIsPlug ? 0 : (displayLeftBorder == true ? '62' : '8')} 0 0 0"
      crossAxis: center
      styles:
        childrenFits:
          - auto
          - 1
      children:
        - Image:
            id: leftBorder
            visible: ${displayLeftBorder && devices.length > 1}
            source: line-vertical.png
            styles:
              width: 2
              fit: fitHeight
        
        - Conditional:
            conditions:
              - if: ${devices.length < 5}
                Column:
                  item-template:
                    data: ${devices}
                    name: d
                    template:
                      DeviceItem:
                        inputs:
                          device: ${d}

              - else:
                Column:
                  children:
                    - Column:
                        item-template:
                          # show max 4 devices
                          data: ${[devices[0],devices[1],devices[2],devices[3]]}
                          name: d
                          template:
                            DeviceItem:
                              inputs:
                                device: ${d}

                    # show x more when more than 4 devices
                    - Row:
                        styles:
                          height: 44
                          padding: 2 0
                          gap: 8
                          crossAxis: center
                        
                        testId: topologyShowAllDevices
                        onTap:
                          navigateScreen:
                            name: "${device.width > 768 ? 'AppGateway' : 'AppGatewayDrawer'}"
                            inputs:
                              selectedIndex: 3
                              tabIndex: 1
                        children:
                          - Image:
                              source: line-green-solid.png
                              styles:
                                width: 80
                          - Text:
                              text: ${devices.length - 4} meer apparaten
                              selectable: false
                              styles:
                                margin: 0 8
                                textStyle:
                                  color: 0xFF0077CC
                                  fontWeight: w500


DeviceItem:
  inputs:
    - device
  onLoad: |
    deviceConnection.source = getTopologyLine(device.connectionDetails, device.switchConnected);

  body:
    FittedRow:
      testId: topologyDevice
      styles:
        height: 44
        padding: 2 0
        crossAxis: center
        childrenFits:
          - auto
          - auto
          - 1
      onTap:
        showDialog:
          widget:
            ClientDeviceDetails:
              inputs:
                mac: ${device.Key}
          options:
            maxWidth: 700
            style: none
          onDialogDismiss:
            invokeAPI:
              name: getTopology
      children:
        - Image:
            id: deviceConnection
            styles:
              width: 80
        - Icon:
            library: kpnUI
            name: ${getDeviceIcon(device.DeviceType)}
            styles:
              size: 22
              padding: 8
              backgroundColor: 0xFFF3F3F3
              color: 0xFF535353
              borderRadius: 100
        - Text:
            text: ${device.Name}
            selectable: false
            styles:
              margin: 0 8
              textStyle:
                color: 0xFF0077CC
                fontWeight: w500


ConnectedDevices:
  onLoad:
    executeActionGroup:
      actions:
        - executeCode:
            body: |
              ensemble.storage.devicesWithParentalControl = {};
            onComplete:
              executeActionGroup:
                actions:
                  - invokeAPI:
                      name: getDevicesSchedule
                  - invokeAPI:
                      name: listMST
        - invokeAPI:
            name: getDeviceSelf
        - invokeAPI:
            name: getInactiveDevices

  Column:
    styles:
      padding: 16
      gap: 16
    children:
      - Column:
          styles:
            backgroundColor: 0xFFFFFFFF
            shadowColor: 0xFFDEDEDE
            shadowRadius: 3
            shadowOffset: [ 0, 0 ]
            borderRadius: 10
            padding: 16
            gap: 16
          children:
            - Flex:
                styles: { mainAxis: spaceBetween, gap: 10 }
                direction: '${device.width > 768 ? "horizontal" : "vertical"}'
                children:
                  - ContentTitle:
                      inputs:
                        title: r@kpn.local_network.connected_devices
                  - Row:
                      styles: { crossAxis: center }
                      children:
                        - Row:
                            visible: false
                            id: reloadingChartIndicator
                            styles: { gap: , crossAxis: center }
                            children:
                              - Progress:
                                  styles:
                                    size: 24
                              - Text:
                                  text: r@kpn.reloading
                                  styles:
                                    padding: 0 8

                        - Button:
                            label: r@kpn.reload
                            onTap:
                              executeCode:
                                body: |
                                  //@code
                                  reloadingChartIndicator.visible = true;
                                onComplete:
                                  invokeAPI:
                                    name: getSSWs
                                    onResponse:
                                      invokeAPI:
                                        name: getTopology
                                        onResponse:
                                          invokeAPI:
                                            name: getTopologyGuest
                                            onResponse:
                                              invokeAPI:
                                                name: getInactiveDevices
                                                onResponse: |
                                                  //@code
                                                  reloadingChartIndicator.visible = false;

            - Row:
                styles: { gap: 12, crossAxis: center }
                children:
                  - Column:
                      styles: { backgroundColor: 0xFF009900, width: 48, height: 48, borderRadius: 60, mainAxis: center, crossAxis: center }
                      children:
                        - Icon:
                            name: ${ensemble.storage.appConfig["deviceIcon"]}
                            library: kpnSI
                            styles: { size: 36, color: white }
                  - Column:
                      styles: { gap: 2 }
                      children:
                        - Text:
                            text: ${getDeviceSelf.body.status[0].Name}
                            styles:
                              textStyle:
                                fontWeight: bold
                                color: 0xFF009900
                        - Text:
                            text: ${ensemble.storage.appConfig["deviceTypeLabel"]}
                            styles:
                              textStyle:
                                color: grey

            - Text:
                text: "${getTopology.body.activeDirectDevices.length} ${getTopology.body.activeDirectDevices.length == 1 ? 'r@kpn.device_count_single' : 'r@kpn.device_count_multiple'}"
                styles:
                  padding: 0 0 0 60
                  textStyle:
                    fontSize: 12
                    fontWeight: bold

            - Column:
                styles: { padding: 0 0 0 60 }
                children:
                  - ChildrenDeviceList:
                      inputs:
                        devices: ${getTopology.body.activeDirectDevices.concat(getTopologyGuest.body.activeDirectDevices)}
            - Spacer:
                styles: { size: 16 }

            # active extenders
            - Column:
                item-template:
                  data: ${getTopology.body.activeExtenders.concat(getTopologyGuest.body.activeExtenders)}
                  name: extender
                  template:
                    Column:
                      children:
                        - Row:
                            styles: { gap: 12 }
                            children:
                              - Icon:
                                  styles:
                                    backgroundColor: "${ extender.SSW.State == 'Synced' ? 0xFF009900 : 0xFFE52E2E }"
                                    color: white
                                    size: 36
                                    padding: 6
                                    borderRadius: 48
                                  name: ${getDeviceIcon(extender.SSW.ModelName)}
                                  library: kpnSI
                              - Column:
                                  styles: { gap: 2, padding: 2 0 }
                                  children:
                                    - Text:
                                        text: ${extender.Name}
                                        selectable: true
                                        styles:
                                          textStyle:
                                            fontWeight: bold
                                            color: 0xFF009900
                                    - Text:
                                        text: ${getDeviceCommercialName(extender.SSW.ModelName)}
                                        selectable: true
                                        styles:
                                          textStyle:
                                            color: grey
                              - Icon:
                                  testId: slaveDeviceItem
                                  name: 0xe931
                                  library: kpnUI
                                  styles: { color: 0xFF0077CC }
                                  onTap:
                                    showDialog:
                                      widget:
                                        SlaveDeviceDetails:
                                          inputs:
                                            mac: ${extender.Key}
                                            iconColor: "${ extender.SSW.State == 'Synced' ? 0xFF009900 : 0xFFE52E2E }"
                                      options:
                                        maxWidth: 700
                                        style: none
                        - ExtendersConnectedDevices:
                            inputs:
                              extender: ${extender}

            # inactive extenders
            - Column:
                item-template:
                  data: ${getSSWs.body.inactiveExtenders}
                  name: inactiveExtender
                  template:
                    Column:
                      children:
                        - Row:
                            styles: 
                              gap: 12
                              margin: 16 0
                            children:
                              - Icon:
                                  styles:
                                    backgroundColor: grey
                                    color: white
                                    size: 36
                                    padding: 6
                                    borderRadius: 48
                                  name: ${getDeviceIcon(inactiveExtender.SSW.ModelName)}
                                  library: kpnSI
                              - Column:
                                  styles: { gap: 2, padding: 2 0 }
                                  children:
                                    - Text:
                                        text: ${inactiveExtender.Name}
                                        selectable: true
                                        styles:
                                          textStyle:
                                            fontWeight: bold
                                            color: 0xFF009900
                                    - Text:
                                        text: ${getDeviceCommercialName(inactiveExtender.SSW.ModelName)}
                                        selectable: true
                                        styles:
                                          textStyle:
                                            color: grey
                              - Icon:
                                  testId: inactiveSlaveDeviceItem
                                  name: 0xe931
                                  library: kpnUI
                                  styles: { color: 0xFF0077CC }
                                  onTap:
                                    showDialog:
                                      widget:
                                        SlaveDeviceDetails:
                                          inputs:
                                            mac: ${inactiveExtender.Key}
                                            iconColor: grey
                                      options:
                                        maxWidth: 700
                                        style: none

            # plugs
            - Column:
                item-template:
                  data: ${getTopology.body.activeHomeplugs}
                  name: plug
                  template:
                    Column:
                      children:
                        - Row:
                            styles: { gap: 12 }
                            children:
                              - Icon:
                                  styles:
                                    backgroundColor: 0xFF009900
                                    color: white
                                    size: 36
                                    padding: 6
                                    borderRadius: 48
                                  name: 0xE93F
                                  library: kpnSI
                              - Column:
                                  styles: { gap: 2, padding: 2 0 }
                                  children:
                                    - Text:
                                        text: ${plug.Name}
                                        selectable: true
                                        styles:
                                          textStyle:
                                            fontWeight: bold
                                            color: 0xFF009900
                              - Icon:
                                  testId: plugDeviceItem
                                  name: 0xe931
                                  library: kpnUI
                                  styles: { color: 0xFF0077CC }
                                  onTap:
                                    showDialog:
                                      widget:
                                        HomePlugDeviceDetails:
                                          inputs:
                                            mac: ${plug.Key}
                                            iconColor: 0xFF009900
                                      options:
                                        maxWidth: 700
                                        style: none
                        - HomeplugConnectedDevices:
                            inputs:
                              homeplug: ${plug}



      # inactive devices
      - Column:
          styles:
            backgroundColor: 0xFFFFFFFF
            shadowColor: 0xFFDEDEDE
            shadowRadius: 3
            shadowOffset: [ 0, 0 ]
            borderRadius: 10
            padding: 16
            gap: 12
          children:
            - Flex:
                styles: { mainAxis: spaceBetween, gap: 10 }
                direction: '${device.width > 768 ? "horizontal" : "vertical"}'
                children:
                  - ContentTitle:
                      inputs:
                        title: r@kpn.local_network.connected_devices_inactive
                  - Button:
                      id: clearALlBtn
                      label: Verwijder alles
                      onTap:
                        showDialog:
                          widget: DeleteAllInactiveDevices

            - DataGrid:
                styles:
                  headingText: { font: heading, fontSize: 16, color: grey }
                borderColor: white
                horizontalMargin: 0
                headingRowHeight: 32
                columnSpacing: 24
                border:
                  horizontalInside:
                    color: 0xFFE3E3E3
                DataColumns:
                  - label: r@kpn.device
                    type: text
                    sortable: true
                    sortKey: NameSortable
                  - label: r@kpn.mac_address
                    type: text
                    sortable: true
                    sortKey: Key
                  - label: r@kpn.local_network.last_connection
                    type: text
                    sortable: true
                    sortKey: LastConnection
                  - label: ' '
                    type: text
                item-template:
                  data: ${getInactiveDevices.body.status}
                  name: device
                  template:
                    DataRow:
                      children:
                        - Row:
                            styles: { width: 300, crossAxis: center }
                            children:
                              - Text:
                                  text: ${device.Name}
                                  selectable: true
                                  styles: { color: grey }
                        - Text:
                            text: ${device.Key}
                            selectable: true
                            styles: { color: grey }
                        - Text:
                            text: ${device.LastConnection}
                            selectable: true
                            styles: { color: grey }
                        - Row:
                            styles: { width: 200, mainAxis: end }
                            children:
                              - Text:
                                  id: removingDeviceStatus
                                  styles: { color: grey }
                              - Icon:
                                  id: inactiveDeviceActions
                                  name: 0xe92a
                                  library: kpnUI
                                  visible: ${ensemble.storage.appConfig["deviceType"] != "sw2" }
                                  styles: { color: 0xFFE52E2E }
                                  testId: connectedDevicesInactiveItem
                                  onTap:
                                    executeCode:
                                      body: |
                                        //@code
                                        inactiveDeviceActions.visible = false;
                                        removingDeviceStatus.text = "r@kpn.local_network.removing_device";
                                      onComplete:
                                        invokeAPI:
                                          name: removeDevice
                                          inputs:
                                            mac: ${device.Key}
                                          onResponse:
                                            invokeAPI:
                                              name: getInactiveDevices

                # display indicator while loading
                children:
                  - DataRow:
                      visible: "${getInactiveDevices.body == null ? true : false }"
                      children:
                        - Progress:
                            styles: { size: 32 }
                        - Text:
                            text: ' '
                        - Text:
                            text: ' '
                        - Text:
                            text: ' '
                  - DataRow:
                      visible: "${getInactiveDevices.body.status.length == 0 ? true : false }"
                      children:
                        - Text:
                            text: '-'
                        - Text:
                            text: '-'
                        - Text:
                            text: '-'
                        - Text:
                            text: ' '

            - Row:
                children:
                  - Spacer:
                      styles: { size: 40 }


ExtendersConnectedDevices:
  inputs:
    - extender
  body:
    Column:
      styles:
        # padding: 16 0
      children:
        - Column:
            styles:
              padding: 16 0 32 60
            children:
              # device count
              - Text:
                  text: "${extender.activeDirectDevices.length} ${extender.activeDirectDevices.length == 1 ? 'r@kpn.device_count_single' : 'r@kpn.device_count_multiple'}"
                  styles:
                    padding: 0 0 8 0
                    textStyle:
                      fontSize: 12
                      fontWeight: bold

              # DataGrid of connected devices
              - ChildrenDeviceList:
                  inputs:
                    devices: ${extender.activeDirectDevices}
            
        - Column:
            item-template:
              data: ${extender.activeExtenders}
              name: extenderChild
              template:
                Column:
                  styles: { gap: 12, padding: 0 0 24 0 }
                  children:
                    - Row:
                        styles: { gap: 12 }
                        children:
                          - Icon:
                              styles:
                                backgroundColor: "${ extenderChild.SSW.State == 'Synced' ? 0xFF009900 : 0xFFE52E2E }"
                                color: white
                                size: 36
                                padding: 6
                                borderRadius: 48
                              name: ${getDeviceIcon(extenderChild.SSW.ModelName)}
                              library: kpnSI
                          - Column:
                              styles: { gap: 2, padding: 2 0 }
                              children:
                                - Text:
                                    text: ${extenderChild.Name}
                                    selectable: true
                                    styles:
                                      textStyle:
                                        fontWeight: bold
                                        color: 0xFF009900
                                - Text:
                                    text: ${getDeviceCommercialName(extenderChild.SSW.ModelName)}
                                    selectable: true
                                    styles:
                                      textStyle:
                                        color: grey
                          - Icon:
                              name: 0xe931
                              library: kpnUI
                              styles: { color: 0xFF0077CC }
                              testId: connectedDevicesExtender
                              onTap:
                                showDialog:
                                  widget:
                                    SlaveDeviceDetails:
                                      inputs:
                                        mac: ${extenderChild.Key}
                                        iconColor: "${ extenderChild.SSW.State == 'Synced' ? 0xFF009900 : 0xFFE52E2E }"
                                  options:
                                    maxWidth: 700
                                    style: none
                
                    - ExtendersConnectedDevices:
                        inputs:
                          extender: ${extenderChild}


HomeplugConnectedDevices:
  inputs:
    - homeplug
  body:
    Column:
      styles:
        # padding: 16 0
      children:
        - Column:
            styles:
              padding: 16 0 32 60
            children:
              # device count
              - Text:
                  text: "${homeplug.activeDirectDevices.length} ${homeplug.activeDirectDevices.length == 1 ? 'r@kpn.device_count_single' : 'r@kpn.device_count_multiple'}"
                  styles:
                    padding: 0 0 8 0
                    textStyle:
                      fontSize: 12
                      fontWeight: bold

              # DataGrid of connected devices
              - ChildrenDeviceList:
                  inputs:
                    devices: ${ homeplug.activeDirectDevices }
                 
        # extenders
        - Column:
            item-template:
              data: ${homeplug.activeExtenders}
              name: extenderChild
              template:
                Column:
                  styles: { gap: 12, padding: 0 0 24 0 }
                  children:
                    - Row:
                        styles: { gap: 12 }
                        children:
                          - Icon:
                              styles:
                                backgroundColor: "${ extenderChild.SSW.State == 'Synced' ? 0xFF009900 : 0xFFE52E2E }"
                                color: white
                                size: 36
                                padding: 6
                                borderRadius: 48
                              name: ${getDeviceIcon(extenderChild.SSW.ModelName)}
                              library: kpnSI
                          - Column:
                              styles: { gap: 2, padding: 2 0 }
                              children:
                                - Text:
                                    text: ${extenderChild.Name}
                                    selectable: true
                                    styles:
                                      textStyle:
                                        fontWeight: bold
                                        color: 0xFF009900
                                - Text:
                                    text: ${getDeviceCommercialName(extenderChild.SSW.ModelName)}
                                    selectable: true
                                    styles:
                                      textStyle:
                                        color: grey
                          - Icon:
                              name: 0xe931
                              library: kpnUI
                              styles: { color: 0xFF0077CC }
                              testId: connectedDevicesExtender
                              onTap:
                                showDialog:
                                  widget:
                                    SlaveDeviceDetails:
                                      inputs:
                                        mac: ${extenderChild.Key}
                                        iconColor: "${ extenderChild.SSW.State == 'Synced' ? 0xFF009900 : 0xFFE52E2E }"
                                  options:
                                    maxWidth: 700
                                    style: none
                    - ExtendersConnectedDevices:
                        inputs:
                          extender: ${extenderChild}

        # plugs
        - Column:
            item-template:
              data: ${homeplug.activeHomeplugs}
              name: plug
              template:
                Column:
                  children:
                    - Row:
                        styles: { gap: 12 }
                        children:
                          - Icon:
                              styles:
                                backgroundColor: 0xFF009900
                                color: white
                                size: 36
                                padding: 6
                                borderRadius: 48
                              name: 0xE93F
                              library: kpnSI
                          - Column:
                              styles: { gap: 2, padding: 2 0 }
                              children:
                                - Text:
                                    text: ${plug.Name}
                                    selectable: true
                                    styles:
                                      textStyle:
                                        fontWeight: bold
                                        color: 0xFF009900
                          - Icon:
                              testId: plugDeviceItem
                              name: 0xe931
                              library: kpnUI
                              styles: { color: 0xFF0077CC }
                              onTap:
                                showDialog:
                                  widget:
                                    HomePlugDeviceDetails:
                                      inputs:
                                        mac: ${plug.Key}
                                        iconColor: 0xFF009900
                                  options:
                                    maxWidth: 700
                                    style: none
                    - HomeplugConnectedDevices:
                        inputs:
                          homeplug: ${plug}


DeleteAllInactiveDevices:
  body:
    Column:
      styles: { width: 420, height: 100, backgroundColor: white }
      children:
        - Column:
            styles: { mainAxis: center }
            children:
              - Row:
                  visible: false
                  id: progressIndicator
                  styles:
                    crossAxis: center
                    gap: 16
                  children:
                    - Progress:
                        styles: { color: 0xFF009900, thickness: 2 }
                    - Text:
                        id: deviceName

              - Text:
                  id: confirmationText
                  text: r@kpn.local_network.confirm_removing_all_devices
              - Text:
                  id: error
              - Row:
                  id: confirmForm
                  styles: { crossAxis: center, mainAxis: end, gap: 24, visibilityTransitionDuration: .3 }
                  children:
                    - Button:
                        styles:
                          outline: true
                          labelStyle:
                            color: 0xFF0077CC
                        label: r@kpn.cancel
                        onTap: closeAllDialogs
                    - Button:
                        label: r@kpn.confirm
                        onTap:
                          executeCode:
                            body: |
                              //@code
                              confirmForm.visible = false;
                              confirmationText.visible = false;
                              progressIndicator.visible = true;
                            onComplete:
                              invokeAPI:
                                name: getInactiveDevicesList
                                onResponse:
                                  startTimer:
                                    options:
                                      repeat: true
                                      repeatInterval: 1
                                      maxNumberOfTimes: ${getInactiveDevicesList.body.status.length}
                                      startAfter: 0
                                    onTimer:
                                      executeCode:
                                        body: |
                                          //@code
                                          if (getInactiveDeviceIndex() < getInactiveDevicesList.body.status.length) {
                                            deviceName.text = "Apparaat verwijderen " + getInactiveDevicesList.body.status[getInactiveDeviceIndex()].Name;
                                            ensemble.invokeAPI("removeDevice", { "mac": getInactiveDevicesList.body.status[getInactiveDeviceIndex()].Key });
                                            incrementInactiveDeviceIndex();
                                          }
                                    onTimerComplete:
                                      invokeAPI:
                                        name: getInactiveDevices
                                        onResponse:
                                          closeAllDialogs

ChildrenDeviceList:
  inputs:
    - devices
  
  body:
    Conditional:
      conditions:
        - if: ${devices != null && devices.length > 0 }
          widget:
            DataGrid:
              styles:
                headingText: { font: heading, fontSize: 14, color: grey }
              borderColor: white
              horizontalMargin: 0
              headingRowHeight: 32
              columnSpacing: 24
              border:
                horizontalInside:
                  color: 0xFFD3D3D3
              DataColumns:
                - label: ' '
                  type: text
                - label: r@kpn.device
                  type: r@kpn.device
                  sortable: true
                  sortKey: NameSortable
                - label: r@kpn.mac_address
                  type: text
                  sortable: true
                  sortKey: Key
                - label: r@kpn.ip4_address
                  type: text
                  sortable: true
                  sortKey: SortableIp
                - label: r@kpn.local_network.ip_address_source
                  type: text
                  sortable: true
                  sortKey: IPAddressSourceLabel
                - label: r@kpn.verbinding_type
                  type: text
                  sortable: true
                  sortKey: typeLabel
                - label: r@kpn.speed
                  type: text
                  sortable: true
                  sortKey: downloadUploadSpeed
                - label: r@kpn.network_name
                  type: text
                  sortable: true
                  sortKey: networklabel
                - label: r@kpn.filter
                  type: text
                  sortable: true
                  sortKey: filter
              item-template:
                data: ${devices}
                name: device
                template:
                  DataRow:
                    children:
                      - Icon:
                          name: 0xe931
                          library: kpnUI
                          styles: { color: 0xFF0077CC }
                          testId: connectedDevicesItem
                          onTap:
                            showDialog:
                              widget:
                                ClientDeviceDetails:
                                  inputs:
                                    mac: ${device.Key}
                              options:
                                maxWidth: 700
                                style: none
                      - Row:
                          styles: { width: 200, gap: 8, crossAxis: center }
                          children:
                            - Icon:
                                name: ${getDeviceIcon(device.DeviceType)}
                                library: kpnUI
                                styles: { size: 24 }
                            - Text:
                                text: ${device.Name}
                                selectable: true
                                styles:
                                  expanded: true
                                  textStyle:
                                    overflow: ellipsis
                                    fontSize: 14
                      - Text:
                          text: ${device.Key}
                          selectable: true
                          styles:
                            textStyle:
                              fontSize: 14
                      - Row:
                          styles: { width: 120, crossAxis: center }
                          children:
                            - Text:
                                selectable: true
                                text: "${isIpv4(device.IPAddress) == true ? device.IPAddress : '-'}"
                                styles:
                                  textStyle:
                                    fontSize: 14
                      - Text:
                          text: ${device.IPAddressSourceLabel}
                          selectable: true
                          styles:
                            textStyle:
                              fontSize: 14
                      - Row:
                          styles: { crossAxis: center, gap: 4 }
                          children:
                            - Icon:
                                name: "${ device.connectionDetails.type == 'Ethernet' ? 0xe978 : 0xe9be }"
                                library: kpnUI
                            - Text:
                                selectable: true
                                text: "${device.connectionDetails.type != 'Ethernet' ? getWifiStandard(device.OperatingStandard, false) : device.connectionDetails.typeLabel}"
                                styles:
                                  textStyle:
                                    fontSize: 14
                      - Text:
                          text: "${ device.connectionDetails.type == 'Ethernet' ? ensemble.storage.ethPorts[device.InterfaceName].CurrentBitRateFormatted : device.downloadUploadSpeed }"
                          selectable: true
                          styles:
                            width: 140
                            textStyle:
                              fontSize: 14
                      - Text:
                          text: "${device.connectionDetails.networklabel} ${device.switchConnected ? ' / Switch' : ''}"
                          selectable: true
                          styles:
                            width: 140
                            textStyle:
                              fontSize: 14
                      # filter icon
                      - Conditional:
                          conditions:
                            - if: ${ensemble.storage.devicesWithParentalControl[device.Key] == "Time"}
                              widget:
                                Icon:
                                  name: 0xE8E1
                                  library: kpnUI
                            - elseif: ${ensemble.storage.devicesWithParentalControl[device.Key] == "Weekly"}
                              widget:  
                                Icon:
                                  name: 0xe925
                                  library: kpnUI
                            - elseif: ${ensemble.storage.devicesWithParentalControl[device.Key] == "Block"}
                              widget:  
                                Icon:
                                  name: 0xe993
                                  library: kpnUI
                            - else:
                              widget:
                                Text:
                                  text:  "-"

DHCP:
  onLoad:
    invokeAPI:
      name: getAllDevices
      onResponse: |
        //@code
        loadingState.visible = false;
        dhcpContent.visible = true;
  
  body:
    Column:
      styles:
        padding: 16
      children:

        # display indicator while loading
        - Row:
            id: loadingState
            styles:
              backgroundColor: 0xFFFFFFFF
              shadowColor: 0xFFDEDEDE
              shadowRadius: 3
              shadowOffset: [ 0, 0 ]
              borderRadius: 10
              padding: 16
              gap: 12
              crossAxis: center
              mainAxisSize: max
              height: ${device.height - 180}
            children:
              - Spacer
              - Progress:
                  styles: { size: 50 }
              - Spacer
        - Column:
            id: dhcpContent
            visible: false
            styles:
              backgroundColor: 0xFFFFFFFF
              shadowColor: 0xFFDEDEDE
              shadowRadius: 3
              shadowOffset: [0, 0]
              borderRadius: 10
              padding: 16
              gap: 12
            children:
              - ContentTitle:
                  inputs:
                    title: r@kpn.local_network.dhcp_server
              - Text:
                  text: r@kpn.local_network.dhcp_description
              
              - TabBar:
                  styles:
                    indicatorSize: tab
                    tabPadding: 4 32
                    indicatorThickness: 4
                    borderRadius: 8
                    indicatorColor: 0xFF009900
                    activeTabColor: 0xFF009900
                    inactiveTabColor: 0xFF535353
                    activeTabBackgroundColor: 0xFF009900
                    tabBackgroundColor: 0xFFF3F3F3
                    tabFontSize: 15
                    tabFontWeight: bold
                  items:
                    - label: r@kpn.local_network.main_network
                      body: MainNetworkDHCP

                    - label: r@kpn.local_network.guest_network
                      body: GuestNetworkDHCP


MainNetworkDHCP:
  onLoad:
    executeActionGroup:
      actions:
        - invokeAPI:
            name: getDhcpHostName
        - invokeAPI:
            name: getDhcpSettings
            onResponse: |
              //@code
              var dnsServers = getDhcpSettings.body.status.default.DNSServers.split(",");
              dnsPrimaryServerInput.value = dnsServers[0];
              if (dnsServers.length > 1 ) {
                dnsSecondaryServerInput.value = dnsServers[1];
              }
        - invokeAPI:
            name: getDHCPIPv4Authorative

  body:
    Column:
      children:
        - Column:
            styles:
              padding: 16 0
              gap: 8
            children:
              - Conditional:
                  conditions:
                    - if: ${ ensemble.storage.showHybridAccessWarning }
                      widget:
                        Column:
                          styles:
                            backgroundColor: 0xFFFBDFDF
                            borderRadius: 8
                            margin: 8 0
                          children:
                            - Divider:
                                styles:
                                  thickness: 5
                                  color: 0xFFE52E2E
                            - FittedRow:
                                styles:
                                  gap: 8
                                  padding: 8 16
                                  childrenFits:
                                    - auto
                                    - 1
                                children:
                                  - Icon:
                                      name: error_outline
                                      styles:
                                        size: 20
                                        color: 0xFFE52E2E
                                  - Column:
                                      children:
                                        - Text:
                                            text: r@kpn.home.hybrid_access_status_variant_warning
                                            styles:
                                              textStyle:
                                                overflow: wrap
                                        - Row:
                                            styles:
                                              crossAxis: center
                                              gap: 4
                                            onTap:
                                              executeCode:
                                                body: |
                                                  ipAddressInput.value = defaultDhcp.server;
                                                  subnetMastInput.value = defaultDhcp.subnetMask;
                                                  poolStart.value = defaultDhcp.poolStart;
                                                  poolEnd.value = defaultDhcp.poolEnd;
                                                  
                                                  // update DNS server if the value of server and DNS server were the same
                                                  if (getDhcpSettings.body.status.default.Server == getDhcpSettings.body.status.default.DNSServers)
                                                    dnsPrimaryServerInput.value = defaultDhcp.server;
                                                onComplete:
                                                  showDialog:
                                                    widget: MainNetwerkDHCPUpdateModal

                                            children:
                                              - Text:
                                                  text: r@kpn.home.hybrid_access_status_variant_fix
                                                  styles:
                                                    textStyle:
                                                      color: 0xFF0077CC
                                                      fontWeight: w500
                                              - Icon:
                                                  name: 0xe907
                                                  library: kpnUI
                                                  styles: { color: 0xFF0077CC, size: 20 }

              - Form:
                  onSubmit:
                    showDialog:
                      widget: MainNetwerkDHCPUpdateModal
                  styles:
                    labelPosition: '${device.width > 768 ? "start" : "top"}'
                    gap: 16
                  children:
                    - Switch:
                        id: dhcpServerSwitch
                        label: r@kpn.local_network.dhcp
                        value: ${getDhcpSettings.body.status.default.Enable}
                    - TextInput:
                        id: hostNameInput
                        label: r@kpn.host_name
                        value: ${getDhcpHostName.body.status.default.Name}
                    - TextInput:
                        id: domainInput
                        label: r@kpn.domain_name
                        value: ${getDhcpSettings.body.status.default.DomainName}
                    - TextInput:
                        id: ipAddressInput
                        inputType: ipAddress
                        label: r@kpn.ip_address
                        value: ${getDhcpSettings.body.status.default.Server}
                        onKeyPress: |
                          // update pool start and end
                          var ipArray = this.value.split(".");
                          var poolStartArray = poolStart.value.split(".");
                          var poolEndArray = poolEnd.value.split(".");

                          // only set if both IPs have 4 parts
                          if (ipArray.length == 4 && poolStartArray.length == 4)
                            poolStart.value = ipArray[0] + "." + ipArray[1] + "." + ipArray[2] + "." + poolStartArray[3];

                          if (ipArray.length == 4 && poolEndArray.length == 4)
                            poolEnd.value = ipArray[0] + "." + ipArray[1] + "." + ipArray[2] + "." + poolEndArray[3];

                          // update DNS server if the value of server and DNS server were the same
                          if (getDhcpSettings.body.status.default.Server == getDhcpSettings.body.status.default.DNSServers)
                            dnsPrimaryServerInput.value = this.value;

                    - Dropdown:
                        id: subnetMastInput
                        label: r@kpn.local_network.subnet_mask_prefix
                        items: ${getSubnetMaskDropdownList()}
                        value: ${getDhcpSettings.body.status.default.SubnetMask}
                    - TextInput:
                        id: poolStart
                        inputType: ipAddress
                        label: r@kpn.local_network.pool_start
                        value: ${getDhcpSettings.body.status.default.MinAddress}
                        enabled: ${dhcpServerSwitch.value}
                    - TextInput:
                        id: poolEnd
                        inputType: ipAddress
                        label: r@kpn.local_network.pool_end
                        value: ${getDhcpSettings.body.status.default.MaxAddress}
                        enabled: ${dhcpServerSwitch.value}
                    - TextInput:
                        id: leaseTimeInput
                        label: r@kpn.local_network.lease_time_minutes
                        value: ${getDhcpSettings.body.status.default.LeaseTime+""}
                        enabled: ${dhcpServerSwitch.value}
                    - TextInput:
                        id: dnsPrimaryServerInput
                        label: r@kpn.local_network.dns_server_primary
                        enabled: false
                    - TextInput:
                        id: dnsSecondaryServerInput
                        label: r@kpn.local_network.dns_server_secondary
                        enabled: false
                    - Checkbox:
                        id: dhcpAuthoritativeSwitch
                        label: r@kpn.local_network.dhcp_authoritative
                        value: ${getDHCPIPv4Authorative.body.status.Authoritative}
                    - Spacer:
                        styles: { size: 10 }

                    # buttons
                    - Row:
                        styles: { mainAxis: end, crossAxis: center, gap: 10 }
                        children:
                          - Button:
                              id: restore
                              label: r@kpn.restore
                              styles:
                                outline: true
                                labelStyle:
                                  color: 0xFF0077CC
                              onTap:
                                invokeAPI:
                                  name: getDhcpSettings
                          - Button:
                              label: r@kpn.apply
                              validateForm: true
                              submitForm: true

              - Spacer:
                  styles: { size: 32 }
        - MainNetwerkDHCPDevices


MainNetwerkDHCPUpdateModal:
  Column:
    styles:
      width: 720
    children:

      # pre submit content
      - Column:
          id: preSubmitContent
          styles:
            gap: 12
          children:
            - Row:
                styles: { mainAxis: spaceBetween }
                children:
                  - GreenTitle:
                      inputs:
                        title: r@kpn.dhcp_confirmations.main_dhcp
                  - Icon:
                      name: 0xe993
                      library: kpnUI
                      styles: { color: grey }
                      onTap: closeAllDialogs
            - Text:
                text: r@kpn.dhcp_confirmations.main_dhcp_description
            - Spacer:
                styles: { size: 1 }
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.host_name
                  - Text:
                      text: ${hostNameInput.value}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.domain_name
                  - Text:
                      text: ${domainInput.value}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.ip_address
                      selectable: true
                  - Text:
                      text: ${ipAddressInput.value}
                      selectable: true
                      styles:
                        textStyle:
                          fontWeight: bold
                          color: 0xFFEE7700
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.subnet_mask_prefix
                  - Text:
                      text: ${getSubnetMaskBit(subnetMastInput.value)} - (${subnetMastInput.value})
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.pool_start
                  - Text:
                      text: ${poolStart.value}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.pool_end
                  - Text:
                      text: ${poolEnd.value}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.lease_time_minutes
                  - Text:
                      text: ${leaseTimeInput.value}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.dns_server_primary
                  - Text:
                      text: ${dnsPrimaryServerInput.value}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.dns_server_secondary
                  - Text:
                      text: ${dnsSecondaryServerInput.value}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.dhcp_authoritative
                  - Text:
                      text: "${ dhcpAuthoritativeSwitch.value ? 'r@kpn.on' : 'r@kpn.off' }"

            - Spacer:
                styles: { size: 1 }

            # warning
            - Column:
                styles: { backgroundColor: 0xFFFAECDC, borderRadius: 12 }
                children:
                  - Divider:
                      styles: { color: 0xFFEE7700, thickness: 4 }
                  - Row:
                      styles: { padding: 16, gap: 12 }
                      children:
                        - Icon:
                            name: 0xe9b9
                            library: kpnUI
                            styles: { color: 0xFFEE7700 }
                        - Text:
                            styles: { expanded: true }
                            text: r@kpn.dhcp_confirmations.main_dhcp_warning
            - Divider:
                styles: { margin: 8 0 }

            - Row:
                styles: { mainAxis: end, gap: 16, crossAxis: center }
                children:
                  - Button:
                      label: r@kpn.cancel
                      styles:
                        outline: true
                        labelStyle:
                          color: 0xFF0077CC
                      onTap: closeAllDialogs
                  - Button:
                      label: r@kpn.save
                      onTap:
                        executeCode:
                          body: |
                            preSubmitContent.visible = false;
                            loading.visible = true;
                          onComplete:
                            executeActionGroup:
                              actions:
                                - executeConditionalAction:
                                    conditions:
                                      - if: ${domainInput.value != getDhcpSettings.body.status.default.DomainName}
                                        action:
                                          invokeAPI:
                                            name: setDhcpDomainName
                                            onError: |
                                              loading.visible = false;
                                              postSubmitErrorContent.visible = true;

                                - executeConditionalAction:
                                    conditions:
                                      - if: ${hostNameInput.value != getDhcpHostName.body.status.default.Name}
                                        action:
                                          invokeAPI:
                                            name: setDhcpHostName
                                            onError: |
                                              loading.visible = false;
                                              postSubmitErrorContent.visible = true;
                                
                                - invokeAPI:
                                    name: setDhcpIPv4Settings
                                    inputs:
                                      dnsServers: "${dnsSecondaryServerInput.value != '' ? dnsPrimaryServerInput.value + ',' + dnsSecondaryServerInput.value : dnsPrimaryServerInput.value}"
                                    onResponse:
                                      executeCode:
                                        body: |
                                          loading.visible = false;
                                          // check for errors
                                          if (setDhcpIPv4Settings.body.errors == null ) {
                                            // show confirmation
                                            ensemble.invokeAPI("getDhcpSettings");
                                            ensemble.invokeAPI("getDhcpHostName");
                                            postSubmitContent.visible = true;
                                          } else {
                                            postSubmitErrorContent.visible = true;
                                          }
                                    onError: |
                                      loading.visible = false;
                                      postSubmitErrorContent.visible = true;

      # loading
      - Column:
          id: loading
          visible: false
          styles:
            mainAxis: center
            crossAxis: center
            height: 500
          children:
            - Row:
                styles: { mainAxis: center }
                children:
                  - Progress:
                      styles: { margin: 20, padding: 20 }

      # post submit
      - Column:
          id: postSubmitContent
          visible: false
          styles:
            gap: 12
          children:
            - Row:
                styles: { mainAxis: spaceBetween }
                children:
                  - GreenTitle:
                      inputs:
                        title: r@kpn.dhcp_confirmations.main_dhcp_new
                  - Icon:
                      name: 0xe993
                      library: kpnUI
                      styles: { color: grey }
                      onTap: closeAllDialogs
            - Spacer:
                styles: { size: 1 }
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.host_name
                  - Text:
                      text: ${getDhcpHostName.body.status.default.Name}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.domain_name
                  - Text:
                      text: ${getDhcpSettings.body.status.default.DomainName}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.ip_address
                  - Text:
                      text: ${getDhcpSettings.body.status.default.Server}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.subnet_mask_prefix
                  - Text:
                      text: ${getDhcpSettings.body.status.default.SubnetMask}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.pool_start
                  - Text:
                      text: ${getDhcpSettings.body.status.default.MinAddress}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.pool_end
                  - Text:
                      text: ${getDhcpSettings.body.status.default.MaxAddress}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.lease_time_minutes
                  - Text:
                      text: ${getDhcpSettings.body.status.default.LeaseTime}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.dns_server_primary
                  - Text:
                      text: ${getDhcpSettings.body.status.default.DNSServers.split(",")[0]}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.dns_server_secondary
                  - Text:
                      text: ${getDhcpSettings.body.status.default.DNSServers.split(",")[1]}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.dhcp_authoritative
                  - Text:
                      text: "${ getDhcpSettings.body.status.default.Authoritative ? 'r@kpn.on' : 'r@kpn.off' }"
            - Divider
            - Row:
                styles: { mainAxis: center }
                children:
                  - Button:
                      label: r@kpn.close
                      styles:
                        outline: true
                        labelStyle:
                          color: 0xFF0077CC
                      onTap: closeAllDialogs

      # error post submit
      - Column:
          id: postSubmitErrorContent
          visible: false
          styles:
            gap: 16
            fontSize: 16
            crossAxis: center
          children:
            - Icon:
                name: 0xE934
                library: kpnUI
                styles:
                  color: 0xFFE52E2E
                  size: 50
            - Text:
                text: r@kpn.error
                styles:
                  textStyle:
                    color: 0xFFE52E2E
                    fontSize: 24
            - Text:
                text: ${setDhcpIPv4Settings.body.errors[0].description}
                styles:
                  textStyle:
                    fontSize: 18
            - Divider
            - Button:
                label: r@kpn.close
                styles:
                  outline: true
                  labelStyle:
                    color: 0xFF0077CC
                onTap: closeAllDialogs


MainNetwerkDHCPDevices:
  onLoad:
    invokeAPI:
      name: getDHCPLeases
  body:
    Column:
      styles:
        padding: 24 0
        gap: 16
      children:
        - Row: 
            styles:
              gap: 16
            children:
              - GreenSubtitle:
                  inputs:
                    title: r@kpn.local_network.thuisnetwerk_dhcp_leases
              - GreenSubtitle:
                  inputs:
                    title: "${'r@kpn.local_network.total_txt: ' + getDHCPLeases.body.status.data.length}"
        - DataGrid:
            visible: ${getAllDevices.body != null}
            styles:
              headingText: { font: heading, fontSize: 16, color: grey }
            borderColor: white
            horizontalMargin: 0
            headingRowHeight: 32
            columnSpacing: 60
            DataColumns:
              - label: r@kpn.host_name
                type: text
                sortable: true
                sortKey: DeviceNameSortable
              - label: r@kpn.mac_address
                type: text
                sortable: true
                sortKey: MACAddress
              - label: r@kpn.ip4_address
                type: text
                sortable: true
                sortKey: SortableIp
              - label: r@kpn.local_network.remaining_time
                type: text
                sortable: true
                sortKey: LeaseTimeRemaining
              - label: r@kpn.local_network.dhcp_type
                type: text
                sortable: true
                sortKey: Reserved

            children:
              # loading
              - DataRow:
                  visible: "${getDHCPLeases.body == null ? true : false }"
                  children:
                    - Progress:
                        styles: { size: 32 }
                    - Text:
                        text: ""
                    - Text:
                        text: ""
                    - Text:
                        text: ""
                    - Text:
                        text: ""
              # no data placeholder
              - DataRow:
                  visible: "${getDHCPLeases.body.status.data != null && getDHCPLeases.body.status.data.length == 0 ? true : false }"
                  children:
                    - Text:
                        text: "-"
                    - Text:
                        text: "-"
                    - Text:
                        text: "-"
                    - Text:
                        text: "-"
                    - Text:
                        text: "-"

            item-template:
              data: ${getDHCPLeases.body.status.data}
              name: device
              template:
                DataRow:
                  children:
                    - Text:
                        text: ${device.DeviceName}
                        selectable: true
                    - Text:
                        text: ${device.MACAddress.toUpperCase()}
                        selectable: true
                    - Text:
                        text: ${device.IPAddress}
                        selectable: true
                    - Text:
                        text: ${device.LeaseTimeRemaining.prettyDuration()}
                        selectable: true
                    - Text:
                        text: "${device.Reserved ? 'r@kpn.local_network.ip_type_reserved' : 'r@kpn.local_network.ip_type_dynamic'}"
                        selectable: true


GuestNetworkDHCP:
  onLoad:
    invokeAPI:
      name: getGuestDhcpSettings
      onResponse: |
        //@code
        var dnsServers = getGuestDhcpSettings.body.status.guest.DNSServers.split(",");
        dnsPrimaryServerInputGuest.value = dnsServers[0];
        if (dnsServers.length > 1 ) {
          dnsSecondaryServerInputGuest.value = dnsServers[1];
        }

  body:
    Column:
      children:
        - Column:
            styles:
              padding: 16 0
            children:
              - Form:
                  onSubmit:
                    showDialog:
                      widget: GuestNetwerkDHCPUpdateModal
                  styles:
                    labelPosition: '${device.width > 768 ? "start" : "top"}'
                    gap: 16
                  children:
                    - Switch:
                        id: dhcpServerSwitchGuest
                        label: r@kpn.local_network.dhcp
                        value: ${getGuestDhcpSettings.body.status.guest.Enable}
                    - TextInput:
                        id: ipAddressInputGuest
                        inputType: ipAddress
                        label: r@kpn.ip_address
                        value: ${getGuestDhcpSettings.body.status.guest.Server}
                        onKeyPress: |
                          // update pool start and end
                          var ipArray = this.value.split(".");
                          var poolStartArray = dhcpMinAddressGuest.value.split(".");
                          var poolEndArray = dhcpMaxAddressGuest.value.split(".");
                          
                          // only set if both IPs have 4 parts
                          if (ipArray.length == 4 && poolStartArray.length == 4)
                            dhcpMinAddressGuest.value = ipArray[0] + "." + ipArray[1] + "." + ipArray[2] + "." + poolStartArray[3];

                          if (ipArray.length == 4 && poolEndArray.length == 4)
                            dhcpMaxAddressGuest.value = ipArray[0] + "." + ipArray[1] + "." + ipArray[2] + "." + poolEndArray[3];


                          // update DNS server if the value of server and DNS server were the same
                          if (getGuestDhcpSettings.body.status.guest.Server == getGuestDhcpSettings.body.status.guest.DNSServers)
                            dnsPrimaryServerInputGuest.value = this.value;

                    - Dropdown:
                        id: subnetMastInputGuest
                        label: r@kpn.local_network.subnet_mask_prefix
                        items: ${getSubnetMaskDropdownList()}
                        value: ${getGuestDhcpSettings.body.status.guest.SubnetMask}
                        required: true
                    - TextInput:
                        id: dhcpMinAddressGuest
                        inputType: ipAddress
                        label: r@kpn.local_network.pool_start
                        value: ${getGuestDhcpSettings.body.status.guest.MinAddress}
                    - TextInput:
                        id: dhcpMaxAddressGuest
                        inputType: ipAddress
                        label: r@kpn.local_network.pool_end
                        value: ${getGuestDhcpSettings.body.status.guest.MaxAddress}
                    - TextInput:
                        id: leaseTimeInputGuest
                        label: r@kpn.local_network.lease_time_minutes
                        value: ${getGuestDhcpSettings.body.status.guest.LeaseTime+""}
                        enabled: ${dhcpServerSwitchGuest.value}
                    - TextInput:
                        id: dnsPrimaryServerInputGuest
                        label: r@kpn.local_network.dns_server_primary
                        enabled: false
                    - TextInput:
                        id: dnsSecondaryServerInputGuest
                        label: r@kpn.local_network.dns_server_secondary
                        enabled: false
                    - Spacer:
                        styles: { size: 10 }

                    # buttons
                    - Row:
                        styles: { mainAxis: end, crossAxis: center, gap: 10 }
                        children:
                          - Button:
                              id: restore
                              label: r@kpn.restore
                              styles:
                                outline: true
                                labelStyle:
                                  color: 0xFF0077CC
                              onTap:
                                invokeAPI:
                                  name: getGuestDhcpSettings
                          - Button:
                              label: r@kpn.apply
                              validateForm: true
                              submitForm: true
              - Spacer:
                  styles: { size: 40 }
        - GuestNetworkDHCPDevices


GuestNetwerkDHCPUpdateModal:
  Column:
    styles:
      width: 720
    children:

      # pre submit content
      - Column:
          id: preSubmitContent
          styles:
            gap: 16
            fontSize: 16
          children:
            - Row:
                styles: { mainAxis: spaceBetween }
                children:
                  - GreenTitle:
                      inputs:
                        title: r@kpn.dhcp_confirmations.guest_dhcp
                  - Icon:
                      name: 0xe993
                      library: kpnUI
                      styles: { color: grey }
                      onTap: closeAllDialogs
            - Text:
                text: r@kpn.dhcp_confirmations.guest_dhcp_description
            - Spacer:
                styles: { size: 1 }
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.ip_address
                  - Text:
                      text: ${ipAddressInputGuest.value}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.subnet_mask_prefix
                  - Text:
                      text: ${getSubnetMaskBit(subnetMastInputGuest.value)} - (${subnetMastInputGuest.value})
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.pool_start
                  - Text:
                      text: ${dhcpMinAddressGuest.value}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.pool_end
                  - Text:
                      text: ${dhcpMaxAddressGuest.value}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.lease_time_minutes
                  - Text:
                      text: ${leaseTimeInputGuest.value}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.dns_server_primary
                  - Text:
                      text: ${dnsPrimaryServerInputGuest.value}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.dns_server_secondary
                  - Text:
                      text: ${dnsSecondaryServerInputGuest.value}
            - Spacer:
                styles: { size: 1 }

            # warning
            - Column:
                styles: { backgroundColor: 0xFFFAECDC, borderRadius: 12 }
                children:
                  - Divider:
                      styles: { color: 0xFFEE7700, thickness: 4 }
                  - Row:
                      styles: { padding: 16, gap: 12 }
                      children:
                        - Icon:
                            name: 0xe9b9
                            library: kpnUI
                            styles: { color: 0xFFEE7700 }
                        - Text:
                            styles: { expanded: true }
                            text: r@kpn.dhcp_confirmations.guest_dhcp_warning
            - Divider:
                styles: { margin: 8 0 }

            - Row:
                styles: { mainAxis: end, gap: 16, crossAxis: center }
                children:
                  - Button:
                      label: r@kpn.cancel
                      styles:
                        outline: true
                        labelStyle:
                          color: 0xFF0077CC
                      onTap: closeAllDialogs
                  - Button:
                      label: r@kpn.save
                      onTap:
                        executeCode:
                          body: |
                            preSubmitContent.visible = false;
                            loading.visible = true;
                          onComplete:
                            invokeAPI:
                              name: setGuestDhcpSettings
                              inputs:
                                dnsServers: "${dnsSecondaryServerInputGuest.value != '' ? dnsPrimaryServerInputGuest.value + ',' + dnsSecondaryServerInputGuest.value : dnsPrimaryServerInputGuest.value}"
                              onResponse:
                                executeCode:
                                  body: |
                                    loading.visible = false;
                                    // check for errors
                                    if (setGuestDhcpSettings.body.errors == null ) {
                                      // show confirmation
                                      ensemble.invokeAPI("getGuestDhcpSettings");
                                      postSubmitContent.visible = true;
                                    } else {
                                      postSubmitErrorContent.visible = true;
                                    }
                              onError: |
                                loading.visible = false;
                                postSubmitErrorContent.visible = true;

      # loading
      - Column:
          id: loading
          visible: false
          styles:
            mainAxis: center
            crossAxis: center
            height: 500
          children:
            - Row:
                styles: { mainAxis: center }
                children:
                  - Progress:
                      styles: { margin: 20, padding: 20 }

      # post submit
      - Column:
          id: postSubmitContent
          visible: false
          styles:
            gap: 16
            fontSize: 16
          children:
            - Row:
                styles: { mainAxis: spaceBetween }
                children:
                  - GreenTitle:
                      inputs:
                        title: r@kpn.dhcp_confirmations.guest_dhcp_new
                  - Icon:
                      name: 0xe993
                      library: kpnUI
                      styles: { color: grey }
                      onTap: closeAllDialogs
            - Spacer:
                styles: { size: 1 }
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.ip_address
                  - Text:
                      text: ${getGuestDhcpSettings.body.status.guest.Server}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.subnet_mask_prefix
                  - Text:
                      text: ${getGuestDhcpSettings.body.status.guest.SubnetMask}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.pool_start
                  - Text:
                      text: ${getGuestDhcpSettings.body.status.guest.MinAddress}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.pool_end
                  - Text:
                      text: ${getGuestDhcpSettings.body.status.guest.MaxAddress}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.lease_time_minutes
                  - Text:
                      text: ${getGuestDhcpSettings.body.status.guest.LeaseTime}
            - Divider
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.dns_server_primary
                  - Text:
                      text: ${getGuestDhcpSettings.body.status.guest.DNSServers.split(',')[0]}
            - Divider
            - FittedRow:
                visible: ${getGuestDhcpSettings.body.status.guest.DNSServers.split(',').length == 2}
                children:
                  - Text:
                      text: r@kpn.local_network.dns_server_secondary
                  - Text:
                      text: ${getGuestDhcpSettings.body.status.guest.DNSServers.split(',')[1]}
            - Divider:
                visible: ${getGuestDhcpSettings.body.status.guest.DNSServers.split(',').length == 2}
            - Row:
                styles: { mainAxis: center }
                children:
                  - Button:
                      label: r@kpn.close
                      onTap: closeAllDialogs

      # error post submit
      - Column:
          id: postSubmitErrorContent
          visible: false
          styles:
            gap: 16
            fontSize: 16
            crossAxis: center
          children:
            - Icon:
                name: 0xE934
                library: kpnUI
                styles:
                  color: 0xFFE52E2E
                  size: 50
            - Text:
                text: r@kpn.error
                styles:
                  textStyle:
                    color: 0xFFE52E2E
                    fontSize: 24
            - Text:
                text: ${setGuestDhcpSettings.body.errors[0].description}
                styles:
                  textStyle:
                    fontSize: 18
            - Divider
            - Button:
                label: r@kpn.close
                styles:
                  outline: true
                  labelStyle:
                    color: 0xFF0077CC
                onTap: closeAllDialogs


GuestNetworkDHCPDevices:
  onLoad:
    invokeAPI:
      name: getGuestDHCPLeases
      onResponse: |
        //@code
        // convert to array for data table
        // also include the name from devices API
        
        var data = [];
        for (key in getGuestDHCPLeases.body.status.default) {
          var leaseItem = getGuestDHCPLeases.body.status.default[key];
          // get matching device's name
          getAllDevices.body.status.map(function(device) {
            if (leaseItem.MACAddress == device.Key.toLowerCase())
              leaseItem.DeviceName = device.Name;
          });
          // convert IP to integer for sorting
          leaseItem.SortableIp = ipToInteger(leaseItem.IPAddress);
          data.push(leaseItem);
        }
        getGuestDHCPLeases.body.status.data = data;
  body:
    Column:
      styles:
        padding: 24 0
        gap: 16
      children:
        - Row: 
            styles:
              gap: 16
            children:
              - GreenSubtitle:
                  inputs:
                    title: r@kpn.local_network.gastnetwerk_dhcp_leases
              - GreenSubtitle:
                  inputs:
                    title: "${'r@kpn.local_network.total_txt: ' + getGuestDHCPLeases.body.status.data.length}"

        - DataGrid:
            styles:
              headingText: { font: heading, fontSize: 16, color: grey }
            borderColor: white
            horizontalMargin: 0
            headingRowHeight: 32
            columnSpacing: 60
            DataColumns:
              - label: r@kpn.host_name
                type: text
                sortable: true
                sortKey: FriendlyName
              - label: r@kpn.mac_address
                type: text
                sortable: true
                sortKey: MACAddress
              - label: r@kpn.ip4_address
                type: text
                sortable: true
                sortKey: SortableIp
              - label: r@kpn.local_network.remaining_time
                type: text
                sortable: true
                sortKey: LeaseTimeRemaining
              - label: r@kpn.local_network.dhcp_type
                type: text
                sortable: true
                sortKey: Reserved
            item-template:
              data: ${getGuestDHCPLeases.body.status.data}
              name: device
              template:
                DataRow:
                  children:
                    - Text:
                        text: ${device.FriendlyName}
                        selectable: true
                    - Text:
                        text: ${device.MACAddress.toUpperCase()}
                        selectable: true
                    - Text:
                        text: ${device.IPAddress}
                        selectable: true
                    - Text:
                        text: ${device.LeaseTimeRemaining.prettyDuration()}
                        selectable: true
                    - Text:
                        text: "${device.Reserved ? 'r@kpn.local_network.ip_type_reserved' : 'r@kpn.local_network.ip_type_dynamic'}"
                        selectable: true
            children:
              # loading
              - DataRow:
                  visible: "${getGuestDHCPLeases.body == null ? true : false }"
                  children:
                    - Progress:
                        styles: { size: 32 }
                    - Text:
                        text: ""
                    - Text:
                        text: ""
                    - Text:
                        text: ""
                    - Text:
                        text: ""
              # no data placeholder
              - DataRow:
                  visible: "${getGuestDHCPLeases.body.status.data.length == 0 ? true : false }"
                  children:
                    - Text:
                        text: "-"
                    - Text:
                        text: "-"
                    - Text:
                        text: "-"
                    - Text:
                        text: "-"
                    - Text:
                        text: "-"


DYNDNS:
  onLoad:
    invokeAPI:
      name: getDynDnsHosts

  Column:
    styles:
      padding: 16
    children:
      - Column:
          styles:
            backgroundColor: 0xFFFFFFFF
            shadowColor: 0xFFDEDEDE
            shadowRadius: 3
            shadowOffset: [0, 0]
            borderRadius: 10
            padding: 16
            gap: 12
          children:
            - ContentTitle:
                inputs:
                  title: r@kpn.local_network.dyndns
            - Text:
                text: r@kpn.local_network.dyndns_description

            - Form:
                styles:
                  labelPosition: '${device.width > 768 ? "start" : "top"}'
                  gap: 16
                children:
                  - Dropdown:
                      id: DynDnsService
                      label: r@kpn.local_network.dyndns_service
                      required: true
                      items: [ "dyndns", "No-IP", "ChangeIP", "GnuDIP", "AfraidFreeDNS", "Infomaniak", "OVH-dynhost", "SwissCenter"]
                  - TextInput:
                      id: DynDnsHostname
                      label: r@kpn.local_network.dyndns_host
                      required: true
                  - TextInput:
                      id: DynDnsUsername
                      label: r@kpn.local_network.dyndns_email
                      required: true
                  - PasswordInput:
                      id: DynDnsPassword
                      label: r@kpn.password
                      required: true
                  - Row:
                      styles: { mainAxis: end }
                      children:
                        - Button:
                            validateForm: true
                            label: r@kpn.add
                            onTap:
                              executeConditionalAction:
                                conditions:
                                  - if: ${getDynDnsHosts.body.status.length > 0}
                                    action:
                                      invokeAPI:
                                        name: setDynDnsHost
                                        inputs:
                                          service: ${DynDnsService.value}
                                          username: ${DynDnsUsername.value}
                                          hostname: ${DynDnsHostname.value}
                                          password: ${DynDnsPassword.value}
                                        onResponse:
                                          invokeAPI:
                                            name: getDynDnsHosts
                                  - else:
                                    action:
                                      invokeAPI:
                                        name: setGlobalEnable
                                        inputs:
                                          enable: true
                                        onResponse:
                                          invokeAPI:
                                            name: setDynDnsHost
                                            inputs:
                                              service: ${DynDnsService.value}
                                              username: ${DynDnsUsername.value}
                                              hostname: ${DynDnsHostname.value}
                                              password: ${DynDnsPassword.value}
                                            onResponse:
                                              invokeAPI:
                                                name: getDynDnsHosts
                                          


            - DataGrid:
                styles:
                  headingText: { font: heading, fontSize: 16, color: grey }
                borderColor: white
                horizontalMargin: 0
                headingRowHeight: 32
                columnSpacing: 60
                DataColumns:
                  - label: Service
                    type: text
                    sortable: true
                    sortKey: service
                  - label: Host, of domein
                    type: text
                    sortable: true
                    sortKey: hostname
                  - label: r@kpn.user_name
                    type: text
                    sortable: true
                    sortKey: username
                  - label: r@kpn.status
                    type: text
                    sortable: true
                    sortKey: status
                  - label:
                    type: text

                item-template:
                  data: ${getDynDnsHosts.body.status}
                  name: DynDnsHost
                  template:
                    DataRow:
                      children:
                        - Text:
                            text: ${DynDnsHost.service}
                        - Text:
                            text: ${DynDnsHost.hostname}
                        - Text:
                            text: ${DynDnsHost.username}
                        - Text:
                            text: ${DynDnsHost.status}
                        - Icon:
                            name: 0xe92a
                            library: kpnUI
                            styles: { color: 0xFF0077CC }
                            onTap:
                              executeConditionalAction:
                                conditions:
                                  - if: ${getDynDnsHosts.body.status.length > 1}
                                    action:
                                      invokeAPI:
                                        name: deleteDynDnsHost
                                        inputs:
                                          hostname: ${DynDnsHost.hostname}
                                        onResponse:
                                          invokeAPI:
                                            name: getDynDnsHosts
                                  - else:
                                    action:
                                      invokeAPI:
                                        name: setGlobalEnable
                                        inputs:
                                          enable: false
                                        onResponse:
                                          invokeAPI:
                                            name: deleteDynDnsHost
                                            inputs:
                                              hostname: ${DynDnsHost.hostname}
                                            onResponse:
                                              invokeAPI:
                                                name: getDynDnsHosts

                children:
                  # loading state
                  - DataRow:
                      visible: "${ getDynDnsHosts.body == null ? true : false }"
                      children:
                        - Progress:
                            styles: { size: 32 }
                        - Text:
                            text: "-"
                        - Text:
                            text: "-"
                        - Text:
                            text: "-"
                        - Text:
                            text: "-"

                  # empty state
                  - DataRow:
                      visible: "${ getDynDnsHosts.body.status.length == 0 ? true : false }"
                      children:
                        - Text:
                            text: "-"
                        - Text:
                            text: "-"
                        - Text:
                            text: "-"
                        - Text:
                            text: "-"
                        - Text:
                            text: "-"


ReservedIps:
  onLoad:
    invokeAPI:
      name: getStaticLeases
      onResponse:
        invokeAPI:
          name: getAllDevices
          onResponse:
            executeCode:
              body: |
                //@code
                var leaseTableData = [];
                var devicesWithLease = [];
                var devicesWithLeaseIp = [];
        
                getStaticLeases.body.status.map(function(item) {
                  devicesWithLease.push(item.MACAddress);
                  devicesWithLeaseIp.push(item.IPAddress);
                });
                
                getAllDevices.body.status.map(function(item) {
                  // if reserved, add to table
                  var index = devicesWithLease.indexOf(item.Key.toLowerCase());
                  if ( index > -1 ) {
                    var SortableIp = ipToInteger(devicesWithLeaseIp[index]);
                    leaseTableData.push({
                      "Name": item.Name,
                      "MACAddress": item.Key,
                      "IPAddress": devicesWithLeaseIp[index],
                      "SortableIp": SortableIp
                    });
                  }
                });
              
                getAllDevices.body.leaseTableData = leaseTableData;
              onComplete:
                invokeAPI:
                  name: getActiveDevices
                  onResponse: |
                    //@code
                    var deviceDropDownList = [];
                    getActiveDevices.body.allDevices.map(function(item) {                      
                      deviceDropDownList.push({
                        "label": item.Name,
                        "value": item.Key
                      });
                    });

                    deviceDropDownList.push({
                      "label": "Nieuw apparaat niet in huidige lijst",
                      "value": ""
                    });

                    deviceList.items = deviceDropDownList;
              

  Column:
    styles:
      padding: 16
    children:
      - Column:
          styles:
            backgroundColor: 0xFFFFFFFF
            shadowColor: 0xFFDEDEDE
            shadowRadius: 3
            shadowOffset: [0, 0]
            borderRadius: 10
            padding: 16
            gap: 12
          children:
            - ContentTitle:
                inputs:
                  title: r@kpn.local_network.reserved_ip
            - Text:
                text: r@kpn.local_network.reserved_ip_description

            - Form:
                styles:
                  labelPosition: '${device.width > 768 ? "start" : "top"}'
                  gap: 16
                children:
                  - Dropdown:
                      id: deviceList
                      label: r@kpn.device
                      required: true
                      onChange: |
                        macAddress.value = this.value;
                        getAllDevices.body.status.map(function(item) {
                          if ( item.Key == this.value )
                            reservedIpAddress.value = item.IPAddress;
                        });
                  - TextInput:
                      id: reservedIpAddress
                      label: r@kpn.ip_address
                      required: true
                  - TextInput:
                      required: true
                      id: macAddress
                      label: r@kpn.mac_address
                  - Row:
                      styles: { mainAxis: end, gap: 24, crossAxis: center }
                      children:
                        - Text:
                            styles:
                              textStyle:
                                color: 0xffE52E2E
                                fontWeight: bold
                            id: reservedIpError
                        - Button:
                            validateForm: true
                            label: r@kpn.add
                            onTap:
                              executeCode:
                                body: |
                                  reservedIpError.text = "";
                                onComplete:
                                  invokeAPI:
                                    name: addStaticLeases
                                    inputs:
                                      macAddress: ${macAddress.value}
                                      ipAddress: ${reservedIpAddress.value}
                                    onResponse:
                                      executeCode:
                                        body: |
                                          if (response.body.errors != null) {
                                            reservedIpError.text = response.body.errors[0].description;
                                          } else {
                                            reservedIpAddress.value = '';
                                            macAddress.value = '';
                                          }
                                        onComplete:
                                          invokeAPI:
                                            name: getStaticLeases
                                            onResponse:
                                              invokeAPI:
                                                name: getAllDevices
                                                onResponse: |
                                                  //@code
                                                  var leaseTableData = [];
                                                  var devicesWithLease = [];
                                                  var devicesWithLeaseIp = [];
                                                  
                                                  getStaticLeases.body.status.map(function(item) {
                                                    devicesWithLease.push(item.MACAddress);
                                                    devicesWithLeaseIp.push(item.IPAddress);
                                                  });
                                                  
                                                  getAllDevices.body.status.map(function(item) {
                                                    // if reserved, add to table
                                                    var index = devicesWithLease.indexOf(item.Key.toLowerCase());
                                                    if ( index > -1 ) {
                                                      leaseTableData.push({
                                                        "Name": item.Name,
                                                        "MACAddress": item.Key,
                                                        "IPAddress": devicesWithLeaseIp[index]
                                                      });
                                                    }
                                                  });
                                                  
                                                  getAllDevices.body.leaseTableData = leaseTableData;


            - DataGrid:
                styles:
                  headingText: { font: heading, fontSize: 16, color: grey }
                borderColor: white
                horizontalMargin: 0
                headingRowHeight: 32
                columnSpacing: 60
                DataColumns:
                  - label: r@kpn.host_name
                    type: text
                    sortable: true
                    sortKey: Name
                  - label: r@kpn.mac_address
                    type: text
                    sortable: true
                    sortKey: MACAddress
                  - label: r@kpn.ip_address
                    type: text
                    sortable: true
                    sortKey: SortableIp
                  - label: " "
                    type: text

                item-template:
                  data: ${getAllDevices.body.leaseTableData}
                  name: item
                  template:
                    DataRow:
                      children:
                        - Text:
                            id: device_name
                            text: ${item.Name}
                            selectable: true
                        - Text:
                            id: mac_address
                            text: ${item.MACAddress}
                            selectable: true
                        - Text:
                            id: ip_address
                            text: ${item.IPAddress}
                            selectable: true
                        - Row:
                            styles:
                              gap: 16
                            children:
                              - Icon:
                                  testId: editReservedIPAddress
                                  name: 0xe931
                                  library: kpnUI
                                  styles: { color: 0xFF0077CC }
                                  onTap:
                                    showDialog:
                                      widget: EditReservedIPAddress
                              - Icon:
                                  testId: deleteStaticLeasesAction
                                  name: 0xe92a
                                  library: kpnUI
                                  styles: { color: 0xFF0077CC }
                                  onTap:
                                    invokeAPI:
                                      name: deleteStaticLeases
                                      inputs:
                                        macAddress: ${item.MACAddress}
                                      onResponse:
                                        invokeAPI:
                                          name: getStaticLeases
                                          onResponse:
                                            invokeAPI:
                                              name: getAllDevices
                                              onResponse: |
                                                //@code
                                                var leaseTableData = [];
                                                var devicesWithLease = [];
                                                var devicesWithLeaseIp = [];
                                                
                                                getStaticLeases.body.status.map(function(item) {
                                                  devicesWithLease.push(item.MACAddress);
                                                  devicesWithLeaseIp.push(item.IPAddress);
                                                });
                                                
                                                getAllDevices.body.status.map(function(item) {
                                                  // if reserved, add to table
                                                  var index = devicesWithLease.indexOf(item.Key.toLowerCase());
                                                  if ( index > -1 ) {
                                                    leaseTableData.push({
                                                      "Name": item.Name,
                                                      "MACAddress": item.Key,
                                                      "IPAddress": devicesWithLeaseIp[index]
                                                    });
                                                  }
                                                });
                                                
                                                getAllDevices.body.leaseTableData = leaseTableData;
              

                children:
                  - DataRow:
                      visible: "${ getAllDevices.body.leaseTableData == null ? true : false }"
                      children:
                        - Progress:
                            styles: { size: 32 }
                        - Text:
                            text: " "
                        - Text:
                            text: " "
                        - Text:
                            text: " "
                  - DataRow:
                      visible: "${ getAllDevices.body.leaseTableData.length == 0 ? true : false }"
                      children:
                        - Text:
                            text: "-"
                        - Text:
                            text: "-"
                        - Text:
                            text: "-"
                        - Text:
                            text: " "


EditReservedIPAddress:
  Column:
    styles:
      width: 720
    children:
      # pre submit content
      - Column:
          id: preSubmitContent
          styles:
            gap: 16
            fontSize: 16
          children:
            - Row:
                styles: { mainAxis: spaceBetween }
                children:
                  - GreenTitle:
                      inputs:
                        title: r@kpn.local_network.reserved_ip_edit_title

                  - Icon:
                      name: 0xe993
                      library: kpnUI
                      styles: { color: grey }
                      onTap: closeAllDialogs
            - Text:
                text: r@kpn.local_network.reserved_ip_description
            - Divider
            - Form:
                styles:
                  labelPosition: '${device.width > 768 ? "start" : "top"}'
                  gap: 16
                children:
                  - TextInput:
                      label: r@kpn.device
                      value: ${device_name.text}
                      enabled: false
                  - TextInput:
                      label: r@kpn.mac_address
                      value: ${mac_address.text}
                      enabled: false
                  - TextInput:
                      id: ip_address_input
                      label: r@kpn.ip_address
                      value: ${ip_address.text}
                      required: true
                  - Row:
                      styles: { gap: 20, mainAxis: end, crossAxis: center }
                      children:
                        - Text:
                            id: editReservedIPAddressFormStatus
                        - Button:
                            label: r@kpn.cancel
                            styles:
                              outline: true
                              labelStyle:
                                color: 0xFF0077CC
                            onTap: closeAllDialogs
                        - Button:
                            label: r@kpn.save
                            validateForm: true
                            onTap:
                              executeCode:
                                body: |
                                  //@code
                                  preSubmitContent.visible = false;
                                  loading.visible = true;
                                onComplete:
                                  invokeAPI:
                                    name: setStaticLease
                                    inputs:
                                      macAddress: ${mac_address.text}
                                      ipAddress: ${ip_address_input.value}
                                    onResponse:
                                      invokeAPI:
                                        name: getStaticLeases
                                        onResponse:
                                          invokeAPI:
                                            name: getAllDevices
                                            onResponse:
                                              executeCode:
                                                body: |
                                                  //@code
                                                  var leaseTableData = [];
                                                  var devicesWithLease = [];
                                                  var devicesWithLeaseIp = [];
                                                  
                                                  getStaticLeases.body.status.map(function(item) {
                                                    devicesWithLease.push(item.MACAddress);
                                                    devicesWithLeaseIp.push(item.IPAddress);
                                                  });
                                                  
                                                  getAllDevices.body.status.map(function(item) {
                                                    // if reserved, add to table
                                                    var index = devicesWithLease.indexOf(item.Key.toLowerCase());
                                                    if ( index > -1 ) {
                                                      leaseTableData.push({
                                                        "Name": item.Name,
                                                        "MACAddress": item.Key,
                                                        "IPAddress": devicesWithLeaseIp[index]
                                                      });
                                                    }
                                                  });
                                                  
                                                  getAllDevices.body.leaseTableData = leaseTableData;
                                                  
                                                  loading.visible = false;
                                                onComplete:
                                                  closeAllDialogs

      # loading
      - Column:
          id: loading
          visible: false
          styles:
            mainAxis: center
            crossAxis: center
            height: 500
          children:
            - Row:
                styles: { mainAxis: center }
                children:
                  - Progress:
                      styles: { margin: 20, padding: 20 }


Ipv6:
  onLoad:
    invokeAPI:
      name: getIpv6Status
  Column:
    styles:
      padding: 16
    children:
      - Column:
          styles:
            backgroundColor: 0xFFFFFFFF
            shadowColor: 0xFFDEDEDE
            shadowRadius: 3
            shadowOffset: [0, 0]
            borderRadius: 10
            padding: 16
            gap: 12
          children:
            - ContentTitle:
                inputs:
                  title: r@kpn.local_network.ipv6
            - Text:
                text: r@kpn.local_network.ipv6_description
            - Divider:
                styles: { margin: 16 0 }

            - Column:
                children:
                  - Form:
                      styles:
                        labelPosition: '${device.width > 768 ? "start" : "top"}'
                        gap: 16
                      children:
                        - Dropdown:
                            id: ipv6Type
                            label: r@kpn.local_network.ipv6_prefix_delegation
                            required: true
                            value: ${getIpv6Status.body.status.IPv6PrefixMode}
                            items: [
                              {"label": "r@kpn.enabled", "value": "RA"},
                              {"label": "r@kpn.local_network.enabled_with_dhcp", "value": "RAandDHCPv6"},
                              {"label": "r@kpn.disabled", "value": "DHCPv6"}
                            ]

                        - Spacer:
                            styles: { size: 10 }

                  # buttons
                  - Row:
                      styles: { mainAxis: end, crossAxis: center }
                      children:
                        - Text:
                            id: applyStatus
                        - Button:
                            id: restore
                            label: r@kpn.restore
                            styles:
                              outline: true
                              labelStyle:
                                color: 0xFF0077CC
                            onTap:
                              invokeAPI:
                                name: getIpv6Status
                        - Button:
                            styles: { margin: 0 0 0 20 }
                            label: r@kpn.apply
                            validateForm: true
                            onTap:
                              executeCode:
                                body: |
                                  if ( ipv6Type.value == "RA" || ipv6Type.value == "RAandDHCPv6") {
                                    ensemble.invokeAPI("setIpv6PrefixDelegation", {
                                      "status": 1
                                    });
                                    ensemble.invokeAPI("setLanIpv6PrefixDelegationLength");
                                    ensemble.invokeAPI("setGuestIpv6PrefixDelegationLength");
                                  } else {
                                    ensemble.invokeAPI("setIpv6PrefixDelegation", {
                                      "status": 0
                                    });
                                  }

                                onComplete:
                                  invokeAPI:
                                    name: setIpv6Status
                                    inputs:
                                      type: ${ipv6Type.value}
                                    onResponse:
                                      showToast:
                                        widget: SuccessToast
                                        styles:
                                          padding: 0
                                        options:
                                          type: custom
                                          duration: 15
                                          dismissable: true
                                          alignment: center
                                    onError: |
                                      console.log("error setting IPv6 type");

                  - Spacer:
                      styles: { size: 40 }


ClientDeviceDetails:
  inputs:
    - mac
  onLoad:
    invokeAPI:
      name: getDeviceDetails
      inputs:
        mac: ${mac}
      onResponse:
        executeCode:
          body: |
            deviceIcon.name = getDeviceIcon(getDeviceDetails.body.status.DeviceType);

  body:
    Column:
      styles:
        backgroundColor: white
        padding: 16 0
        height: 800
      children:
        - Row:
            styles: 
              mainAxis: spaceBetween
              padding: 0 16
            children:
              - GreenTitle:
                  inputs:
                    title: ${getDeviceDetails.body.status.Name}
              - CloseDialogIcon
        - FittedRow:
            styles:
              gap: 40
              childrenFits: [auto, 2]
              padding: 8 24
            children:
              - Icon:
                  name: 0xe972
                  id: deviceIcon
                  library: kpnUI
                  styles: { size: 40, color: white, backgroundColor: 0xFF00AAFF, padding: 16, borderRadius: 100 }
              - FlexRow:
                  styles:
                    gap: 16
                  children:
                    - TextInput:
                        id: deviceNameInput
                        label: r@kpn.device_name
                        value: ${getDeviceDetails.body.status.Name}
                    - Dropdown:
                        label: r@kpn.icon
                        id: deviceIconDropdown
                        items: [
                          { value: 'Desktop', label: 'Desktop', 'icon': {'name': 0xe912, 'library': 'kpnUI'}},
                          { value: 'Mobile', label: 'Smartphone', 'icon': {'name': 0xe973, 'library': 'kpnUI'}},
                          { value: 'Tablet', label: 'Tablet', 'icon': {'name': 0xe9aa, 'library': 'kpnUI'}},
                          { value: 'Laptop', label: 'Laptop', 'icon': {'name': 0xe95f, 'library': 'kpnUI'}},
                          { value: 'Computer', label: 'Computer', 'icon': {'name': 0xe95f, 'library': 'kpnUI'}},
                          { value: 'Notebook', label: 'Notebook', 'icon': {'name': 0xe97d, 'library': 'kpnUI'}},
                          { value: 'Game Console', label: 'Game Console', 'icon': {'name': 0xe9a4, 'library': 'kpnUI'}},
                          { value: 'Smoke Detector', label: 'Smoke Detector', 'icon': {'name': 0xe941, 'library': 'kpnUI'}},
                          { value: 'Google OnHub', label: 'Google OnHub', 'icon': {'name': 0xe922, 'library': 'kpnUI'}},
                          { value: 'Apple TV', label: 'Apple TV', 'icon': {'name': 0xe9a9, 'library': 'kpnUI'}},
                          { value: 'Set-top Box', label: 'Set-top Box', 'icon': {'name': 0xe9b3, 'library': 'kpnUI'}},
                          { value: 'Camera', label: 'Camera', 'icon': {'name': 0xe917, 'library': 'kpnUI'}},
                          { value: 'TV', label: 'Smart TV', 'icon': {'name': 0xe9af, 'library': 'kpnUI'}},
                          { value: 'HiFi', label: 'HiFi', 'icon': {'name': 0xe90c, 'library': 'kpnUI'}},
                          { value: 'Phone', label: 'Phone', 'icon': {'name': 0xe980, 'library': 'kpnUI'}},
                          { value: 'USB key', label: 'USB key', 'icon': {'name': 0xe985, 'library': 'kpnUI'}},
                          { value: 'Printer', label: 'Printer', 'icon': {'name': 0xe96a, 'library': 'kpnUI'}},
                          { value: 'Smart bulb', label: 'Smart bulb', 'icon': {'name': 0xe910, 'library': 'kpnUI'}},
                          { value: 'Smart Plug', label: 'Smart Plug', 'icon': {'name': 0xe987, 'library': 'kpnUI'}},
                          { value: 'Door Sensor', label: 'Door Sensor', 'icon': {'name': 0xe98b, 'library': 'kpnUI'}},
                          { value: 'Lock', label: 'Lock', 'icon': {'name': 0xe966, 'library': 'kpnUI'}},
                          { value: 'Flood Sensor', label: 'Flood Sensor', 'icon': {'name': 0xe938, 'library': 'kpnUI'}},
                          { value: 'Smoke Sensor', label: 'Firewall', 'icon': {'name': 0xe941, 'library': 'kpnUI'}},
                          { value: 'Thermostat', label: 'Thermostat', 'icon': {'name': 0xe986, 'library': 'kpnUI'}},
                          { value: 'Switch', label: 'Switch', 'icon': {'name': 0xe976, 'library': 'kpnUI'}},
                          { value: 'Light Switch', label: 'Light Switch', 'icon': {'name': 0xe9db, 'library': 'kpnUI'}},
                          { value: 'WiFiExtender', label: 'Nas', 'icon': {'name': 0xE943, 'library': 'kpnUI'}},
                          { value: 'Motion Sensor', label: 'Motion Sensor', 'icon': {'name': 0xe987, 'library': 'kpnUI'}},
                          { value: 'Window Sensor', label: 'Window Sensor', 'icon': {'name': 0xe9c5, 'library': 'kpnUI'}},
                          { value: 'Wi-Fi Access Point', label: 'Wi-Fi Access Point', 'icon': {'name': 0xe9be, 'library': 'kpnUI'}},
                          { value: 'Dimmer light', label: 'Dimmer light', 'icon': {'name': 0xe9da, 'library': 'kpnUI'}},
                          { value: 'Fan', label: 'Fan', 'icon': {'name': 0xe96e, 'library': 'kpnUI'}},
                          { value: 'Acces Point', label: 'Metering Device', 'icon': {'name': 0xE8E1, 'library': 'kpnUI'}},
                          { value: 'Domestic Robot', label: 'Domestic Robot', 'icon': {'name': 0xe996, 'library': 'kpnUI'}},
                          { value: 'Extender Wi-Fi Plus', label: 'Car', 'icon': {'name': 0xe918, 'library': 'kpnUI'}},
                          { value: 'Generic Repeater', label: 'Ethernet Switch', 'icon': {'name': 0xe978, 'library': 'kpnUI'}},
                          { value: 'InternetGatewayDevice', label: 'Wifi Hub', 'icon': {'name': 0xe9d4, 'library': 'kpnUI'}}
                        ]
                        value: ${getDeviceDetails.body.status.DeviceType}
                        onChange: |
                          //@code
                          deviceIcon.name = getDeviceIcon(this.value);

        # submit buttons
        - Row:
            styles:
              crossAxis: center
              mainAxis: end
              gap: 24
              padding: 8 24
            children:
              - Button:
                  id: restore
                  label: r@kpn.restore
                  styles:
                    outline: true
                    labelStyle:
                      color: 0xFF0077CC
                  onTap:
                    invokeAPI:
                      name: getDeviceDetails
                      inputs:
                        mac: ${ensemble.storage.selectedDeviceKey}
                      onResponse:
                        executeCode:
                          body: |
                            //@code
                            deviceIcon.icon = getDeviceIcon(getDeviceDetails.body.status.DeviceType);
                          onComplete:
                            invokeAPI:
                              name: getDeviceSchedule
                              inputs:
                                mac: ${ensemble.storage.selectedDeviceKey}
                              onResponse: |
                                //@code
                                if (getDeviceSchedule.body.data.scheduleInfo.override == 'Disable')
                                  deviceScheduleDropdown.value = 'Block';
                                else if (getDeviceSchedule.body.data.scheduleInfo.override == 'Enable')
                                  deviceScheduleDropdown.value = 'Allow';
                                else if (getDeviceSchedule.body.data.scheduleInfo.override == '') {
                                  deviceScheduleDropdown.value = 'Schedule';
                                  scheduleWrapper.visible = true;
                                  getDeviceSchedule.body.data.scheduleInfo.schedule.map(function(range) {
                                    deviceScheduler.addSelectedRange(range.begin, range.end);
                                  });
                                  deviceScheduler.refresh();
                                }

              - Button:
                  label: r@kpn.apply
                  onTap:
                    executeActionGroup:
                      actions:
                        - invokeAPI:
                            name: setDeviceName
                            inputs:
                              name: ${deviceNameInput.value}
                              mac: ${getDeviceDetails.body.status.Key}
                        - invokeAPI:
                            name: setDeviceType
                            inputs:
                              type: ${deviceIconDropdown.value}
                              mac: ${getDeviceDetails.body.status.Key}
                        - executeCode:
                            body: |
                              //@code
                              var widget = "LoadingToast";
                              var styles = {
                                padding: 0
                              };
                              var options = {
                                type: 'custom',
                                duration: 5,
                                dismissible: false,
                                alignment: 'center'
                              };
                              showToast(widget, styles, options);

        - Spacer:
            styles:
              size: 16
        - TabBar:
            styles:
              tabAlignment: center
              indicatorSize: label
              tabPadding: 2 32
              indicatorThickness: 4
              indicatorColor: 0xFF009900
              activeTabColor: 0xFF009900
              inactiveTabColor: 0xFF535353
              activeTabBackgroundColor: 0xFF009900
              tabBackgroundColor: 0xFFF3F3F3
              tabFontSize: 15
              tabFontWeight: bold
              expanded: true
            items:
              - label: r@kpn.local_network.device_info
                body: ConnectedDeviceDetails

              - label: r@kpn.home.parental_control
                body: ClientDeviceParentalControl


ClientDeviceParentalControl:
  onLoad:
    invokeAPI:
      name: getMST
      inputs:
        id: ${getDeviceMstId(mac)}
      onResponse:
        invokeAPI:
          name: getDeviceSchedule
          inputs:
            mac: ${mac}
          onResponse:
            executeCode:
              body: |
                //@code
                if (getMST.body.data != null && getMST.body.data.enable == true) {
                  deviceScheduleDropdown.value = 'Time';
                  scheduleWrapper.visible = false;
                } else {
                  if (getDeviceSchedule.body.data == null ) {
                    deviceScheduleDropdown.value = 'Allow';
                    scheduleWrapper.visible = false;
                  } else {
                    if (getDeviceSchedule.body.data.scheduleInfo.override == 'Disable') {
                      deviceScheduleDropdown.value = 'Block';
                      scheduleWrapper.visible = false;
                    } else if (getDeviceSchedule.body.data.scheduleInfo.override == 'Enable') {
                      deviceScheduleDropdown.value = 'Allow';
                      scheduleWrapper.visible = false;
                    } else if (getDeviceSchedule.body.data.scheduleInfo.override == '' && getDeviceSchedule.body.data.scheduleInfo.schedule.length == 0) {
                      deviceScheduleDropdown.value = 'Allow';
                      scheduleWrapper.visible = false;
                    } else if (getDeviceSchedule.body.data.scheduleInfo.override == '') {
                      deviceScheduleDropdown.value = 'Weekly';
                      scheduleWrapper.visible = true;
                      deviceScheduler.visible = true;
                      getDeviceSchedule.body.data.scheduleInfo.schedule.map(function(range) {
                        deviceScheduler.addSelectedRange(range.begin, range.end);
                      });
                      deviceScheduler.refresh();
                    }
                  }
                }
              
  body:
    Column:
      styles:
        padding: 24
        gap: 16
        scrollable: true
      children:
        - Form:
            styles:
              labelPosition: start
              labelMaxWidth: 150
            children:
            
              - Dropdown:
                  id: deviceScheduleDropdown
                  label: r@kpn.mode
                  items: [
                    { "value": "Allow", "label": r@kpn.local_network.always_allow },
                    { "value": "Block", "label": r@kpn.local_network.always_block },
                    { "value": "Weekly", "label": r@kpn.local_network.schedule },
                    { "value": "Time", "label": r@kpn.local_network.time_countdown }
                  ]
                  onChange:
                    executeCode:
                      body: |
                        //@code
                        if (this.value == 'Weekly') {
                          scheduleWrapper.visible = true;
                          deviceScheduler.visible = true;
                        } else {
                          scheduleWrapper.visible = false;
                          deviceScheduler.visible = false;
                        }

        - Conditional:
            conditions:
              - if: ${ deviceScheduleDropdown.value == "Time" }
                ClientDeviceDailyLimit:
                  inputs:
                    mac: ${mac}
        
        - Column:
            id: scheduleWrapper
            styles: 
              gap: 8
              visible: false
            children:
              - Row:
                  styles: { margin: 0 0 0 25 }
                  children:
                    - Row: { styles: { width: 94 }, children: [ Text: { text: 0 } ] }
                    - Row: { styles: { width: 96 }, children: [ Text: { text: 4 } ] }
                    - Row: { styles: { width: 96 }, children: [ Text: { text: 8 } ] }
                    - Row: { styles: { width: 96 }, children: [ Text: { text: 12 } ] }
                    - Row: { styles: { width: 96 }, children: [ Text: { text: 16 } ] }
                    - Row: { styles: { width: 96 }, children: [ Text: { text: 20 } ] }
              
        - WeeklyScheduler:
            id: deviceScheduler
            visible: false
            slotInMinutes: 60
            slotWidth: 22
            slotHeight:   16
            dayLabels: [ 'M','D','W','D','V','Z','Z' ]
            selectedColor: blue
            unselectedColor: green
            paddingBetweenDays: 8
            gapBetweenSlots: 2
            dayLabelBoxWidth: 25
            dayLabelBoxHeight: 18
            displayDayLabels: true
            dayLabelStyles: { fontWeight: bold, color: 0xFF444444, fontSize: 14 }
            verticalDividerIndices: [ 4,8,12,16,20,24 ]
            verticalDividerLabels: [ '4h','8h','12h','16h','20h','24h' ]
            gapToLeaveForDivider: 8
        
        - Conditional:
            conditions:
              - if: ${deviceScheduleDropdown.value != 'Time'}
                Button:
                  label: r@kpn.apply
                  onTap:
                    executeActionGroup:
                      actions:
                        # delete any MST
                        - invokeAPI:
                            name: deleteDeviceMST
                            inputs:
                              id: ${getDeviceMstId(getDeviceDetails.body.status.Key)}
                        - executeConditionalAction:
                            conditions:
                              - if: ${ deviceScheduleDropdown.value == 'Allow' }
                                action:
                                  invokeAPI:
                                    name: deleteDeviceSchedule
                                    inputs:
                                      mac: ${getDeviceDetails.body.status.Key}
                                    onResponse: |
                                      ensemble.storage.devicesWithParentalControl = {};
                                      var widget = "LoadingToast";
                                      var styles = {
                                        padding: 0
                                      };
                                      var options = {
                                        type: 'custom',
                                        duration: 5,
                                        dismissible: false,
                                        alignment: 'center'
                                      };
                                      showToast(widget, styles, options);


                              - elseif: ${ deviceScheduleDropdown.value == 'Block' }
                                action:
                                  invokeAPI:
                                    name: setDeviceSchedule
                                    inputs:
                                      mac: ${getDeviceDetails.body.status.Key}
                                      schedule: ${[]}
                                      override: 'Disable'
                                    onResponse: |
                                      ensemble.storage.devicesWithParentalControl = {};
                                      var widget = "LoadingToast";
                                      var styles = {
                                        padding: 0
                                      };
                                      var options = {
                                        type: 'custom',
                                        duration: 5,
                                        dismissible: false,
                                        alignment: 'center'
                                      };
                                      showToast(widget, styles, options);
                              - else:
                                action:
                                  executeCode:
                                    body: |
                                      ensemble.storage.devicesWithParentalControl = {};
                                      var selectedRanges = deviceScheduler.getSelectedRanges();
                                      var schedule = [];
                                      selectedRanges.map(function(range) {
                                        schedule.push({
                                          "state": "Disable",
                                          "begin": range.startTime,
                                          "end": range.endTime
                                        });
                                      });
                                    
                                      ensemble.invokeAPI('setDeviceSchedule',{
                                        'mac': getDeviceDetails.body.status.Key,
                                        'schedule': schedule,
                                        'override': ''
                                      });
                                    onComplete: |
                                      var widget = "LoadingToast";
                                      var styles = {
                                        padding: 0
                                      };
                                      var options = {
                                        type: 'custom',
                                        duration: 5,
                                        dismissible: false,
                                        alignment: 'center'
                                      };
                                      showToast(widget, styles, options);


ClientDeviceDailyLimit:
  onLoad:
    invokeAPI:
      name: getMST
      inputs:
        id: ${getDeviceMstId(mac)}
  body:
    Column:
      styles:
        padding: 24
        gap: 16
      children:
        - Row:
            children:
              - Form:
                  styles:
                    width: 350
                    labelPosition: start
                    labelMaxWidth: 90
                  children:
                    - Slider:
                        label: r@kpn.monday
                        id: maxTime_mon
                        divisions: 48
                        min: 0
                        max: 24
                        initialValue: '${ getMST.body.data != null ? getMST.body.data.allowedTime.Mon / 60 : 24 }'
                        onChange: |
                          maxTime_monValue.text = this.value;
                    - Slider:
                        label: r@kpn.tuesday
                        id: maxTime_tue
                        divisions: 48
                        min: 0
                        max: 24
                        initialValue: '${ getMST.body.data != null ? getMST.body.data.allowedTime.Tue / 60 : 24 }'
                        onChange: |
                          maxTime_tueValue.text = this.value;
                    - Slider:
                        label: r@kpn.wednesday
                        id: maxTime_wed
                        divisions: 48
                        min: 0
                        max: 24
                        initialValue: '${ getMST.body.data != null ? getMST.body.data.allowedTime.Wed / 60 : 24 }'
                        onChange: |
                          maxTime_wedValue.text = this.value;
                    - Slider:
                        label: r@kpn.thursday
                        id: maxTime_thu
                        divisions: 48
                        min: 0
                        max: 24
                        initialValue: '${ getMST.body.data != null ? getMST.body.data.allowedTime.Thu / 60 : 24 }'
                        onChange: |
                          maxTime_thuValue.text = this.value;
                    - Slider:
                        label: r@kpn.friday
                        id: maxTime_fri
                        divisions: 48
                        min: 0
                        max: 24
                        initialValue: '${ getMST.body.data != null ? getMST.body.data.allowedTime.Fri / 60 : 24 }'
                        onChange: |
                          maxTime_friValue.text = this.value;
                    - Slider:
                        label: r@kpn.saturday
                        id: maxTime_sat
                        divisions: 48
                        min: 0
                        max: 24
                        initialValue: '${ getMST.body.data != null ? getMST.body.data.allowedTime.Sat / 60 : 24 }'
                        onChange: |
                          maxTime_satValue.text = this.value;
                    - Slider:
                        label: r@kpn.sunday
                        id: maxTime_sun
                        divisions: 48
                        min: 0
                        max: 24
                        initialValue: '${ getMST.body.data != null ? getMST.body.data.allowedTime.Sun / 60 : 24 }'
                        onChange: |
                          maxTime_sunValue.text = this.value;
              - Column:
                  styles:
                    gap: 35
                    padding: 14 0
                    width: 50
                  children:
                    - Text:
                        id: maxTime_monValue
                    - Text:
                        id: maxTime_tueValue
                    - Text:
                        id: maxTime_wedValue
                    - Text:
                        id: maxTime_thuValue
                    - Text:
                        id: maxTime_friValue
                    - Text:
                        id: maxTime_satValue
                    - Text:
                        id: maxTime_sunValue
              - Button:
                  label: r@kpn.local_network.apply_to_all_days
                  styles:
                    outline: true
                    borderColor: white
                  onTap: |
                    var monValue = maxTime_mon.value;
                    maxTime_tue.initialValue = monValue;
                    maxTime_tueValue.text = monValue;
                    maxTime_wed.initialValue = monValue;
                    maxTime_wedValue.text = monValue;
                    maxTime_thu.initialValue = monValue;
                    maxTime_thuValue.text = monValue;
                    maxTime_fri.initialValue = monValue;
                    maxTime_friValue.text = monValue;
                    maxTime_sat.initialValue = monValue;
                    maxTime_satValue.text = monValue;
                    maxTime_sun.initialValue = monValue;
                    maxTime_sunValue.text = monValue;

        - Button:
            label: r@kpn.apply
            onTap:
              invokeAPI:
                name: setMST
                inputs:
                  id: ${getDeviceMstId(mac)}
                  mac: ${mac}
                  enable: true
                onResponse: |
                  ensemble.storage.devicesWithParentalControl = {};
                  var widget = "LoadingToast";
                  var styles = {
                    padding: 0
                  };
                  var options = {
                    type: 'custom',
                    duration: 5,
                    dismissible: false,
                    alignment: 'center'
                  };
                  showToast(widget, styles, options);


HomePlugDeviceDetails:
  inputs:
    - mac
    - iconColor
  onLoad:
    invokeAPI:
      name: getDeviceDetails
      inputs:
        mac: ${mac}

  Column:
    styles:
      backgroundColor: white
      padding: 16 0
      height: ${device.height - 50}
    children:
      - Row:
          styles: 
            mainAxis: spaceBetween
            padding: 0 16
          children:
            - GreenSubtitle:
                inputs:
                  title: ${getDeviceDetails.body.status.Name}
            - CloseDialogIcon
      - FittedRow:
          styles: 
            gap: 40
            childrenFits: [auto, 2]
            padding: 8 24
          children:
            - Icon:
                name: ${getDeviceIcon(getDeviceDetails.body.status.SSW.ModelName)}
                library: kpnSI
                styles:
                  size: 64
                  color: white
                  backgroundColor: ${iconColor}
                  padding: 24
                  borderRadius: 100
            - Form:
                styles:
                  gap: 8
                children:
                  - TextInput:
                      id: deviceNameInput
                      label: r@kpn.device_name
                      value: ${getDeviceDetails.body.status.Name}
                      styles:
                        labelStyle:
                          fontSize: 12
                          color: grey
                          fontWeight: w600

      # submit buttons
      - Row:
          styles: { mainAxis: end, crossAxis: center, gap: 24, padding: 8 24 }
          children:
            - Button:
                id: restore
                label: r@kpn.restore
                styles:
                  outline: true
                  labelStyle:
                    color: 0xFF0077CC
                onTap:
                  invokeAPI:
                    name: getDeviceDetails
                    inputs:
                      mac: ${ensemble.storage.selectedDeviceKey}
                    onResponse:
                      executeCode:
                        body: |
                          //@code
                          deviceIcon.icon = getDeviceIcon(getDeviceDetails.body.status.DeviceType);

            - Button:
                label: r@kpn.apply
                onTap:
                  invokeAPI:
                    name: setDeviceName
                    inputs:
                      name: ${deviceNameInput.value}
                      mac: ${getDeviceDetails.body.status.Key}
                    onResponse:
                      executeCode:
                        body: |
                          var widget = "LoadingToast";
                          var styles = {
                            padding: 0
                          };
                          var options = {
                            type: 'custom',
                            duration: 5,
                            dismissible: false,
                            alignment: 'center'
                          };
                          showToast(widget, styles, options);
                        onComplete:
                          closeAllDialogs

      - Spacer:
          styles:
            size: 16
      - Column:
          styles: 
            gap: 8
            padding: 24
          children:

            # last connection
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.last_connection
                      selectable: true
                  - Text:
                      text: ${getDeviceDetails.body.status.LastConnection}
                      selectable: true
            - Divider

            # Connection type
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.connection_type
                      selectable: true
                  - Conditional:
                      conditions:
                        - if: "${getDeviceDetails.body.status.connectionDetails.type == 'Ethernet'}"
                          Text:
                            selectable: true
                            text: ${getDeviceDetails.body.status.connectionDetails.type} - ${getDeviceDetails.body.status.connectionDetails.networklabel}
                        - elseif: "${getDeviceDetails.body.status.connectionDetails.type == 'WiFi'}"
                          Text:
                            selectable: true
                            text: ${getDeviceDetails.body.status.connectionDetails.type} ${getDeviceDetails.body.status.OperatingFrequencyBand} - ${getDeviceDetails.body.status.connectionDetails.networklabel} - ${getWifiStandard(getDeviceDetails.body.status.OperatingStandard, true)}
                        - else:
                          Text:
                            text: '-'
            - Divider

            # bit rate
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.internet_link.homeplugs.transmission
                      selectable: true
                  - Conditional:
                      conditions:
                        - if: ${ getDeviceDetails.body.status.AveragePhyTx > 0 || getDeviceDetails.body.status.AveragePhyRx > 0 }
                          widget:
                            Text:
                              text: ${ getDeviceDetails.body.status.AveragePhyTx } Mbits / ${getDeviceDetails.body.status.AveragePhyRx} Mbits
                              selectable: true
                        - else:
                          widget:
                            Text:
                              text: "-"
                              selectable: true
            - Divider

            # MAC address
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.mac_address
                      selectable: true
                  - Text:
                      text: ${getDeviceDetails.body.status.Key}
                      selectable: true
            - Divider

            # MAC address randomized
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.mac_address_randomized
                      selectable: true
                  - Text:
                      text: "${getDeviceDetails.body.status.macRandomized == true ? 'r@kpn.local_network.mac_address_randomized_yes' : 'r@kpn.local_network.mac_address_randomized_no'}"
                      selectable: true
            - Divider

            # IPv4 address
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.ip4_address
                      selectable: true
                  - Column:
                      item-template:
                        data: ${getDeviceDetails.body.status.IPv4Address}
                        name: i
                        template:
                          Text:
                            visible: '${i.Status == "reachable" ? true : false}'
                            text: ${i.Address}
                            selectable: true
            - Divider
            # IPv6 address
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.ip6_address
                      selectable: true
                  - Column:
                      item-template:
                        data: ${getDeviceDetails.body.status.IPv6Address}
                        name: i
                        template:
                          Text:
                            visible: '${i.Status == "reachable" ? true : false}'
                            text: ${i.Address}
                            selectable: true
            - Divider

            # IP address source
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.local_network.ip_address_source
                      selectable: true
                  - Text:
                      text: ${getDeviceDetails.body.status.IPAddressSourceLabel}
                      selectable: true
            - Divider

            # Manufacturer
            # display a dash if empty
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.manufacturer
                      selectable: true
                  - Text:
                      text: "${getDeviceDetails.body.status.Manufacturer == '' ? '-' : getDeviceDetails.body.status.Manufacturer}"
                      selectable: true
            - Divider

            # SW version
            - FittedRow:
                children:
                  - Text:
                      text: r@kpn.software_version
                      selectable: true
                  - Text:
                      text: ${getDeviceDetails.body.status.Version}
                      selectable: true
            
            - Spacer:
                styles: { size: 8 }


SlaveDeviceDetails:
  inputs:
    - mac
    - iconColor
  onLoad:
    invokeAPI:
      name: getDeviceDetails
      inputs:
        mac: ${mac}
      onResponse:
        invokeAPI:
          name: getSswLed
          inputs:
            mac: ${mac}

  Column:
    styles:
      backgroundColor: white
      padding: 16 0
      height: ${device.height - 50}
    children:
      - Row:
          styles: 
            mainAxis: spaceBetween
            padding: 0 16
          children:
            - GreenSubtitle:
                inputs:
                  title: ${getDeviceDetails.body.status.Name}
            - CloseDialogIcon
      - FittedRow:
          styles: 
            gap: 40
            childrenFits: [auto, 2]
            padding: 8 24
          children:
            - Icon:
                name: ${getDeviceIcon(getDeviceDetails.body.status.SSW.ModelName)}
                library: kpnSI
                styles:
                  size: 64
                  color: white
                  backgroundColor: ${iconColor}
                  padding: 24
                  borderRadius: 100
                onTap:
                  openUrl:
                    url: http://${getDeviceDetails.body.status.IPAddress}
                    openInExternalApp: true
            - Form:
                styles:
                  gap: 8
                children:
                  - TextInput:
                      id: deviceNameInput
                      label: r@kpn.device_name
                      value: ${getDeviceDetails.body.status.Name}
                      styles:
                        labelStyle:
                          fontSize: 12
                          color: grey
                          fontWeight: w600
                  - Dropdown:
                      id: slaveDeviceLed
                      label: r@kpn.led
                      value: ${getSswLed.body.status.Root.Brightness}
                      items:
                        - { "label": "r@kpn.led_on", "value": 255 }
                        - { "label": "r@kpn.led_dimmed", "value": 12 }
                        - { "label": "r@kpn.led_off", "value": 0 }
                      styles:
                        labelStyle:
                          fontSize: 12
                          color: grey
                          fontWeight: w600

      # submit buttons
      - Row:
          styles: { mainAxis: end, crossAxis: center, gap: 24, padding: 8 24 }
          children:
            - Button:
                id: restore
                label: r@kpn.restore
                styles:
                  outline: true
                  labelStyle:
                    color: 0xFF0077CC
                onTap:
                  invokeAPI:
                    name: getSswLed
                    inputs:
                      mac: ${ensemble.storage.selectedDeviceKey}
                    onResponse:
                      invokeAPI:
                        name: getDeviceDetails
                        inputs:
                          mac: ${ensemble.storage.selectedDeviceKey}
                        onResponse:
                          executeCode:
                            body: |
                              //@code
                              deviceIcon.icon = getDeviceIcon(getDeviceDetails.body.status.DeviceType);

            - Button:
                label: r@kpn.apply
                onTap:
                  invokeAPI:
                    name: setDeviceName
                    inputs:
                      name: ${deviceNameInput.value}
                      mac: ${getDeviceDetails.body.status.Key}
                    onResponse:
                      executeCode:
                        body: |
                          //@code
                          
                          // SET LED
                          ensemble.invokeAPI("setSswLed",{
                            "mac": getDeviceDetails.body.status.Key, 
                            "brightness": slaveDeviceLed.value
                          });
                          
                          var widget = "LoadingToast";
                          var styles = {
                            padding: 0
                          };
                          var options = {
                            type: 'custom',
                            duration: 5,
                            dismissible: false,
                            alignment: 'center'
                          };
                          showToast(widget, styles, options);
                        onComplete:
                          closeAllDialogs

      - Spacer:
          styles:
            size: 16
      - TabBar:
          styles:
            tabAlignment: center
            indicatorSize: label
            tabPadding: 2 32
            indicatorThickness: 4
            indicatorColor: 0xFF009900
            activeTabColor: 0xFF009900
            inactiveTabColor: 0xFF535353
            activeTabBackgroundColor: 0xFF009900
            tabBackgroundColor: 0xFFF3F3F3
            tabFontSize: 15
            tabFontWeight: bold
            expanded: true
          items:
            - label: r@kpn.local_network.pairing_status
              body: SlaveDevicePairingStatus

            - label: r@kpn.local_network.device_info
              body: ConnectedDeviceDetails

            - label: r@kpn.local_network.wifi_radio
              body: SlaveDeviceRadio


SlaveDeviceRadio:
  onLoad:
    invokeAPI:
      name: getSsw2gRadio
      inputs: 
        mac: ${getDeviceDetails.body.status.Key}
      onResponse:
        invokeAPI:
          name: getSsw5gRadio
          inputs: 
            mac: ${getDeviceDetails.body.status.Key}
          onResponse: |
            if (getSsw2gRadio.body.status.AutoChannelEnable)
              radio2gChannel.value = 'Auto';
            else
              radio2gChannel.value = ''+getSsw2gRadio.body.status.Channel;
  
            if (response.body.status.AutoChannelEnable)
              radio5gChannel.value = 'Auto';
            else
              radio5gChannel.value = ''+response.body.status.Channel;

  Column:
    styles:
      gap: 8
      padding: 24
      scrollable: true
    children:
      - Form:
          styles:
            labelPosition: '${device.width > 768 ? "start" : "top"}'
            gap: 16
            labelMaxWidth: 200
          children:
            - Dropdown:
                id: radio2gWirelessMode
                label: r@kpn.wifi.wireless_mode_2g
                value: ${getSsw2gRadio.body.status.OperatingStandards}
                items: ${ getRadioStandardsDropdownItems(getSsw2gRadio.body.status.SupportedStandards) }
            - Dropdown:
                id: radio2gBandwidth
                label: r@kpn.wifi.bandwidth_2g
                value: ${getSsw2gRadio.body.status.CurrentOperatingChannelBandwidth}
                items: ${ getRadioBandwidthDropdownItems(getSsw2gRadio.body.status.MaxChannelBandwidth) }
            - Dropdown:
                id: radio2gChannel
                label: r@kpn.wifi.channel_2g
                itemsFromString: ${ 'Auto,'+getSsw2gRadio.body.status.PossibleChannels }
            - Dropdown:
                id: radio5gWirelessMode
                label: r@kpn.wifi.wireless_mode_5g
                value: ${getSsw5gRadio.body.status.OperatingStandards}
                items: ${ getRadioStandardsDropdownItems(getSsw5gRadio.body.status.SupportedStandards) }
            - Dropdown:
                id: radio5gBandwidth
                label: r@kpn.wifi.bandwidth_5g
                value: ${getSsw5gRadio.body.status.CurrentOperatingChannelBandwidth}
                items: ${ getRadioBandwidthDropdownItems(getSsw5gRadio.body.status.MaxChannelBandwidth) }
            - Dropdown:
                id: radio5gChannel
                label: r@kpn.wifi.channel_5g
                itemsFromString: ${ 'Auto,'+getSsw5gRadio.body.status.PossibleChannels }
            - Row:
                styles: { margin: 16 0, mainAxis: end, crossAxis: center }
                children:
                  - Text:
                      id: radioUpdateStatus
                  - Button:
                      label: r@kpn.restore
                      styles:
                        outline: true
                        labelStyle:
                          color: 0xFF0077CC
                      onTap:
                        invokeAPI:
                          name: getSsw2gRadio
                          inputs: 
                            mac: ${getDeviceDetails.body.status.Key}
                          onResponse:
                            invokeAPI:
                              name: getSsw5gRadio
                              inputs: 
                                mac: ${getDeviceDetails.body.status.Key}
                              onResponse: |
                                if (getSsw2gRadio.body.status.AutoChannelEnable)
                                  radio2gChannel.value = 'Auto';
                                else
                                  radio2gChannel.value = ''+getSsw2gRadio.body.status.Channel;
                      
                                if (response.body.status.AutoChannelEnable)
                                  radio5gChannel.value = 'Auto';
                                else
                                  radio5gChannel.value = ''+response.body.status.Channel;

                  - Button:
                      label: r@kpn.save
                      validateForm: true
                      styles:
                        margin: 0 0 0 10
                      onTap:
                        executeCode:
                          body: |
                            if (radio2gChannel.value == 'Auto') {
                              ensemble.invokeAPI('setSsw2gRadioAutoChannel', {
                                'mac': getDeviceDetails.body.status.Key,
                                'bandwidth': radio2gBandwidth.value,
                                'standard': radio2gWirelessMode.value
                              });
                            } else {
                              ensemble.invokeAPI('setSsw2gRadioStaticChannel', {
                                'mac': getDeviceDetails.body.status.Key,
                                'channel': radio2gChannel.value,
                                'bandwidth': radio2gBandwidth.value,
                                'standard': radio2gWirelessMode.value
                              });
                            }

                            if (radio5gChannel.value == 'Auto') {
                              ensemble.invokeAPI('setSsw5gRadioAutoChannel', {
                                'mac': getDeviceDetails.body.status.Key,
                                'bandwidth': radio5gBandwidth.value,
                                'standard': radio5gWirelessMode.value
                              });
                            } else {
                              ensemble.invokeAPI('setSsw5gRadioStaticChannel', {
                                'mac': getDeviceDetails.body.status.Key,
                                'channel': radio5gChannel.value,
                                'bandwidth': radio5gBandwidth.value,
                                'standard': radio5gWirelessMode.value
                              });
                            }
                          onComplete:
                            showToast:
                              widget: SuccessToast
                              styles:
                                padding: 0
                              options:
                                type: custom
                                duration: 15
                                dismissable: true
                                alignment: center


ConnectedDeviceDetails:
  body:
    Column:
      styles: 
        gap: 8
        padding: 24
        scrollable: true
      children:

        # last connection
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.local_network.last_connection
                  selectable: true
              - Text:
                  text: ${getDeviceDetails.body.status.LastConnection}
                  selectable: true
        - Divider

        # Connection type
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.connection_type
                  selectable: true
              - Conditional:
                  conditions:
                    - if: "${getDeviceDetails.body.status.connectionDetails.type == 'Ethernet'}"
                      Text:
                        selectable: true
                        text: ${getDeviceDetails.body.status.connectionDetails.type} - ${getDeviceDetails.body.status.connectionDetails.networklabel}
                    - elseif: "${getDeviceDetails.body.status.connectionDetails.type == 'WiFi'}"
                      Text:
                        selectable: true
                        text: ${getDeviceDetails.body.status.connectionDetails.type} ${getDeviceDetails.body.status.OperatingFrequencyBand} - ${getDeviceDetails.body.status.connectionDetails.networklabel} - ${getWifiStandard(getDeviceDetails.body.status.OperatingStandard, true)}
                    - else:
                      Text:
                        text: '-'
        - Divider

        # bit rate
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.bitrate
                  selectable: true
              - Text:
                  text: "${ getDeviceDetails.body.status.connectionDetails.type == 'Ethernet' ? ensemble.storage.ethPorts[getDeviceDetails.body.status.InterfaceName].CurrentBitRateFormatted : getDeviceDetails.body.status.downloadUploadSpeed }"
                  selectable: true
        - Divider

        # MAC address
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.mac_address
                  selectable: true
              - Text:
                  text: ${getDeviceDetails.body.status.Key}
                  selectable: true
        - Divider

        # MAC address randomized
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.local_network.mac_address_randomized
                  selectable: true
              - Text:
                  text: "${getDeviceDetails.body.status.macRandomized == true ? 'r@kpn.local_network.mac_address_randomized_yes' : 'r@kpn.local_network.mac_address_randomized_no'}"
                  selectable: true
        - Divider

        # IPv4 address
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.ip4_address
                  selectable: true
              - Column:
                  item-template:
                    data: ${getDeviceDetails.body.status.IPv4Address}
                    name: i
                    template:
                      Text:
                        visible: '${i.Status == "reachable" ? true : false}'
                        text: ${i.Address}
                        selectable: true
        - Divider
        # IPv6 address
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.ip6_address
                  selectable: true
              - Column:
                  item-template:
                    data: ${getDeviceDetails.body.status.IPv6Address}
                    name: i
                    template:
                      Text:
                        visible: '${i.Status == "reachable" ? true : false}'
                        text: ${i.Address}
                        selectable: true
        - Divider

        # IP address source
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.local_network.ip_address_source
                  selectable: true
              - Text:
                  text: ${getDeviceDetails.body.status.IPAddressSourceLabel}
                  selectable: true
        - Divider

        # Manufacturer
        # display a dash if empty
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.manufacturer
                  selectable: true
              - Text:
                  text: "${getDeviceDetails.body.status.SSW.Manufacturer == '' ? '-' : getDeviceDetails.body.status.SSW.Manufacturer}"
                  selectable: true
        - Divider

        # SW version
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.software_version
                  selectable: true
              - Text:
                  text: ${getDeviceDetails.body.status.SSW.SoftwareVersion}
                  selectable: true
        
        - Spacer:
            styles: { size: 8 }


SlaveDevicePairingStatus:
  body:
    Column:
      styles:
        gap: 8
        padding: 24
        scrollable: true
      children:
        - Conditional:
            conditions:
              - if: "${(getDeviceDetails.body.status.SSW.State == 'Synced' || getDeviceDetails.body.status.Active == false) ? false : true}"
                Column:
                  styles:
                    backgroundColor: 0xFFFBDFDF
                    borderRadius: 8
                    margin: 0 0 16 0
                  children:
                    - Divider:
                        styles:
                          thickness: 5
                          color: 0xFFE52E2E
                    - Row:
                        styles:
                          gap: 8
                          padding: 8 16 8 16
                        children:
                          - Icon:
                              name: error_outline
                              styles:
                                size: 20
                                color: 0xFFE52E2E
                          - Text:
                              text: r@kpn.local_network.unsynced_extender_warning
                              styles:
                                overflow: wrap
                                expanded: true

              - elseif: "${ getDeviceDetails.body.status.Active == false }"
                Column:
                  styles:
                    backgroundColor: 0xFFF3F3F3
                    borderRadius: 8
                    margin: 0 0 16 0
                  children:
                    - Divider:
                        styles:
                          thickness: 5
                          color: 0xFF535353
                    - Row:
                        styles:
                          gap: 8
                          padding: 8 16 8 16
                        children:
                          - Icon:
                              name: error_outline
                              styles:
                                size: 20
                                color: 0xFF535353
                          - Text:
                              text: r@kpn.local_network.offline_extender_warning
                              styles:
                                overflow: wrap
                                expanded: true


        - FittedRow:
            children:
              - Text:
                  text: r@kpn.local_network.link_time
                  selectable: true
              - Text:
                  text: ${convertUtcToGmtPlus1(getDeviceDetails.body.status.SSW.PairingTime)}
                  selectable: true  
        - Divider
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.status
                  selectable: true
              - Text:
                  text: ${getDeviceDetails.body.status.SSW.State}
                  selectable: true
        - Divider
        - Row:
            styles:
              mainAxis: end
              crossAxis: center
              padding: 16 0
            children:
              - Button:
                  visible: "${getDeviceDetails.body.status.SSW.State == 'Discovered' ? false : true}"
                  label: r@kpn.unpair
                  onTap:
                    showDialog:
                      widget: UnPairRepeaterConfirmation
                      options:
                        maxWidth: 600


UnPairRepeaterConfirmation:
  body:
    Column:
      styles:
        gap: 16
      children:
        - FittedRow:
            styles: 
              childrenFits:
                - 1
                - auto
            children:
              - Text:
                  text: r@kpn.local_network.confirm_unpairing_repeater
                  styles:
                    padding: 0 24 0 0
                    textStyle:
                      fontWeight: bold

              - CloseDialogIcon
        - Text:
            text: r@kpn.local_network.unpairing_repeater_description
        - Row:
            styles:
              mainAxis: end
              gap: 16
            children:
              - Button:
                  label: r@kpn.cancel
                  styles:
                    outline: true
                    labelStyle:
                      color: 0xFF0077CC
                  onTap: closeAllDialogs
              - Button:
                  label: r@kpn.unpair
                  onTap:
                    executeCode:
                      body: |
                        //@code
                        clearAccessPoints();
                      onComplete:
                        invokeAPI:
                          name: unPairExtender
                          inputs:
                            mac: ${getDeviceDetails.body.status.Key}
                          onResponse:
                            invokeAPI:
                              name: removeDevice
                              inputs:
                                mac: ${getDeviceDetails.body.status.Key}
                              onResponse:
                                executeCode:
                                  body: |
                                    var widget = "LoadingToast";
                                    var styles = {
                                      padding: 0
                                    };
                                    var options = {
                                      type: 'custom',
                                      duration: 5,
                                      dismissible: false,
                                      alignment: 'center'
                                    };
                                    showToast(widget, styles, options);

                                  onComplete: closeAllDialogs


PortTableHeader:
  inputs:
    - port
    - status
  body:
    Column:
      styles:
        height: 58
      children:
        - Row:
            styles:
              gap: 4
              crossAxis: center
              padding: 0 16
            children:
              - Icon:
                  name: 0xe923
                  library: kpnUI
                  styles:
                    size: 18
                    color: '${ status == true ? 0xFF39FF14 : 0xFFD3D3D3}'
              - Text: 
                  text: r@kpn.port ${port}
                  styles:
                    textStyle:
                      fontWeight: bold
                      color: '${ status == true ? 0xFF535353 : 0xFF939393}'


PortTableSentReceivedText:
  body:
    Row:
      styles:
        padding: 0 16
        height: 24
      children:
        - Text:
            text: r@kpn.internet_link.received
            styles: 
              textStyle:
                fontWeight: bold
                fontSize: 14
                color: 0xFF939393
        - Text:
            text: / r@kpn.internet_link.sent
            styles:
              textStyle:
                fontSize: 14
                color: 0xFF939393


SentReceivedText:
  inputs:
    - first
    - second
  body:
    Row:
      styles:
        padding: 0 16
        height: 24
      children:
        - Markdown:
            text: |-
              **${first}** / ${second}
                            

Ethernet:
  onLoad: |
    //@code
    ensemble.invokeAPI('getPort1Params');
    ensemble.invokeAPI('getPort1Usage');
    ensemble.invokeAPI('getPort2Params');
    ensemble.invokeAPI('getPort2Usage');
    ensemble.invokeAPI('getPort3Params');
    ensemble.invokeAPI('getPort3Usage');
    ensemble.invokeAPI('getPort4Params');
    ensemble.invokeAPI('getPort4Usage');
    // check if ETH3 is assigned to GUEST
    ensemble.invokeAPI('getTopologyGuest');


  Column:
    styles:
      padding: 16
    children:
      - Column:
          styles:
            backgroundColor: 0xFFFFFFFF
            shadowColor: 0xFFDEDEDE
            shadowRadius: 3
            shadowOffset: [0, 0]
            borderRadius: 10
            padding: 16
            gap: 12
          children:
            - ContentTitle:
                inputs:
                  title: r@kpn.local_network.ethernet_ports
            - Text:
                text: r@kpn.local_network.ethernet_ports_description
                  
            # Ports table
            - FittedRow:
                styles:
                  childrenFits: [auto,1,1,1,1]
                  margin: 16 0
                children:

                  # column 1 - labels
                  - Column:
                      styles:
                        gap: 10
                        padding: 12 0
                        width: 200
                      children:
                        - Spacer:
                            styles:
                              size: 58
                        - Divider
                        - Text:
                            text: r@kpn.status
                        - Divider
                        - Text:
                            text: r@kpn.local_network.duplex
                            styles:
                              height: 58
                              padding: 16 0
                        - Divider
                        - Text:
                            text: r@kpn.local_network.link_speed
                            styles:
                              height: 58
                              padding: 16 0
                        - Divider
                        - Text:
                            text: r@kpn.local_network.max_bitrate
                        - Divider
                        - Text:
                            text: r@kpn.local_network.current_bitrate
                        - Divider
                        - Spacer:
                            styles:
                              size: 24
                        - Divider
                        - Text:
                            text: r@kpn.internet_link.data
                            styles:
                              height: 24
                        - Divider
                        - Text:
                            text: r@kpn.internet_link.packages
                            styles:
                              height: 24
                        - Divider
                        - Text:
                            text: r@kpn.internet_link.errors
                            styles:
                              height: 24
                        - Divider
                        - Text:
                            text: r@kpn.internet_link.lost_packages
                            styles:
                              height: 24
                        - Divider
                        - Text:
                            text: r@kpn.internet_link.multicast_packages

                  # column 2 - port 1 - ETH0
                  - Column:
                      styles:
                        gap: 10
                        padding: 12 0
                      children:
                        - PortTableHeader:
                            inputs:
                              port: 1
                              status: ${ensemble.storage.ethPorts["ETH0"].Active}
                        - Divider
                        - Text:
                            text: '${ensemble.storage.ethPorts["ETH0"].Active == true ? "r@kpn.active" : "r@kpn.inactive"}'
                            styles:
                              padding: 0 16
                        - Divider
                        - Row:
                            styles:
                              padding: 8 16
                              height: 58
                            children:
                              - Dropdown:
                                  value: ${getPort1Params.body.data.DuplexModeEnabled}
                                  items: ["Auto", "Half", "Full"]
                                  styles:
                                    expanded: true
                                  onChange:
                                    invokeAPI:
                                      name: setDuplexMode
                                      inputs: 
                                        port: ${getPort1Params.body.status.base.ETH0.LLIntf.keys()[0]}
                                        mode: ${this.value}
                        - Divider
                        - Row:
                            styles:
                              padding: 8 16
                              height: 58
                            children:
                              - Dropdown:
                                  value: ${getPort1Params.body.data.MaxBitRateEnabled}
                                  items: ${ getPortSpeedDropdownItems(getPort1Params.body.data.MaxBitRateSupported) }
                                  styles:
                                    expanded: true
                                  onChange:
                                    invokeAPI:
                                      name: setPortSpeed
                                      inputs: 
                                        port: ${getPort1Params.body.status.base.ETH0.LLIntf.keys()[0]}
                                        speed: ${this.value}
                        - Divider
                        - Text:
                            text: ${formatSpeed(getPort1Params.body.data.MaxBitRateSupported)}
                            styles:
                              padding: 0 16
                        - Divider
                        - Text:
                            text: ${formatSpeed(getPort1Params.body.data.CurrentBitRate)}
                            styles:
                              padding: 0 16
                        - Divider
                        - PortTableSentReceivedText
                        - Divider
                        - SentReceivedText:
                            inputs:
                              first: ${getPort1Usage.body.status.TxBytesFormatted}
                              second: ${getPort1Usage.body.status.RxBytesFormatted}
                        - Divider
                        - SentReceivedText:
                            inputs:
                              first: ${getPort1Usage.body.status.TxPackets}
                              second: ${getPort1Usage.body.status.RxPackets}
                        - Divider
                        - SentReceivedText:
                            inputs:
                              first: ${getPort1Usage.body.status.TxErrors}
                              second: ${getPort1Usage.body.status.RxErrors}
                        - Divider
                        - SentReceivedText:
                            inputs:
                              first: ${getPort1Usage.body.status.TxDropped}
                              second: ${getPort1Usage.body.status.RxDropped}
                        - Divider
                        - Text:
                            text: ${getPort1Usage.body.status.Multicast}
                            styles:
                              padding: 0 16

                  # column 3 - port 2 - ETH1
                  - Column:
                      styles:
                        gap: 10
                        padding: 12 0
                      children:
                        - PortTableHeader:
                            inputs:
                              port: 2
                              status: ${ensemble.storage.ethPorts["ETH1"].Active}
                        - Divider
                        - Text:
                            text: '${ensemble.storage.ethPorts["ETH1"].Active == true ? "r@kpn.active" : "r@kpn.inactive"}'
                            styles:
                              padding: 0 16
                        - Divider
                        - Row:
                            styles:
                              padding: 8 16
                              height: 58
                            children:
                              - Dropdown:
                                  value: ${getPort2Params.body.data.DuplexModeEnabled}
                                  items: ["Auto", "Half", "Full"]
                                  styles:
                                    expanded: true
                                  onChange:
                                    invokeAPI:
                                      name: setDuplexMode
                                      inputs: 
                                        port: ${getPort2Params.body.status.base.ETH2.LLIntf.keys()[0]}
                                        mode: ${this.value}
                        - Divider
                        - Row:
                            styles:
                              padding: 8 16
                              height: 58
                            children:
                              - Dropdown:
                                  value: ${getPort2Params.body.data.MaxBitRateEnabled}
                                  items: ${ getPortSpeedDropdownItems(getPort2Params.body.data.MaxBitRateSupported) }
                                  styles:
                                    expanded: true
                                  onChange:
                                    invokeAPI:
                                      name: setPortSpeed
                                      inputs: 
                                        port: ${getPort2Params.body.status.base.ETH1.LLIntf.keys()[0]}
                                        speed: ${this.value}
                        - Divider
                        - Text:
                            text: ${formatSpeed(getPort2Params.body.data.MaxBitRateSupported)}
                            styles:
                              padding: 0 16
                        - Divider
                        - Text:
                            text: ${formatSpeed(getPort2Params.body.data.CurrentBitRate)}
                            styles:
                              padding: 0 16
                        - Divider
                        - PortTableSentReceivedText
                        - Divider
                        - SentReceivedText:
                            inputs:
                              first: ${getPort2Usage.body.status.TxBytesFormatted}
                              second: ${getPort2Usage.body.status.RxBytesFormatted}
                        - Divider
                        - SentReceivedText:
                            inputs:
                              first: ${getPort2Usage.body.status.TxPackets}
                              second: ${getPort2Usage.body.status.RxPackets}
                        - Divider
                        - SentReceivedText:
                            inputs:
                              first: ${getPort2Usage.body.status.TxErrors}
                              second: ${getPort2Usage.body.status.RxErrors}
                        - Divider
                        - SentReceivedText:
                            inputs:
                              first: ${getPort2Usage.body.status.TxDropped}
                              second: ${getPort2Usage.body.status.RxDropped}
                        - Divider
                        - Text:
                            text: ${getPort2Usage.body.status.Multicast}
                            styles:
                              padding: 0 16


                  # column 4 - port 3 - ETH2
                  - Column:
                      styles:
                        gap: 10
                        padding: 12 0
                      children:
                        - PortTableHeader:
                            inputs:
                              port: 3
                              status: ${ensemble.storage.ethPorts["ETH2"].Active}
                        - Divider
                        - Text:
                            text: '${ensemble.storage.ethPorts["ETH2"].Active == true ? "r@kpn.active" : "r@kpn.inactive"}'
                            styles:
                              padding: 0 16
                        - Divider
                        - Row:
                            styles:
                              padding: 8 16
                              height: 58
                            children:
                              - Dropdown:
                                  value: ${getPort3Params.body.data.DuplexModeEnabled}
                                  items: ["Auto", "Half", "Full"]
                                  styles:
                                    expanded: true
                                  onChange:
                                    invokeAPI:
                                      name: setDuplexMode
                                      inputs: 
                                        port: ${getPort3Params.body.status.base.ETH2.LLIntf.keys()[0]}
                                        mode: ${this.value}
                        - Divider
                        - Row:
                            styles:
                              padding: 8 16
                              height: 58
                            children:
                              - Dropdown:
                                  value: ${getPort3Params.body.data.MaxBitRateEnabled}
                                  items: ${ getPortSpeedDropdownItems(getPort3Params.body.data.MaxBitRateSupported) }
                                  styles:
                                    expanded: true
                                  onChange:
                                    invokeAPI:
                                      name: setPortSpeed
                                      inputs: 
                                        port: ${getPort3Params.body.status.base.ETH2.LLIntf.keys()[0]}
                                        speed: ${this.value}
                        - Divider
                        - Text:
                            text: ${formatSpeed(getPort3Params.body.data.MaxBitRateSupported)}
                            styles:
                              padding: 0 16
                        - Divider
                        - Text:
                            text: ${formatSpeed(getPort3Params.body.data.CurrentBitRate)}
                            styles:
                              padding: 0 16
                        - Divider
                        - PortTableSentReceivedText
                        - Divider
                        - SentReceivedText:
                            inputs:
                              first: ${getPort3Usage.body.status.TxBytesFormatted}
                              second: ${getPort3Usage.body.status.RxBytesFormatted}
                        - Divider
                        - SentReceivedText:
                            inputs:
                              first: ${getPort3Usage.body.status.TxPackets}
                              second: ${getPort3Usage.body.status.RxPackets}
                        - Divider
                        - SentReceivedText:
                            inputs:
                              first: ${getPort3Usage.body.status.TxErrors}
                              second: ${getPort3Usage.body.status.RxErrors}
                        - Divider
                        - SentReceivedText:
                            inputs:
                              first: ${getPort3Usage.body.status.TxDropped}
                              second: ${getPort3Usage.body.status.RxDropped}
                        - Divider
                        - Text:
                            text: ${getPort3Usage.body.status.Multicast}
                            styles:
                              padding: 0 16
                  # column 5 - port 4 - ETH3
                  - Port4Column
            - Spacer:
                styles:
                  size: 8
            - Divider
            - STPProtocol


Port4Column:
  body:
    Column:
      id: port4Column
      styles:
        gap: 10
        padding: 12 0
        borderRadius: 8
        borderColor: '${ guestPortSwitch.value == true ? 0xFF0077CC : ""}'
        backgroundColor: '${ guestPortSwitch.value == true ? 0x220077CC : "white"}'
      children:
        # header
        - Column:
            styles:
              height: 58
              gap: 2
            children:
              - Row:
                  styles:
                    padding: 0 16
                    gap: 4
                    crossAxis: center
                  children:
                    - Icon:
                        name: 0xe923
                        library: kpnUI
                        styles:
                          size: 18
                          color: '${ ensemble.storage.ethPorts["ETH3"].Active == true ? 0xFF39FF14 : 0xFFD3D3D3}'
                    - Text: 
                        text: r@kpn.port 4
                        styles:
                          textStyle:
                            fontWeight: bold
                            color: '${ ensemble.storage.ethPorts["ETH3"].Active == true ? 0xFF535353 : 0xFF939393}'
              - Column:
                  styles:
                    width: 200
                    padding: 0 8
                  children:
                    - Switch:
                        id: guestPortSwitch
                        trailingText: r@kpn.guest_network
                        value: ${getTopologyGuest.body.eth3AssignedToGuest}
                        onChange:
                          invokeAPI:
                            name: removeIntf
                            inputs:
                              port: ETH3
                              intf: "${this.value == true ? 'lan' : 'guest'}"
                            onResponse:
                              invokeAPI:
                                name: addIntf
                                inputs:
                                  port: ETH3
                                  intf: "${this.value == true ? 'guest' : 'lan'}"
        
        - Divider
        - Text:
            text: '${ensemble.storage.ethPorts["ETH3"].Active == true ? "r@kpn.active" : "r@kpn.inactive"}'
            styles:
              padding: 0 16
        - Divider
        - Row:
            styles:
              padding: 8 16
              height: 58
            children:
              - Dropdown:
                  value: ${getPort4Params.body.data.DuplexModeEnabled}
                  items: ["Auto", "Half", "Full"]
                  styles:
                    expanded: true
                  onChange:
                    invokeAPI:
                      name: setDuplexMode
                      inputs: 
                        port: ${getPort4Params.body.status.base.ETH3.LLIntf.keys()[0]}
                        mode: ${this.value}
        - Divider
        - Row:
            styles:
              padding: 8 16
              height: 58
            children:
              - Dropdown:
                  value: ${getPort4Params.body.data.MaxBitRateEnabled}
                  items: ${ getPortSpeedDropdownItems(getPort4Params.body.data.MaxBitRateSupported) }
                  styles:
                    expanded: true
                  onChange:
                    invokeAPI:
                      name: setPortSpeed
                      inputs: 
                        port: ${getPort4Params.body.status.base.ETH3.LLIntf.keys()[0]}
                        speed: ${this.value}

        - Divider
        - Text:
            text: ${formatSpeed(getPort4Params.body.data.MaxBitRateSupported)}
            styles:
              padding: 0 16
        - Divider
        - Text:
            text: ${formatSpeed(getPort4Params.body.data.CurrentBitRate)}
            styles:
              padding: 0 16
        - Divider
        - PortTableSentReceivedText
        - Divider
        - SentReceivedText:
            inputs:
              first: ${getPort4Usage.body.status.TxBytesFormatted}
              second: ${getPort4Usage.body.status.RxBytesFormatted}
        - Divider
        - SentReceivedText:
            inputs:
              first: ${getPort4Usage.body.status.TxPackets}
              second: ${getPort4Usage.body.status.RxPackets}
        - Divider
        - SentReceivedText:
            inputs:
              first: ${getPort4Usage.body.status.TxErrors}
              second: ${getPort4Usage.body.status.RxErrors}
        - Divider
        - SentReceivedText:
            inputs:
              first: ${getPort4Usage.body.status.TxDropped}
              second: ${getPort4Usage.body.status.RxDropped}
        - Divider
        - Text:
            text: ${getPort4Usage.body.status.Multicast}
            styles:
              padding: 0 16

                  
STPProtocol:
  onLoad:
    invokeAPI:
      name: getSTPStatus
  body:
    Column:
      children:
        - GreenSubtitle:
            inputs:
              title: r@kpn.local_network.stp_protocol
        - Switch:
            id: stpProtocolSwitch
            trailingText: r@kpn.local_network.stp_protocol_switch
            value: ${getSTPStatus.body.status.STPEnable}
            onChange:
              invokeAPI:
                name: setSTPStatus
                onResponse:
                  showToast:
                    widget: SuccessToast
                    styles:
                      padding: 0
                    options:
                      type: custom
                      duration: 15
                      dismissible: true
                      alignment: center
                onError:
                  showToast:
                    message: r@kpn.error
                    options:
                      dismissible: true
                      type: error
                      duration: 15
                      alignment: center


API:
  getWANInfo:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getWANInfo }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NMC"
      "method": "getWANStatus"
      "parameters": { }

  getDeviceSelf:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getDeviceSelf }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices"
      "method": "get"
      "parameters": {
        "expression": "self && wan && hgw"
      }

  getInactiveDevicesList:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse:
      body: ${ mock_getInactiveDevices }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices"
      "method": "get"
      "parameters":
        "expression": "not interface and not self and not voice and .Active==false"

  getInactiveDevices:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse:
      body: ${ mock_getInactiveDevices }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices"
      "method": "get"
      "parameters":
        "expression": "not interface and not self and not voice and .Active==false"
    onResponse: |
      //@code
      
      var filteredDevices = [];

      response.body.status.map(function(d) {
        // exclude alternative macs
        if (ensemble.storage.alternative_devices_macs.includes(d.Key) == false) {
          // reformat last seen
          d.LastConnection = convertUtcToGmtPlus1(d.LastConnection);
          d.NameSortable = d.Name.toLowerCase();
          filteredDevices.push(d);
        }
      });

      response.body.status = filteredDevices;


  getAllDevices:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse:
      body: ${ mock_getAllDevices }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices"
      "method": "get"
      "parameters": {
        "expression": "not interface and not self and not voice"
      }

  getPairedDevices:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices"
      "method": "get"
      "parameters": {
        "expression": "not interface and not self and ssw and .Active==true",
        "flags": "full_links"
      }
    onResponse: |
      //@code
      var apKeys = [];
      var aps = [];
      response.body.status.map(function(d) {
        apKeys.push(d.Key);
        if (d.ULinks.length > 0) {
          if (d.ULinks[0].Type == 'wifi')  {
            d.connectionDetails = getDeviceConnectionDetails(d.ULinks[0], d.InterfaceName);
            d.downloadUploadSpeed = getWifiSpeed(d.MaxDownlinkRateReached,d.MaxUplinkRateReached);
          } else if (d.ULinks[0].Type == 'ethernet')  {
            d.connectionDetails = getDeviceConnectionDetails(d.ULinks[0], d.InterfaceName);
          } else {
            var upperLinkDevices = [];
            upperLinkDevices = response.body.status.ethernet.filter(function(u) {
              if (u.Key == d.ULinks[0].Key)
                return true;
              else
                return false;
            });
            if (upperLinkDevices.length > 0) {
              if (upperLinkDevices[0].ULinks.length > 0 )
                d.connectionDetails = getDeviceConnectionDetails(upperLinkDevices[0].ULinks[0], '');
            }
          }
          
          // create an empty array to be populated with child devices
          d.children = [];
        }
        aps.push(d);
      });
      
      setAccessPointsKeys(apKeys);
      setAccessPoints(aps);

  getInactivePairedDevices:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices"
      "method": "get"
      "parameters": {
        "expression": "not interface and not self and ssw and .Active==false",
        "flags": "full_links"
      }

  getActiveDevices:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getActiveDevices }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices"
      "method": "get"
      "parameters": {
        "expression": {
          "wifi": "not interface and not self and wifi and .Active==true",
          "ethernet": "not interface and not self and eth and .Active==true"
        },
        "flags": "full_links"
      }
    onResponse: |
      //@code
      var allDevices = response.body.status.wifi.concat(response.body.status.ethernet);
      
      var apKeys = getAccessPointsKeys();
      var aps = getAccessPoints();
      var directDevices = [];
      
      aps.map(function(ap) { ap.children = []; });
      
      // regex to validate devices connected to repeater
      // example of expected format: _C4:E5:32:13:C7:BA_vap2g0priv
      var regex = /^_[A-F\d]{2}:[A-F\d]{2}:[A-F\d]{2}:[A-F\d]{2}:[A-F\d]{2}:[A-F\d]{2}_[^_]+$/;
      
      // get ghost devices mac to exclude
      var ghostDevices = [];
      allDevices.map(function(d) {
        if (d.Alternative != null) {
          if (d.Alternative.length > 0) {
            var ghostDeviceMac = getGhostDeviceMac(d.Alternative[0]);
            ghostDevices.push(ghostDeviceMac);
          }
        }
      });
      
      allDevices.map(function(d) {
        // filter out ghost devices
        if (ghostDevices.indexOf(d.Key) == -1 && d.ULinks.length > 0) {
      
          if (d.ULinks[0].Type == 'wifi' || d.ULinks[0].Type == 'wifiguest') 
            d.downloadUploadSpeed = getWifiSpeed(d.MaxDownlinkRateReached,d.MaxUplinkRateReached);
      
          // clean the key in case device is connected to a repeater
          if (regex.test(d.ULinks[0].Key) == true)
            var processedKey = d.ULinks[0].Key.split('_')[2];
          else
            var processedKey = d.ULinks[0].Key;

          var processedULink = {
            "Key": processedKey,
            "Type": d.ULinks[0].Type
          }
          d.connectionDetails = getDeviceConnectionDetails(processedULink, d.InterfaceName);
      
          // reformat last seen
          d.LastConnection = convertUtcToGmtPlus1(d.LastConnection);

          // convert IP to integer for sorting
          d.SortableIp = ipToInteger(d.IPAddress);
      
          // set source label
          if (d.IPAddressSource == 'Static') {
            d.IPAddressSourceLabel = 'r@kpn.local_network.ip_type_static';
          } else {
            if ( getStaticLeases.body.leasesList.includes(d.IPAddress))
              d.IPAddressSourceLabel = 'r@kpn.local_network.ip_type_reserved';
            else
              d.IPAddressSourceLabel = 'r@kpn.local_network.ip_type_dynamic';
          }
      
          if (regex.test(d.ULinks[0].Key) == true) {
            var pdKey = d.ULinks[0].Key.split('_')[1];
            var parentIndex = apKeys.indexOf(pdKey);
            if (parentIndex > -1)
              aps[parentIndex].children.push(d);
            else
              directDevices.push(d);
          } else if (accessPointsKeys.contains(d.Key)) {
            // do nothing as the access point is already added to the accessPoints array
          } else {
            directDevices.push(d);
          }
        }
      });
      
      setAccessPoints(aps);
      response.body.directDevices = directDevices;
      response.body.accessPoints = aps;
      response.body.allDevices = allDevices;
      


  getDhcpSettings:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getDhcpSettingsdefault }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "DHCPv4.Server"
      "method": "getDHCPServerPool"
      "parameters":
        "id": "default"
  
  getDHCPIPv4Authorative:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getDHCPIPv4Authorative }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NetMaster.LAN.default.Bridge.lan.DHCPv4"
      "method": "get"
      "parameters": { }

  setDhcpIPv4Settings:
    inputs: [ dnsServers ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NetMaster.LAN.default.Bridge.lan"
      "method": "setIPv4"
      "parameters":
        "Address": "${ipAddressInput.value}"
        "PrefixLength": "${getSubnetMaskBit(subnetMastInput.value)}"
        "DHCPEnable": ${dhcpServerSwitch.value}
        "DHCPMinAddress": "${poolStart.value}"
        "DHCPMaxAddress": "${poolEnd.value}"
        "LeaseTime": "${leaseTimeInput.value}"
        "DHCPAuthoritative": "${dhcpAuthoritativeSwitch.value}"
        "DNSServers": "${dnsServers}"

  getDhcpHostName:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse:
      body: ${ mock_getDhcpHostName }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NetMaster.LAN.default.Bridge.lan.HostName"
      "method": "get"
      "parameters": {}


  setDhcpHostName:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NetMaster.LAN.default.Bridge.lan"
      "method": "setHostName"
      "parameters": 
        "Key": "default"
        "HostName": "${hostNameInput.value}"
        "IPVersion": 0

  setDhcpDomainName:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NetMaster.LAN.default.Bridge.lan"
      "method": "set"
      "parameters":
        "DomainName": "${domainInput.value}"

  getGuestDhcpSettings:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getGuestDhcpSettings }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "DHCPv4.Server"
      "method": "getDHCPServerPool"
      "parameters":
        "id": "guest"

  setGuestDhcpSettings:
    inputs: [ dnsServers ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NetMaster.LAN.default.Bridge.guest"
      "method": "setIPv4"
      "parameters":
        "Address": "${ipAddressInputGuest.value}"
        "PrefixLength": "${getSubnetMaskBit(subnetMastInputGuest.value)}"
        "DHCPMinAddress": "${dhcpMinAddressGuest.value}"
        "DHCPMaxAddress": "${dhcpMaxAddressGuest.value}"
        "DHCPEnable": "${dhcpServerSwitchGuest.value}"
        "LeaseTime": "${leaseTimeInputGuest.value}"
        "DNSServers": "${dnsServers}"


  setDhcpDnsServer:
    inputs:
      - dnsServer
      - address
      - enable
      - minAddress
      - maxAddress
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NetMaster.LAN.default.Bridge.lan"
      "method": "setIPv4"
      "parameters":
        "DNSServers": "${dnsServer}"
        "Address": "${address}"
        "DHCPEnable": "${enable}"
        "DHCPMinAddress": "${minAddress}"
        "DHCPMaxAddress": "${maxAddress}"

  getDnsRoutes:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getDnsRoutes }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "DNS.Server.Route"
      "method": "get"
      "parameters": {}

  getDnsMode:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getDnsMode }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "DNS"
      "method": "get"
      "parameters": {}


  setWifiStatus:
    inputs: [status]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NMC.Wifi"
      "method": "set"
      "parameters":
        "Enable": "${status}"
        "Status": "${status}"

  toggleInterface:
    inputs: [interface, status]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NeMo.Intf.${interface}"
      "method": "set"
      "parameters":
        "Enable": "${status}"

  setGuestWifiStatus:
    inputs: [ status ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NMC.Guest"
      "method": "set"
      "parameters":
        "Enable": "${status}"

  getDynDnsHosts:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getDynDnsHosts }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "DynDNS"
      "method": "getHosts"
      "parameters": {}

  setDynDnsHost:
    inputs: [service, username, hostname, password]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      inputs: [service, username, hostname, password]
      "service": "DynDNS"
      "method": "addHost"
      "parameters":
        "service": "${service}"
        "username": "${username}"
        "hostname": "${hostname}"
        "password": "${password}"

  setGlobalEnable:
    inputs:
      - enable
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "DynDNS"
      "method": "setGlobalEnable"
      "parameters":
        "enable": ${enable}

  deleteDynDnsHost:
    inputs: [hostname]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "DynDNS"
      "method": "delHost"
      "parameters":
        "hostname": "${hostname}"

  getDHCPLeases:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getDHCPLeases }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "DHCPv4.Server.Pool.default"
      "method": "getLeases"
      "parameters": {}
    onResponse: |
      var data = [];
      for (key in getDHCPLeases.body.status.default) {
        var leaseItem = getDHCPLeases.body.status.default[key];
        // get matching device's name
        getAllDevices.body.status.map(function(device) {
          if (leaseItem.MACAddress == device.Key.toLowerCase()) {
            leaseItem.DeviceName = device.Name;
            leaseItem.DeviceNameSortable = device.Name.toLowerCase();
          }
            
        });
        // convert IP to integer for sorting
        leaseItem.SortableIp = ipToInteger(leaseItem.IPAddress);

        data.push(leaseItem);
      }
      getDHCPLeases.body.status.data = data;

  getGuestDHCPLeases:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getGuestDHCPLeases }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "DHCPv4.Server.Pool.guest"
      "method": "getLeases"
      "parameters": {}


  getStaticLeases:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getStaticLeases }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "DHCPv4.Server.Pool.default"
      "method": "getStaticLeases"
      "parameters": ""
    onResponse: |
      //@code
      var leasesList = [];
      response.body.status.map(function (i) {
        leasesList.push(i.IPAddress);
      });
      response.body.leasesList = leasesList;
      

  addStaticLeases:
    inputs: [ macAddress, ipAddress ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "DHCPv4.Server.Pool.default"
      "method": "addStaticLease"
      "parameters":
        "MACAddress": "${macAddress}"
        "IPAddress": "${ipAddress}"

  setStaticLease:
    inputs: [ macAddress, ipAddress ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "DHCPv4.Server.Pool.default"
      "method": "setStaticLease"
      "parameters":
        "MACAddress": "${macAddress}"
        "IPAddress": "${ipAddress}"

  deleteStaticLeases:
    inputs: [ macAddress ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "DHCPv4.Server.Pool.default"
      "method": "deleteStaticLease"
      "parameters":
        "MACAddress": "${macAddress}"

  getIpv6Status:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getIpv6Status }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NetMaster"
      "method": "get"
      "parameters": ""

  setIpv6Status:
    inputs: [ type ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NetMaster"
      "method": "set"
      "parameters":
        "EnableIPv6": 1
        "IPv6PrefixMode": "${type}"


  setIpv6PrefixDelegation:
    inputs: [ status ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NetMaster.LAN.default.Bridge.lan"
      "method": "setIPv6Configuration"
      "parameters":
        "Name": "lan"
        "DHCPIAPDEnable": ${status}

  setLanIpv6PrefixDelegationLength:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NetMaster.LAN.default.Bridge.lan.IPv6.lan.DHCPv6"
      "method": "set"
      "parameters":
        "IAPDPrefixLength": 56

  setGuestIpv6PrefixDelegationLength:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NetMaster.LAN.default.Bridge.guest.IPv6.guest.DHCPv6"
      "method": "set"
      "parameters":
        "IAPDPrefixLength": 56

  getDevicesSchedule:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getDevicesSchedule }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Scheduler"
      "method": "getCompleteSchedules"
      "parameters":
        "type": "ToD"

    onResponse: |
      var devicesWithTimeLimit = ensemble.storage.devicesWithParentalControl; 
      response.body.data.scheduleInfo.map(function(s) {
        // always blocked
        if (s.override == "Disable")
          devicesWithTimeLimit[s.ID] = "Block";

        // blocked during certain hours
        if (s.override == "" && s.schedule.length > 0) 
          devicesWithTimeLimit[s.ID] = "Weekly";
      });

      ensemble.storage.devicesWithParentalControl = devicesWithTimeLimit;


  removeDevice:
    inputs: [ mac ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices"
      "method": "destroyDevice"
      "parameters": {
        "key": "${mac}"
      }
      

  removeAlInactiveDevices:
    inputs: [ mac ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices"
      "method": "destroyDevice"
      "parameters": {
        "key": "${mac}"
      }

  getDeviceDetails:
    inputs: [ mac ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getDeviceDetails }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices.Device.${mac}"
      "method": "get"
      "parameters": { "flags": "full_links" }
    onResponse: |
      //@code
      var ULink = response.body.status.ULinks[0];
      
      var connectionDetails = {
        'type': '-',
        'typeLabel': '-',
        'networklabel': '-',
        'speed': '-'
      }
      connectionDetails = getDeviceConnectionDetails(ULink, response.body.status.InterfaceName);
      
      if (ULink.Type == 'wifi' || ULink.Type == 'wifiguest' )
        response.body.status.downloadUploadSpeed = getWifiSpeed(response.body.status.MaxDownlinkRateReached,response.body.status.MaxUplinkRateReached);

      // set connection type      
      response.body.status.connectionDetails = connectionDetails;
      
      // set randomized mac true/false
      response.body.status.macRandomized = isMacRandomized(response.body.status.Key);
      
      // reformat last seen
      response.body.status.LastConnection = convertUtcToGmtPlus1(response.body.status.LastConnection);


      // set source label
      if (response.body.status.IPAddressSource == 'Static') {
        response.body.status.IPAddressSourceLabel = 'r@kpn.local_network.ip_type_static';
      } else {
        if ( getStaticLeases.body.leasesList.includes(response.body.status.IPAddress))
          response.body.status.IPAddressSourceLabel = 'r@kpn.local_network.ip_type_reserved';
        else
          response.body.status.IPAddressSourceLabel = 'r@kpn.local_network.ip_type_dynamic';
      }

  setDeviceName:
    inputs: [mac, name]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices.Device.${mac}"
      "method": "setName"
      "parameters": {
        "name": "${name}"
      }

  setDeviceType:
    inputs: [mac, type]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices.Device.${mac}"
      "method": "setType"
      "parameters": {
        "type": "${type}"
      }

  getDeviceSchedule:
    inputs: [ mac ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getDeviceSchedule }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Scheduler"
      "method": "getSchedule"
      "parameters": {
        "type": "ToD",
        "ID": "${mac}"
      }

  toggleDeviceSchedule:
    inputs: [ mac, status ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Scheduler"
      "method": "overrideSchedule"
      "parameters": {
        "type": "ToD",
        "ID": "${mac}",
        "override": "${status}"
      }

  setDeviceSchedule:
    inputs: [ mac, schedule, override ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Scheduler"
      "method": "addSchedule"
      "parameters":
        "type": "ToD"
        "info":
          "base": "Weekly"
          "def": "Enable"
          "ID": "${mac}"
          "schedule": "${schedule}"
          "enable": true
          "override": "${override}"
          
  deleteDeviceSchedule:
    inputs: [ mac ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Scheduler"
      "method": "removeSchedules"
      "parameters":
        "type": "ToD"
        "ID":
          - "${mac}"

  configureMST:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "ToD"
      "method": "configureMST"
      "parameters":
        "enable": true
        "granularity": 5

  listMST:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_listMST }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "ToD"
      "method": "listMST"
      "parameters": {}
    onResponse: |
      response.body.data.ids.map(function(id) {
        ensemble.invokeAPI('getMST', { 'id': id });
      });

  getMST:
    inputs:
      - id
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getMST }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "ToD"
      "method": "getMST"
      "parameters":
        "id": "${id}"
    onResponse:
      executeCode:
        body: |
          var devicesWithTimeLimit = ensemble.storage.devicesWithParentalControl;
          if (response.body.data.enable) {
            var mac = addColonsToMac(id);
            devicesWithTimeLimit[mac] = "Time";
          }

          ensemble.storage.devicesWithParentalControl = devicesWithTimeLimit;

  unPairExtender:
    inputs: [ mac ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "SAHPairing"
      "method": "unpair"
      "parameters":
        "CN": "${mac}"

  # ethernet ports usage
  getAllPortParams:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NeMo.Intf.lan"
      "method": "getMIBs"
      "parameters":
        "mibs": "eth"

  getPort1Params:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getPort1Params }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NeMo.Intf.ETH0"
      "method": "getMIBs"
      "parameters": {}
    onResponse: |
      var ethObj = response.body.status.eth;
      response.body.data = {};
      for (key in ethObj) {
        response.body.data.LLIntf = key;
        response.body.data.CurrentBitRate = ethObj[key].CurrentBitRate;
        response.body.data.MaxBitRateSupported = ethObj[key].MaxBitRateSupported;
        response.body.data.MaxBitRateEnabled = ethObj[key].MaxBitRateEnabled;
        response.body.data.CurrentDuplexMode = ethObj[key].CurrentDuplexMode;
        response.body.data.DuplexModeEnabled = ethObj[key].DuplexModeEnabled;
      }

  getPort1Usage:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getPort1Usage }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NeMo.Intf.ETH0"
      "method": "getNetDevStats"
      "parameters": {}
    onResponse: |
      //@code
      var RxBytesFormatted = formatBytes(response.body.status.RxBytes);
      response.body.status.RxBytesFormatted = RxBytesFormatted;

      var TxBytesFormatted = formatBytes(response.body.status.TxBytes);
      response.body.status.TxBytesFormatted = TxBytesFormatted;


  getPort2Params:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getPort2Params }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NeMo.Intf.ETH1"
      "method": "getMIBs"
      "parameters": {}
    onResponse: |
      var ethObj = response.body.status.eth;
      response.body.data = {};
      for (key in ethObj) {
        response.body.data.LLIntf = key;
        response.body.data.CurrentBitRate = ethObj[key].CurrentBitRate;
        response.body.data.MaxBitRateSupported = ethObj[key].MaxBitRateSupported;
        response.body.data.MaxBitRateEnabled = ethObj[key].MaxBitRateEnabled;
        response.body.data.CurrentDuplexMode = ethObj[key].CurrentDuplexMode;
        response.body.data.DuplexModeEnabled = ethObj[key].DuplexModeEnabled;
      }

  getPort2Usage:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getPort2Usage }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NeMo.Intf.ETH1"
      "method": "getNetDevStats"
      "parameters": {}
    onResponse: |
      //@code
      var RxBytesFormatted = formatBytes(response.body.status.RxBytes);
      response.body.status.RxBytesFormatted = RxBytesFormatted;

      var TxBytesFormatted = formatBytes(response.body.status.TxBytes);
      response.body.status.TxBytesFormatted = TxBytesFormatted;


  getPort3Params:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getPort3Params }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NeMo.Intf.ETH2"
      "method": "getMIBs"
      "parameters": {}
    onResponse: |
      var ethObj = response.body.status.eth;
      response.body.data = {};
      for (key in ethObj) {
        response.body.data.LLIntf = key;
        response.body.data.CurrentBitRate = ethObj[key].CurrentBitRate;
        response.body.data.MaxBitRateSupported = ethObj[key].MaxBitRateSupported;
        response.body.data.MaxBitRateEnabled = ethObj[key].MaxBitRateEnabled;
        response.body.data.CurrentDuplexMode = ethObj[key].CurrentDuplexMode;
        response.body.data.DuplexModeEnabled = ethObj[key].DuplexModeEnabled;
      }



  getPort3Usage:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getPort3Usage }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NeMo.Intf.ETH2"
      "method": "getNetDevStats"
      "parameters": {}
    onResponse: |
      //@code
      var RxBytesFormatted = formatBytes(response.body.status.RxBytes);
      response.body.status.RxBytesFormatted = RxBytesFormatted;

      var TxBytesFormatted = formatBytes(response.body.status.TxBytes);
      response.body.status.TxBytesFormatted = TxBytesFormatted;


  getPort4Params:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getPort4Params }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NeMo.Intf.ETH3"
      "method": "getMIBs"
      "parameters": {}
    onResponse: |
      var ethObj = response.body.status.eth;
      response.body.data = {};
      for (key in ethObj) {
        response.body.data.LLIntf = key;
        response.body.data.CurrentBitRate = ethObj[key].CurrentBitRate;
        response.body.data.MaxBitRateSupported = ethObj[key].MaxBitRateSupported;
        response.body.data.MaxBitRateEnabled = ethObj[key].MaxBitRateEnabled;
        response.body.data.CurrentDuplexMode = ethObj[key].CurrentDuplexMode;
        response.body.data.DuplexModeEnabled = ethObj[key].DuplexModeEnabled;
      }

  getPort4Usage:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getPort4Usage }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NeMo.Intf.ETH3"
      "method": "getNetDevStats"
      "parameters": {}
    onResponse: |
      //@code
      var RxBytesFormatted = formatBytes(response.body.status.RxBytes);
      response.body.status.RxBytesFormatted = RxBytesFormatted;

      var TxBytesFormatted = formatBytes(response.body.status.TxBytes);
      response.body.status.TxBytesFormatted = TxBytesFormatted;
  

  setSTPStatus:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NeMo.Intf.bridge"
      "method": "set"
      "parameters":
        "STPEnable": '${stpProtocolSwitch.value}'

  getSTPStatus:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getSTPStatus }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NeMo.Intf.bridge"
      "method": "get"
      "parameters": {}

  getSswLed:
    inputs: [ mac ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getSswLed }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices.Device.${mac}.SSW"
      "method": "execAPI"
      "parameters":
        "service": "LEDs.LED"
        "method": "get"

  setSswLed:
    inputs: [ mac, brightness ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices.Device.${mac}.SSW"
      "method": "execAPI"
      "parameters":
        "service": "LEDs.LED.Root"
        "method": "set"
        "parameters":
          "Brightness": "${brightness}"



  getSsw2gRadio:
    inputs: [ mac ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getSsw2gRadio }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices.Device.${mac}.SSW"
      "method": "execAPI"
      "parameters":
        "service": "NeMo.Intf.rad2g0"
        "method": "get"
        "Parameters": ""

  getSsw5gRadio:
    inputs: [ mac ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getSsw5gRadio }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices.Device.${mac}.SSW"
      "method": "execAPI"
      "parameters":
        "service": "NeMo.Intf.rad5g0"
        "method": "get"
        "Parameters": ""

  getTopology:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getTopology }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices.Device.lan"
      "method": "topology"
      "parameters":
        "expression": "not logical"
        "flags": "no_recurse|no_actions"
    onResponse: |
      var processedDevices = processParentInterfaces(response.body.status[0]);

      response.body.activeDirectDevices = processedDevices.activeDirectDevices;
      response.body.activeExtenders = processedDevices.activeExtenders;
      response.body.inactiveExtenders = processedDevices.inactiveExtenders;
      response.body.activeHomeplugs = processedDevices.activeHomeplugs;


  getTopologyGuest:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getTopologyGuest }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices.Device.guest"
      "method": "topology"
      "parameters":
        "expression": "not logical"
        "flags": "no_recurse|no_actions"
    onResponse: |
      var processedDevices = processParentInterfaces(response.body.status[0]);

      response.body.activeDirectDevices = processedDevices.activeDirectDevices;
      response.body.activeExtenders = processedDevices.activeExtenders;
      response.body.inactiveExtenders = processedDevices.inactiveExtenders;

      var eth3AssignedToGuest = false;

      response.body.status[0].Children.map(function (intf) {
        if (intf.Key == 'ETH3')
          eth3AssignedToGuest = true;
      });

      response.body.eth3AssignedToGuest = eth3AssignedToGuest;


  getSSWs:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getSSWs }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices"
      "method": "get"
      "parameters":
        "expression": "not interface and not self and ssw"
        "flags": "alternatives"
    onResponse: |
      ensemble.storage.extenderCount = response.body.status.length;
      ensemble.storage.alternative_devices_macs = [];
      var inactiveExtenders = []; 
      response.body.status.map(function (d) {
        if (d.Alternative == null ) {
          ensemble.debug("No alternative mac");
        } else {
          d.Alternative.map(function(a) {
            ensemble.storage.alternative_devices_macs.push(a.Key);
          });
        }

        if (d.Active == false)
          inactiveExtenders.push(d);
      });

      response.body.inactiveExtenders = inactiveExtenders;

  setDuplexMode:
    inputs: [port, mode]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NeMo.Intf.${port}"
      "method": "set"
      "parameters":
        "DuplexModeEnabled": "${mode}"
    onResponse:
      showToast:
        widget: SuccessToast
        styles:
          padding: 0
        options:
          type: custom
          duration: 5
          dismissable: true
          alignment: center
    onError:
      showToast:
        message: r@kpn.error
        options:
          dismissable: true
          type: error
          duration: 15
          alignment: center


  setPortSpeed:
    inputs: [port, speed]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NeMo.Intf.${port}"
      "method": "set"
      "parameters":
        "MaxBitRateEnabled": ${speed}
    onResponse:
      showToast:
        widget: SuccessToast
        styles:
          padding: 0
        options:
          type: custom
          duration: 5
          dismissable: true
          alignment: center
    onError:
      showToast:
        message: r@kpn.error
        options:
          dismissable: true
          type: error
          duration: 15
          alignment: center


  removeIntf:
    inputs: [port, intf]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NetMaster.LAN.default.Bridge.${intf}"
      "method": "removeIntf"
      "parameters":
        "Intf": "${port}"

  addIntf:
    inputs: [port, intf]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NetMaster.LAN.default.Bridge.${intf}"
      "method": "addIntf"
      "parameters":
        "Intf": "${port}"
    onResponse:
      showToast:
        widget: SuccessToast
        styles:
          padding: 0
        options:
          type: custom
          duration: 15
          dismissable: true
          alignment: center
    onError:
      showToast:
        message: r@kpn.error
        options:
          dismissable: true
          type: error
          duration: 15
          alignment: center

  setSsw2gRadioAutoChannel:
    inputs: [mac, bandwidth, standard]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices.Device.${mac}.SSW"
      "method": "execAPI"
      "parameters":
        "service": "NeMo.Intf.rad2g0"
        "method": "setWLANConfig"
        "parameters":
          "mibs":
            "wlanradio":
              "rad2g0":
                "AutoChannelEnable": true
                "OperatingChannelBandwidth": "${bandwidth}"
                "OperatingStandards": "${standard}"

  setSsw2gRadioStaticChannel:
    inputs: [mac, channel, bandwidth, standard]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices.Device.${mac}.SSW"
      "method": "execAPI"
      "parameters":
        "service": "NeMo.Intf.rad2g0"
        "method": "setWLANConfig"
        "parameters":
          "mibs":
            "wlanradio":
              "rad2g0":
                "AutoChannelEnable": false
                "Channel": "${channel}"
                "OperatingChannelBandwidth": "${bandwidth}"
                "OperatingStandards": "${standard}"

  setSsw5gRadioAutoChannel:
    inputs: [mac, bandwidth, standard]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices.Device.${mac}.SSW"
      "method": "execAPI"
      "parameters":
        "service": "NeMo.Intf.rad5g0"
        "method": "setWLANConfig"
        "parameters":
          "mibs":
            "wlanradio":
              "rad5g0":
                "AutoChannelEnable": true
                "OperatingChannelBandwidth": "${bandwidth}"
                "OperatingStandards": "${standard}"

  setSsw5gRadioStaticChannel:
    inputs: [mac, channel, bandwidth, standard]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices.Device.${mac}.SSW"
      "method": "execAPI"
      "parameters":
        "service": "NeMo.Intf.rad5g0"
        "method": "setWLANConfig"
        "parameters":
          "mibs":
            "wlanradio":
              "rad5g0":
                "AutoChannelEnable": false
                "Channel": "${channel}"
                "OperatingChannelBandwidth": "${bandwidth}"
                "OperatingStandards": "${standard}"

  getWifiStatus:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getWifiStatus }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NMC.Wifi"
      "method": "get"
      "parameters": {}

  deleteDeviceMST:
    inputs:
      - id
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "ToD"
      "method": "deleteMST"
      "parameters":
        "id": "${id}"


  getStatsMST:
    inputs:
      - id
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "ToD"
      "method": "statsMST"
      "parameters":
        "id": "${id}"

  setMST:
    inputs:
      - id
      - mac
      - enable
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "ToD"
      "method": "setMST"
      "parameters":
          "id": "${id}"
          "subject": "MAC:${mac}"
          "enable": "${ enable }"
          "allowedTime":
            "Mon": ${parseInt(maxTime_mon.value * 60)}
            "Tue": ${parseInt(maxTime_tue.value * 60)}
            "Wed": ${parseInt(maxTime_wed.value * 60)}
            "Thu": ${parseInt(maxTime_thu.value * 60)}
            "Fri": ${parseInt(maxTime_fri.value * 60)}
            "Sat": ${parseInt(maxTime_sat.value * 60)}
            "Sun": ${parseInt(maxTime_sun.value * 60)}
    onResponse:
      invokeAPI:
        name: deleteDeviceSchedule
        inputs:
          mac: ${mac}


Global: |
  //@code
  
  // store MAC address of paired Access points
  var accessPointsKeys = [];
  
  // store device details of paired Access points
  // as we get devices, populate each access point with its children
  var accessPoints = [];
  
  // use index when deleting devices on a timer
  var inactiveDeviceIndex = 0;
  
  function clearAccessPoints() {
    accessPointsKeys = [];
    accessPoints = [];
  }

  function setAccessPointsKeys (arr) {
    accessPointsKeys = arr;
  }
  
  function getAccessPointsKeys () {
    return(accessPointsKeys);
  }
  
  function setAccessPoints (arr) {
    accessPoints = arr;
  }
  
  function getAccessPoints () {
    return(accessPoints);
  }
  
  function incrementInactiveDeviceIndex () {
    inactiveDeviceIndex = inactiveDeviceIndex + 1;
  }
  
  function getInactiveDeviceIndex () {
    return (inactiveDeviceIndex);
  }

  
  function getDeviceConnectionDetails (ULink, InterfaceName) {
    var connectionDetails = {
      'type': '-',
      'typeLabel': '-',
      'networklabel': '-'
    }


    // handle devices connected to extenders
    // example format: "Key": "_C0:D7:AA:25:AA:0F_ETH1"
    if (ULink.Key.split("_").length > 1) {
      var keyArr = ULink.Key.split("_");
      if (keyArr.length == 3)
        ULink.Key = keyArr[2];
    }

    if (ULink.Type == "ethernet") {
      var portNumber = reformatEthernetPort(ULink.Key);
      connectionDetails = {
        'type': 'Ethernet',
        'typeLabel': 'r@kpn.local_network.connection_type_ethernet',
        'networklabel': portNumber
      }
    } else if (ULink.Type == "wifi" || ULink.Type == "wifiguest" ) {
      connectionDetails = {
        'type': 'WiFi',
        'typeLabel': 'r@kpn.local_network.connection_type_wifi',
        'networklabel': ensemble.storage.get(ULink.Key)
      }
    } else if (ULink.Type == "HNID") {
      var portNumber = reformatEthernetPort(InterfaceName);
      connectionDetails = {
        'type': 'Ethernet',
        'typeLabel': 'r@kpn.local_network.connection_type_ethernet',
        'networklabel': portNumber + ' / Switch'
      }
    }
    return (connectionDetails);
  }

  function reformatEthernetPort (interface) {
    var ethPort = '';
    if (interface == 'ETH0')
      ethPort = 'Ethernet 1'
    else if (interface == 'ETH1')
      ethPort = 'Ethernet 2'
    else if (interface == 'ETH2')
      ethPort = 'Ethernet 3'
    else if (interface == 'ETH3')
      ethPort = 'Ethernet 4'

    return (ethPort);
  }
  
  
  function isMacRandomized (mac) {
    // if second character of mac is either of [2,6,A,E], it is randomized
    var randomizedMacIndicator = ['2','6','A','E'];
    var secondCharOfMac = mac.substring(1,2);
  
    if (randomizedMacIndicator.indexOf(secondCharOfMac) > -1)
      return true;
    else
      return false;
  }

  
  function isIpv4 (ip) {
    var regex = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
    if (ip != null)
      return (regex.test(ip));
    else
      return false;
  }
  
  
  function getWifiSpeed(download,upload) {
    var d = '0';
    if (download != null) {
      if (download>1000000)
        d = Math.round(download / 1000000) + ' Gbps';
      else if (download>0)
        d = Math.round(download / 1000) + ' Mbps';
    }

    var u = '0';
    if (upload != null) {
      if (upload>1000000)
        u = Math.round(upload / 1000000) + ' Gbps';
      else if (upload>0)
        u = Math.round(upload / 1000) + ' Mbps';
    }
    return (d + ' / ' + u);
  }
  
  function getWifiDownloadSpeed(download) {
    var d = '0';
  
    if (download>1000000)
      d = Math.round(download / 1000000) + ' Gbps';
    else if (download>0)
      d = Math.round(download / 1000) + ' Mbps';
  
    return (d);
  }
  
  
  function getGhostDeviceMac(inputMac) {

    // get last two characters
    var lastTwo = inputMac.substring(15,17);
    var lastTwoNum = parseInt(lastTwo, 16);

    // adjust to get the ghost device last two
    var ghostDeviceLastTwo = lastTwoNum - 7;
    ghostDeviceLastTwoNum = ghostDeviceLastTwo.toString(16);

    // ghost device full mac
    var ghostDeviceMac = inputMac.substring(0,14) + ':' + ghostDeviceLastTwoNum.toUpperCase();

    return(ghostDeviceMac);
  }
  

  var interfaceTypes = {
    'ETH0': {
      'type': 'Ethernet',
      'typeLabel': 'r@kpn.local_network.connection_type_ethernet',
      'networklabel': 'Ethernet 1',
      'speed': '1 Gbit/s'
    },
    'ETH1': {
      'type': 'Ethernet',
      'typeLabel': 'r@kpn.local_network.connection_type_ethernet',
      'networklabel': 'Ethernet 2',
      'speed': '1 Gbit/s'
    },
    'ETH2': {
      'type': 'Ethernet',
      'typeLabel': 'r@kpn.local_network.connection_type_ethernet',
      'networklabel': 'Ethernet 3',
      'speed': '1 Gbit/s'
    },
    'ETH3': {
      'type': 'Ethernet',
      'typeLabel': 'r@kpn.local_network.connection_type_ethernet',
      'networklabel': 'Ethernet 4',
      'speed': '1 Gbit/s'
    },
    'vap2g0priv': {
      'type': 'WiFi',
      'typeLabel': 'r@kpn.local_network.connection_type_wifi',
      'networklabel': ensemble.storage.get('vap2g0priv'),
      'speed': '2,4 GHz'
    },
    'vap5g0priv': {
      'type': 'WiFi',
      'typeLabel': 'r@kpn.local_network.connection_type_wifi',
      'networklabel': ensemble.storage.get('vap5g0priv'),
      'speed': '5 GHz'
    },
    'vap2g0guest': {
      'type': 'WiFi',
      'typeLabel': 'r@kpn.local_network.connection_type_wifi',
      'networklabel': ensemble.storage.get('vap2g0guest'),
      'speed': '2,4 GHz'
    },
    'vap5g0guest': {
      'type': 'WiFi',
      'typeLabel': 'r@kpn.local_network.connection_type_wifi',
      'networklabel': ensemble.storage.get('vap5g0guest'),
      'speed': '5 GHz'
    },
    'vap2g0ext': {
      'type': 'WiFi',
      'typeLabel': 'r@kpn.local_network.connection_type_wifi',
      'networklabel': ensemble.storage.get('vap2g0ext'),
      'speed': '2,4 GHz'
    },
    'vap5g0ext': {
      'type': 'WiFi',
      'typeLabel': 'r@kpn.local_network.connection_type_wifi',
      'networklabel': ensemble.storage.get('vap5g0ext'),
      'speed': '5 GHz'
    },
    'vap2g0Ext': {
      'type': 'WiFi',
      'typeLabel': 'r@kpn.local_network.connection_type_wifi',
      'networklabel': ensemble.storage.get('vap2g0ext'),
      'speed': '2,4 GHz'
    },
    'vap5g0Ext': {
      'type': 'WiFi',
      'typeLabel': 'r@kpn.local_network.connection_type_wifi',
      'networklabel': ensemble.storage.get('vap5g0ext'),
      'speed': '5 GHz'
    }
  };
  
  function updateDeviceDetails(d, interface) {
    d.connectionDetails = interfaceTypes[interface];

    if (d.connectionDetails != null)
      if (d.connectionDetails.type == 'WiFi')
        d.downloadUploadSpeed = getWifiSpeed(d.MaxDownlinkRateReached,d.MaxUplinkRateReached);


    // reformat last seen
    d.LastConnection = convertUtcToGmtPlus1(d.LastConnection);
    d.NameSortable = d.Name.toLowerCase();

    // convert IP to integer for sorting
    d.SortableIp = ipToInteger(d.IPAddress);

    // set source label
    if (d.IPAddressSource == 'Static') {
      d.IPAddressSourceLabel = 'r@kpn.local_network.ip_type_static';
    } else {
      if ( getStaticLeases.body.leasesList.includes(d.IPAddress))
        d.IPAddressSourceLabel = 'r@kpn.local_network.ip_type_reserved';
      else
        d.IPAddressSourceLabel = 'r@kpn.local_network.ip_type_dynamic';
    }

    return (d);
  }


  function getTopologyLine(connectionDetails, isSwitchConnected) {

    // offline
    if (connectionDetails == null)
      return("line-grey.png");
    
    else {
      // ethernet

      if (connectionDetails.type == "Ethernet") {
        if (connectionDetails.speed == "1 Gbit/s" && isSwitchConnected)
          return("switch-line-green-solid.png");
        else if(connectionDetails.speed == "1 Gbit/s")
          return("line-green-solid.png");
        else
          return("line-orange-solid.png");
      }

      // wifi
      else if (connectionDetails.type == "WiFi") {
        if (connectionDetails.speed == "5 GHz")
          return("line-green-dashed.png");
        else
          return("line-orange-dashed.png");
      }
    } 
  }


  // process list of interfaces to extract devices and extenders
  // return an object with following keys
  //// activeDirectDevices
  //// activeExtenders
  //// inactiveExtenders
  //// activeHomeplugs

  function processParentInterfaces (interfaces) {
    var activeDirectDevices = [];
    var activeExtenders = [];
    var activeHomeplugs = [];
    var inactiveExtenders = [];
    if ( interfaces != null && interfaces.Children != null) {
      interfaces.Children.map(function (i) {
        if (i.Children != null) {
          i.Children.map(function (d) {
      
            // exclude alternative macs
            if (ensemble.storage.alternative_devices_macs.includes(d.Key) == false) {
              d = updateDeviceDetails(d, i.Name);
        
              var tagsArray = d.Tags.split(' ');
        
              // paired ssw
              if (tagsArray.includes('ssw') && d.Active == true) {
                var sswChildren = processParentInterfaces(d);
                d.activeDirectDevices = sswChildren.activeDirectDevices;
                d.activeExtenders = sswChildren.activeExtenders;
                d.inactiveExtenders = sswChildren.inactiveExtenders;
                d.activeHomeplugs = sswChildren.activeHomeplugs;
                activeExtenders.push(d);
              }
        
              // paired ssw, offline
              else if (tagsArray.includes('ssw') && d.Active == false) {
                inactiveExtenders.push(d);
              }
        
              // plc homeplugs
              else if (tagsArray.includes('homeplug_av') && d.Active == true) {
                var homeplugChildren = processHomeplug(d);
                d.activeDirectDevices = homeplugChildren.activeDirectDevices;
                d.activeExtenders = homeplugChildren.activeExtenders;
                d.inactiveExtenders = homeplugChildren.inactiveExtenders;
                d.activeHomeplugs = homeplugChildren.activeHomeplugs;
                activeHomeplugs.push(d);
              }

              // hnid
              else if (tagsArray.includes('hnid') && d.Active == true) {
                var switchChildren = processSwitch(d);
                activeDirectDevices = activeDirectDevices.concat(switchChildren.activeDirectDevices);
                activeExtenders = activeExtenders.concat(switchChildren.activeExtenders);
                inactiveExtenders = inactiveExtenders.concat(switchChildren.inactiveExtenders);
              }

              else if (d.Active == true) {
                activeDirectDevices.push(d);
              }
            }
          });
        }
      });
    }

    return ({
      "activeDirectDevices": activeDirectDevices,
      "activeExtenders": activeExtenders,
      "inactiveExtenders": inactiveExtenders,
      "activeHomeplugs": activeHomeplugs
    });
  }


  // process a HomePlug, which unlike the master or slave extenders do not have interfaces
  // return an object with following keys
  //// activeDirectDevices
  //// activeExtenders
  //// inactiveExtenders
  function processHomeplug (s) {
    var activeDirectDevices = [];
    var activeExtenders = [];
    var inactiveExtenders = [];
    var activeHomeplugs = [];

    if ( s != null ) {
      if ( s.Children ) {
        s.Children.map(function (d) {
        
          // exclude alternative macs
          if (ensemble.storage.alternative_devices_macs.includes(d.Key) == false) {
            d = updateDeviceDetails(d, s.InterfaceName);
            var tagsArray = d.Tags.split(' ');
      
            // paired ssw
            if (tagsArray.includes('ssw') && d.Active == true) {
              activeExtenders.push(d);
            }
      
            else if (tagsArray.includes('ssw') && d.Active == false) {
              inactiveExtenders.push(d);
            }

            // plc homeplugs
            else if (tagsArray.includes('homeplug_av') && d.Active == true) {
              var homeplugChildren = processHomeplug(d);
              d.activeDirectDevices = homeplugChildren.activeDirectDevices;
              d.activeExtenders = homeplugChildren.activeExtenders;
              d.inactiveExtenders = homeplugChildren.inactiveExtenders;
              d.activeHomeplugs = homeplugChildren.activeHomeplugs;
              activeHomeplugs.push(d);
            }

            // hnid
            else if (tagsArray.includes('hnid') && d.Active == true) {
              var switchChildren = processSwitch(d);
              activeDirectDevices = activeDirectDevices.concat(switchChildren.activeDirectDevices);
              activeExtenders = activeExtenders.concat(switchChildren.activeExtenders);
              inactiveExtenders = inactiveExtenders.concat(switchChildren.inactiveExtenders);
            }
      
            else if (d.Active == true) {
              activeDirectDevices.push(d);
            }
          }
        });  
      }

    }

    return ({
      "activeDirectDevices": activeDirectDevices,
      "activeExtenders": activeExtenders,
      "inactiveExtenders": inactiveExtenders,
      "activeHomeplugs": activeHomeplugs
    });
  }

  // process list a switch, which unlike the master or slave extenders do not have interfaces
  // return an object with following keys
  //// activeDirectDevices
  //// activeExtenders
  //// inactiveExtenders
  function processSwitch (s) {
    var activeDirectDevices = [];
    var activeExtenders = [];
    var inactiveExtenders = [];

    if ( s != null ) {
      if ( s.Children ) {
        s.Children.map(function (d) {
        
          // exclude alternative macs
          if (ensemble.storage.alternative_devices_macs.includes(d.Key) == false) {
            d = updateDeviceDetails(d, s.InterfaceName);
            d.switchConnected = true;

            var tagsArray = d.Tags.split(' ');
      
            // paired ssw
            if (tagsArray.includes('ssw') && d.Active == true) {
              activeExtenders.push(d);
            }
      
            else if (tagsArray.includes('ssw') && d.Active == false) {
              inactiveExtenders.push(d);
            }
      
            // hnid
            else if (tagsArray.includes('hnid') && d.Active == true) {
              var switchChildren = processSwitch(d);
              activeDirectDevices = activeDirectDevices.concat(switchChildren.activeDirectDevices);
              activeExtenders = activeExtenders.concat(switchChildren.activeExtenders);
              inactiveExtenders = inactiveExtenders.concat(switchChildren.inactiveExtenders);
            }
      
            else if (d.Active == true) {
              activeDirectDevices.push(d);
            }
          }
        });  
      }

    }

    return ({
      "activeDirectDevices": activeDirectDevices,
      "activeExtenders": activeExtenders,
      "inactiveExtenders": inactiveExtenders
    });
  }



  function getSubnetMaskDropdownList () {
    var list = [
      { "label": "0 (0.0.0.0)", "value": "0.0.0.0" },
      { "label": "1 (128.0.0.0)", "value": "128.0.0.0" },
      { "label": "2 (192.0.0.0)", "value": "192.0.0.0" },
      { "label": "3 (224.0.0.0)", "value": "224.0.0.0" },
      { "label": "4 (240.0.0.0)", "value": "240.0.0.0" },
      { "label": "5 (248.0.0.0)", "value": "248.0.0.0" },
      { "label": "6 (252.0.0.0)", "value": "252.0.0.0" },
      { "label": "7 (254.0.0.0)", "value": "254.0.0.0" },
      { "label": "8 (255.0.0.0)", "value": "255.0.0.0" },
      { "label": "9 (255.128.0.0)", "value": "255.128.0.0" },
      { "label": "10 (255.192.0.0)", "value": "255.192.0.0" },
      { "label": "11 (255.224.0.0)", "value": "255.224.0.0" },
      { "label": "12 (255.240.0.0)", "value": "255.240.0.0" },
      { "label": "13 (255.248.0.0)", "value": "255.248.0.0" },
      { "label": "14 (255.252.0.0)", "value": "255.252.0.0" },
      { "label": "15 (255.254.0.0)", "value": "255.254.0.0" },
      { "label": "16 (255.255.0.0)", "value": "255.255.0.0" },
      { "label": "17 (255.255.128.0)", "value": "255.255.128.0" },
      { "label": "18 (255.255.192.0)", "value": "255.255.192.0" },
      { "label": "19 (255.255.224.0)", "value": "255.255.224.0" },
      { "label": "20 (255.255.240.0)", "value": "255.255.240.0" },
      { "label": "21 (255.255.248.0)", "value": "255.255.248.0" },
      { "label": "22 (255.255.252.0)", "value": "255.255.252.0" },
      { "label": "23 (255.255.254.0)", "value": "255.255.254.0" },
      { "label": "24 (255.255.255.0)", "value": "255.255.255.0" },
      { "label": "25 (255.255.255.128)", "value": "255.255.255.128" },
      { "label": "26 (255.255.255.192)", "value": "255.255.255.192" },
      { "label": "27 (255.255.255.224)", "value": "255.255.255.224" },
      { "label": "28 (255.255.255.240)", "value": "255.255.255.240" },
      { "label": "29 (255.255.255.248)", "value": "255.255.255.248" },
      { "label": "30 (255.255.255.252)", "value": "255.255.255.252" },
      { "label": "31 (255.255.255.254)", "value": "255.255.255.254" },
      { "label": "32 (255.255.255.255)", "value": "255.255.255.255" }
    ];
    return list;
  }

  function getSubnetMaskBit (mask) {
    var options = {
      "0.0.0.0": 0,
      "128.0.0.0": 1,
      "192.0.0.0": 2,
      "224.0.0.0": 3,
      "240.0.0.0": 4,
      "248.0.0.0": 5,
      "252.0.0.0": 6,
      "254.0.0.0": 7,
      "255.0.0.0": 8,
      "255.128.0.0": 9,
      "255.192.0.0": 10,
      "255.224.0.0": 11,
      "255.240.0.0": 12,
      "255.248.0.0": 13,
      "255.252.0.0": 14,
      "255.254.0.0": 15,
      "255.255.0.0": 16,
      "255.255.128.0": 17,
      "255.255.192.0": 18,
      "255.255.224.0": 19,
      "255.255.240.0": 20,
      "255.255.248.0": 21,
      "255.255.252.0": 22,
      "255.255.254.0": 23,
      "255.255.255.0": 24,
      "255.255.255.128": 25,
      "255.255.255.192": 26,
      "255.255.255.224": 27,
      "255.255.255.240": 28,
      "255.255.255.248": 29,
      "255.255.255.252": 30,
      "255.255.255.254": 31,
      "255.255.255.255": 32
    };
    return options[mask];
  }


  function calculateTopologyHeight(activeExtenders, guestActiveExtenders, inactiveExtenders ) {
    var h = 600;

    if (activeExtenders != null) {
      activeExtenders.map(function(e) {
        // add for extender itself
        h = h + 100;

        // add for direct devices
        if (e.activeDirectDevices != null)
          h = h + 100;

        // add for child extenders
        if (e.activeExtenders != null)
          h = h + ( e.activeExtenders.length * 200);
        
      });
    }

    if (guestActiveExtenders != null) {
      guestActiveExtenders.map(function(e) {
        // add for extender itself
        h = h + 100;

        // add for direct devices
        if (e.activeDirectDevices != null)
          h = h + 100;

        // add for child extenders
        if (e.activeExtenders != null)
          h = h + ( e.activeExtenders.length * 100);
        
      });
    }

    if (inactiveExtenders != null)
      h = h + (inactiveExtenders.length * 100);

    return h;
  }

  function getWifiStandard(os, fullLabel) {
    if (fullLabel) {
      if (os == 'n') {
        return 'WiFi 4: 802.11n';
      } else if (os == 'ac') {
        return 'WiFi 5: 802.11ac';
      } else if (os == 'ax') {
        return 'WiFi 6: 802.11ax';
      } else if (os == 'be') {
        return 'WiFi 7: 802.11be';
      } else {
        return 'WiFi';
      }
    } else {
      if (os == 'n') {
        return 'WiFi 4';
      } else if (os == 'ac') {
        return 'WiFi 5';
      } else if (os == 'ax') {
        return 'WiFi 6';
      } else if (os == 'be') {
        return 'WiFi 7';
      } else {
        return 'WiFi';
      }
    }
  }

