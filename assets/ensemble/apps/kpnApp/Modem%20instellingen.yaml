Import:
  - common
  - mockData

View:

  styles:
    scrollableView: true
    backgroundColor: 0xFFEAEAEA
  body:
    Column:
      styles:
        fontSize: 16
      children:
        - PageHeader:
            inputs:
              title: r@kpn.nav.modem_settings
              showConnectionWarning: ${ensemble.storage.internetConnected == false}
              showSlaveDeviceWarning: ${ isMaster() == false }
        - Conditional:
            conditions:
              - if: ${ isMaster() }
                TabBar:
                  selectedIndex: ${tabIndex}
                  styles: { tabPadding: 0 16, color: 0xFF009900, tabBackgroundColor: 0xFFFFFFFF, tabFontWeight: bold, activeTabColor: 0xFF009900, indicatorColor: 0xFF009900, indicatorThickness: 4 }
                  items:
                    - label: r@kpn.modem.information
                      body: Informatie

                    - label: r@kpn.modem.time_ntp
                      body: NTP

                    - label: r@kpn.modem.admin_password
                      body: Admin

                    - label: r@kpn.modem.system
                      body: System

                    - label: r@kpn.modem.performance_charts
                      body: PerformanceCharts

              - else:
                TabBar:
                  selectedIndex: ${tabIndex}
                  styles: { tabPadding: 0 16, color: 0xFF009900, tabBackgroundColor: 0xFFFFFFFF, tabFontWeight: bold, activeTabColor: 0xFF009900, indicatorColor: 0xFF009900, indicatorThickness: 4 }
                  items:
                    - label: r@kpn.modem.information
                      body: Informatie
                    - label: r@kpn.modem.time_ntp
                      body: NTP
                    - label: r@kpn.modem.system
                      body: SystemSlave
                    - label: r@kpn.modem.performance_charts
                      body: PerformanceCharts

Informatie:
  onLoad: |
    ensemble.invokeAPI("getDeviceInfo");
    ensemble.invokeAPI("getUserSettings");
    ensemble.invokeAPI("getDeviceSettings");
    ensemble.invokeAPI("getDeviceInterfaces");
    ensemble.invokeAPI("getDeviceInfoHGW")
  Column:
    styles:
      padding: 16
    children:
      - Column:
          styles:
            backgroundColor: 0xFFFFFFFF
            shadowColor: 0xFFDEDEDE
            shadowRadius: 3
            shadowOffset: [0, 0]
            borderRadius: 10
            padding: 16
            gap: 12

          children:
            - ContentTitle:
                inputs:
                  title: r@kpn.modem.information
            - Spacer:
                styles: { size: 8 }

            - LabelValueRow:
                inputs:
                  label: r@kpn.home.device_name
                  value: ${getDeviceInfoHGW.body.status.Name}
            
            - Divider:

            - LabelValueRow:
                inputs:
                  label: r@kpn.modem.model_name
                  value: ${getDeviceInfo.body.status.ModelName}
            - Divider:

            - LabelValueRow:
                inputs:
                  label: Login wachtwoord
                  value: '${getUserSettings.body.status.PasswordState == 0 ? "r@kpn.custom" : "r@kpn.factory_default"}'
            - Divider:

            - LabelValueRow:
                inputs:
                  label: Wifi instellingen
                  value: '${getDeviceSettings.body.status.WiFiFactoryState == false ? "r@kpn.custom" : "r@kpn.factory_default"}'
            - Divider:

            - LabelValueRow:
                inputs:
                  label: Overige instellingen
                  value: '${getDeviceSettings.body.status.FactoryState == false ? "r@kpn.custom" : "r@kpn.factory_default"}'
            - Divider:

            - LabelValueRow:
                inputs:
                  label: r@kpn.modem.serial_number
                  value: ${getDeviceInfo.body.status.SerialNumber}
            - Divider:

            - LabelValueRow:
                inputs:
                  label: r@kpn.modem.hardware_version
                  value: ${getDeviceInfo.body.status.HardwareVersion}
            - Divider:

            - LabelValueRow:
                inputs:
                  label: r@kpn.modem.software_version
                  value: ${getDeviceInfo.body.status.SoftwareVersion}
            - Divider:

            - LabelValueRow:
                inputs:
                  label: r@kpn.modem.rescue_software_version
                  value: ${getDeviceInfo.body.status.RescueVersion}
            - Divider:

            - LabelValueRow:
                inputs:
                  label: r@kpn.modem.bootloader_version
                  value: ${getDeviceInfo.body.status['X_SOFTATHOME-COM_AdditionalSoftwareVersions'].split(',Rescue')[0].split('=')[1]}
            - Divider:

            - LabelValueRow:
                inputs:
                  label: r@kpn.modem.rescue_bootloader_version
                  value: ${getDeviceInfo.body.status['X_SOFTATHOME-COM_AdditionalSoftwareVersions'].split('RescueBootloader=')[1]}
            - Divider:

            - LabelValueRow:
                inputs:
                  label: r@kpn.modem.uptime
                  value: ${getDeviceInfo.body.status.UpTime.prettyDuration()}
            - Divider:

            - Spacer:
                styles:
                  size: 8

            - GreenSubtitle:
                inputs:
                  title: r@kpn.mac_address

            - LabelValueRow:
                inputs:
                  label: r@kpn.modem.mac_base
                  value: ${getDeviceInfo.body.status.BaseMAC.toUpperCase()}
            - Divider:

            - LabelValueRow:
                inputs:
                  label: r@kpn.modem.mac_2g
                  value: ${getDeviceInterfaces.body.interfaceMacs.vap2g0priv.toUpperCase()}
            - Divider:

            - LabelValueRow:
                inputs:
                  label: r@kpn.modem.mac_extra_2g
                  value: ${getDeviceInterfaces.body.interfaceMacs.vap2g0ext.toUpperCase()}
            - Divider:

            - LabelValueRow:
                inputs:
                  label: r@kpn.modem.mac_guest_2g
                  value: ${getDeviceInterfaces.body.interfaceMacs.vap2g0guest.toUpperCase()}
            - Divider:

            - LabelValueRow:
                inputs:
                  label: r@kpn.modem.mac_5g
                  value: ${getDeviceInterfaces.body.interfaceMacs.vap5g0priv.toUpperCase()}
            - Divider:

            - LabelValueRow:
                inputs:
                  label: r@kpn.modem.mac_extra_5g
                  value: ${getDeviceInterfaces.body.interfaceMacs.vap5g0ext.toUpperCase()}
            - Divider:

            - LabelValueRow:
                inputs:
                  label: r@kpn.modem.mac_guest_5g
                  value: ${getDeviceInterfaces.body.interfaceMacs.vap5g0guest.toUpperCase()}


NTP:
  onLoad:
    invokeAPI:
      name: getTime
      onResponse:
        invokeAPI:
          name: getNtpServers

  Column:
    styles:
      padding: 16
    children:
      - Column:
          styles:
            backgroundColor: 0xFFFFFFFF
            shadowColor: 0xFFDEDEDE
            shadowRadius: 3
            shadowOffset: [0, 0]
            borderRadius: 10
            padding: 16
            gap: 12
          children:
            - ContentTitle:
                inputs:
                  title: r@kpn.modem.time_ntp

            - Spacer:
                styles: {size: 8}

            - FittedRow:
                styles:
                  childrenFits:
                    - auto
                    - 1
                children:
                  - Text:
                      text: r@kpn.modem.current_date_time
                      styles:
                        width: 200
                  - Text:
                      text: ${getTime.body.data.time}

            - Divider:

            - Form:
                styles:
                  labelPosition: '${device.width > 768 ? "start" : "top"}'
                  labelMaxWidth: 200
                  gap: 16
                children:
                  - TextInput:
                      id: ntpServer1
                      label: r@kpn.modem.ntpservers
                      value: ${getNtpServers.body.data.servers["1"]}
                      enabled: ${ensemble.storage.deviceMode == 'Master'}
                      required: true
                  - TextInput:
                      id: ntpServer2
                      value: ${getNtpServers.body.data.servers["2"]}
                      enabled: ${ensemble.storage.deviceMode == 'Master'}
                  - TextInput:
                      id: ntpServer3
                      value: ${getNtpServers.body.data.servers["3"]}
                      enabled: ${ensemble.storage.deviceMode == 'Master'}
                  - TextInput:
                      id: ntpServer4
                      value: ${getNtpServers.body.data.servers["4"]}
                      enabled: ${ensemble.storage.deviceMode == 'Master'}
                  - TextInput:
                      id: ntpServer5
                      value: ${getNtpServers.body.data.servers["5"]}
                      enabled: ${ensemble.storage.deviceMode == 'Master'}
                  - Spacer:
                      styles:
                        size: 16
                  - Row:
                      visible: ${ensemble.storage.deviceMode == 'Master'}
                      styles: { mainAxis: end, crossAxis: center }
                      children:
                        - Button:
                            label: r@kpn.restore
                            styles:
                              outline: true
                              labelStyle:
                                color: 0xFF0077CC
                            onTap:
                              invokeAPI:
                                name: getNtpServers
                        - Button:
                            label: r@kpn.save
                            validateForm: true
                            styles: { margin: 0 0 0 10 }
                            onTap:
                              invokeAPI:
                                name: setNtpServers
                                inputs:
                                  ntpServer1: ${ntpServer1.value}
                                  ntpServer2: ${ntpServer2.value}
                                  ntpServer3: ${ntpServer3.value}
                                  ntpServer4: ${ntpServer4.value}
                                  ntpServer5: ${ntpServer5.value}
                                onResponse:
                                  showToast:
                                    widget: SuccessToast
                                    styles:
                                      padding: 0
                                    options:
                                      type: custom
                                      duration: 15
                                      dismissable: true
                                      alignment: center
                                onError:
                                  showToast:
                                    message: r@kpn.error
                                    options:
                                      dismissable: true
                                      type: error
                                      duration: 15
                                      alignment: center


Admin:
  Column:
    styles:
      padding: 16
    children:
      - Column:
          styles:
            backgroundColor: 0xFFFFFFFF
            shadowColor: 0xFFDEDEDE
            shadowRadius: 3
            shadowOffset: [0, 0]
            borderRadius: 10
            padding: 16
            gap: 12
          children:
            - ContentTitle:
                inputs:
                  title: r@kpn.modem.change_admin_password
            - Text:
                text: r@kpn.modem.admin_password_description
            - Divider

            - Form:
                styles:
                  labelPosition: '${device.width > 768 ? "start" : "top"}'
                  gap: 16
                children:
                  - PasswordInput:
                      id: currentPassword
                      label: r@kpn.modem.current_password
                      obscureText: true
                      obscureToggle: true
                      required: true
                  - PasswordInput:
                      id: newPassword
                      label: r@kpn.modem.new_password
                      obscureText: true
                      obscureToggle: true
                      required: true
                      validator:
                        maxLength: 64
                      onKeyPress: |
                        //@code
                        passwordConditionsMet = 0;
                        var minCharacterRegex = /^.{10,}$/
                        if (minCharacterRegex.test(this.value)) {
                          minCharacterPass.visible = true;
                          minCharacterFail.visible = false;
                          passwordConditionsMet++;
                        } else {
                          minCharacterPass.visible = false;
                          minCharacterFail.visible = true;
                        }

                        var numberOrSpecialRegex = /^(?=.*[A-Za-z])(?=.*[$@.$!%*#?&0-9])[A-Za-z\d$@.$!%*#?&]{2,}$/i
                        if (numberOrSpecialRegex.test(this.value)) {
                          numberOrSpecialFail.visible = false;
                          numberOrSpecialPass.visible = true;
                          passwordConditionsMet++;
                        } else {
                          numberOrSpecialFail.visible = true;
                          numberOrSpecialPass.visible = false;
                        }

                        var i = 0;
                        var foundRepeatingChar = false;
                        var passArray = this.value.split("");
                        passArray.map(function(v) {
                          if( i< passArray.length-2)
                            if (v == passArray[i+1] && v == passArray[i+2])
                              foundRepeatingChar = true;
                          i = i+1;
                        });
                        repeatingCharacterPass.visible = !foundRepeatingChar;
                        repeatingCharacterFail.visible = foundRepeatingChar;
                        if (!foundRepeatingChar)
                          passwordConditionsMet++;
                        
                        
                        if (passwordConditionsMet == 3) {
                            if (newPasswordConfirm.value == newPassword.value) {
                              passwordChangeStatus.text = "";
                              changePasswordBtn.enabled = true;
                            } else {
                              passwordChangeStatus.text = "r@kpn.modem.passwords_not_matching";
                              changePasswordBtn.enabled = false;
                            }
                        } else {
                          changePasswordBtn.enabled = false;
                        }

                  - PasswordInput:
                      id: newPasswordConfirm
                      label: r@kpn.modem.confirm_new_password
                      obscureToggle: true
                      showToggle: true
                      required: true
                      validator:
                        maxLength: 64
                      onKeyPress: |
                        //@code
                        passwordConditionsMet = 0;
                        var minCharacterRegex = /^.{10,}$/
                        if (minCharacterRegex.test(this.value))
                          passwordConditionsMet++;

                        var numberOrSpecialRegex = /^(?=.*[A-Za-z])(?=.*[$@.$!%*#?&0-9])[A-Za-z\d$@.$!%*#?&]{2,}$/i
                        if (numberOrSpecialRegex.test(this.value)) 
                          passwordConditionsMet++;

                        var i = 0;
                        var foundRepeatingChar = false;
                        var passArray = this.value.split("");
                        passArray.map(function(v) {
                          if( i< passArray.length-2)
                            if (v == passArray[i+1] && v == passArray[i+2])
                              foundRepeatingChar = true;
                          i = i+1;
                        });
                        if (!foundRepeatingChar)
                          passwordConditionsMet++;
                        if (passwordConditionsMet == 3) {
                            if (newPasswordConfirm.value == newPassword.value) {
                              passwordChangeStatus.text = "";
                              changePasswordBtn.enabled = true;
                            } else {
                              passwordChangeStatus.text = "r@kpn.modem.passwords_not_matching";
                              changePasswordBtn.enabled = false;
                            }
                        } else {
                          changePasswordBtn.enabled = false;
                        }

                  - Column:
                      styles: { gap: 8, padding: 8 16, borderColor: grey }
                      children:
                        - Text:
                            text: r@kpn.modem.password_requirements_title
                        - Row:
                            styles: { crossAxis: center }
                            children:
                              - Icon:
                                  id: minCharacterPass
                                  name: 0xe91d
                                  library: kpnUI
                                  visible: false
                                  styles: { color: 0xFF009900, size: 16 }
                              - Icon:
                                  id: minCharacterFail
                                  name: 0xe936
                                  library: kpnUI
                                  styles: { color: red, size: 16 }
                              - Spacer:
                                  styles: { size: 8 }
                              - Text:
                                  text: r@kpn.modem.password_requirements_1

                        - Row:
                            styles: { crossAxis: center }
                            children:
                              - Icon:
                                  id: numberOrSpecialPass
                                  name: 0xe91d
                                  library: kpnUI
                                  visible: false
                                  styles: { color: 0xFF009900, size: 16 }
                              - Icon:
                                  id: numberOrSpecialFail
                                  name: 0xe936
                                  library: kpnUI
                                  styles: { color: red, size: 16 }
                              - Spacer:
                                  styles: { size: 8 }
                              - Text:
                                  text: r@kpn.modem.password_requirements_2


                        - Row:
                            styles: { crossAxis: center }
                            children:
                              - Icon:
                                  id: repeatingCharacterPass
                                  name: 0xe91d
                                  library: kpnUI
                                  styles: { color: 0xFF009900, size: 16 }
                              - Icon:
                                  id: repeatingCharacterFail
                                  name: 0xe936
                                  library: kpnUI
                                  visible: false
                                  styles: { color: red, size: 16 }
                              - Spacer:
                                  styles: { size: 8 }
                              - Text:
                                  text: r@kpn.modem.password_requirements_3

                  - Row:
                      styles: { mainAxis: end, crossAxis: center, gap: 20 }
                      children:
                        - Text:
                            id: passwordChangeStatus
                        - Button:
                            id: changePasswordBtn
                            label: r@kpn.modify
                            enabled: false
                            validateForm: true
                            onTap:
                              invokeAPI:
                                name: changePassword
                                inputs:
                                  password: ${newPassword.value}
                                  currentPassword: ${currentPassword.value}
                                onResponse: |
                                  //@code
                                  if (response.body.status == false) {
                                    passwordChangeStatus.text = "r@kpn.modem.invalid_password";
                                  } else {
                                    ensemble.navigateScreen('Logout');
                                  }


System:
  onLoad:
    executeConditionalAction:
      conditions:
        - if: ${ ensemble.storage.appConfig.deviceType != "v10" }
          action:
            invokeAPI:
              name: getLatestVersion
              onResponse: |
                // error state
                if (response.body.status == false) {
                  upgradeMessage.visible = false;
                  upgradeBtn.enabled = false;
                }
                
                // upgrade available
                else if ( response.body.data.updateAvailable == true) {
                  upgradeMessage.visible = true;
                  upgradeBtn.enabled = true;
                }
                
                // upgrade NOT available
                else if ( response.body.data.updateAvailable == false) {
                  upgradeMessage.visible = true;
                  upgradeBtn.enabled = false;
                }

  Column:
    styles:
      padding: 16
    children:
      - Column:
          styles:
            backgroundColor: 0xFFFFFFFF
            shadowColor: 0xFFDEDEDE
            shadowRadius: 3
            shadowOffset: [0, 0]
            borderRadius: 10
            padding: 16
            gap: 16
          children:
            - ContentTitle:
                inputs:
                  title: r@kpn.modem.system
            - Text:
                text: r@kpn.modem.system_description

            - Divider:
                styles: { margin: 16 0 }

            - ResponsiveTextButton:
                inputs:
                  text: r@kpn.modem.system_reboot_description
                  buttonLabel: r@kpn.modem.system_reboot
                  buttonColor: 0xFF0077CC
                  buttonLabelColor: white
                events:
                  onButtonTap:
                    showDialog:
                      widget: ModemRebootDialog
                      options:
                        style: none

            - ResponsiveTextButton:
                inputs:
                  text: r@kpn.modem.system_reset_description
                  buttonLabel: r@kpn.modem.system_reset
                  buttonColor: 0xFFFF9000
                  buttonLabelColor: black
                events:
                  onButtonTap:
                    showDialog:
                      widget: FactoryResetDialog
                      options:
                        style: none

            - Divider:
                styles: { margin: 16 0 }



            - ResponsiveTextButton:
                inputs:
                  text: r@kpn.wifi.wifi_reset
                  buttonLabel: r@kpn.modem.wifi_reset
                  buttonColor: 0xFFFF9000
                  buttonLabelColor: black
                events:
                  onButtonTap:
                    showDialog:
                      widget: WifiResetDialog
                      options:
                        style: none

            - Divider:
                styles: { margin: 16 0 }


            # group reboot and reset

            - ResponsiveTextButton:
                inputs:
                  text: r@kpn.modem.group_reboot
                  buttonLabel: r@kpn.modem.system_reboot
                  buttonColor: 0xFF0077CC
                  buttonLabelColor: white
                events:
                  onButtonTap:
                    showDialog:
                      widget: GroupRebootDialog
                      options:
                        style: none

            - ResponsiveTextButton:
                inputs:
                  text: r@kpn.modem.group_reset
                  buttonLabel: r@kpn.modem.system_reset
                  buttonColor: 0xFFFF9000
                  buttonLabelColor: black
                events:
                  onButtonTap:
                    showDialog:
                      widget: GroupFactoryResetDialog
                      options:
                        style: none

            - Divider:
                styles: { margin: 16 0 }
                
            # upgrade me now
            - Conditional:
                conditions:
                  - if: ${ ensemble.storage.appConfig.deviceType != "v10" }
                    widget:
                      Flex:
                        direction: '${device.width > mobileBreakPoint ? "horizontal" : "vertical"}'
                        styles: 
                          gap: 16
                        children:
                          - Text:
                              text: r@kpn.modem.upgrade_modem
                              styles:
                                width: 240
                                textStyle:
                                  fontWeight: bold
                          - Column:
                              children:
                                - Column:
                                    id: upgradeMessage
                                    visible: false
                                    styles: { backgroundColor: 0xFFDAECF8, borderRadius: 8, margin: 0 0 16 0 }
                                    children:
                                      - Divider:
                                          styles: { color: 0xFF0078CD, thickness: 4 }
                                      - Text:
                                          styles:
                                            padding: 12 16
                                            overflow: wrap
                                          text: '${getLatestVersion.body.data.updateAvailable ? "r@kpn.modem.available_upgrade_version " + getLatestVersion.body.data.newVersion : "r@kpn.modem.upgrade_unavailable" }'
                                - Button:
                                    id: upgradeBtn
                                    label: r@kpn.modem.upgrade
                                    enabled: false
                                    onTap:
                                      showDialog:
                                        widget: UpgradeDialog
                                        options:
                                          style: none



SystemSlave:
  onLoad:
    invokeAPI:
      name: getLatestVersion
      onResponse: |
        //@code
        
        // error state
        if (response.body.status == false) {
          upgradeMessage.visible = false;
          upgradeBtn.enabled = false;
        }
        
        // upgrade available
        else if ( response.body.data.updateAvailable == true) {
          upgradeMessage.visible = true;
          upgradeBtn.enabled = true;
        }
        
        // upgrade NOT available
        else if ( response.body.data.updateAvailable == false) {
          upgradeMessage.visible = true;
          upgradeBtn.enabled = false;
        }

  Column:
    styles:
      padding: 16
    children:
      - Column:
          styles:
            backgroundColor: 0xFFFFFFFF
            shadowColor: 0xFFDEDEDE
            shadowRadius: 3
            shadowOffset: [0, 0]
            borderRadius: 10
            padding: 16
            gap: 16
          children:
            - ContentTitle:
                inputs:
                  title: r@kpn.modem.system
            - Text:
                text: r@kpn.modem.system_description

            - Divider:
                styles: { margin: 16 0 }

            - Flex:
                direction: '${device.width > 768 ? "horizontal" : "vertical"}'
                styles: { gap: 20, crossAxis: center }
                children:
                  - Text:
                      text: r@kpn.modem.system_reboot_description
                      styles:
                        width: 240
                        textStyle:
                          fontWeight: bold

                  - Column:
                      styles: { crossAxis: start, expanded: "${device.width > 768 ? true : false}"  }
                      children:
                        - Button:
                            label: r@kpn.modem.system_reboot
                            onTap:
                              showDialog:
                                widget: ModemRebootDialog
                                options:
                                  style: none

            - Flex:
                direction: '${device.width > 768 ? "horizontal" : "vertical"}'
                styles: { gap: 20, crossAxis: center }
                children:
                  - Text:
                      text: r@kpn.modem.system_reset_description
                      styles:
                        width: 240
                        textStyle:
                          fontWeight: bold


                  - Column:
                      styles: { expanded: "${device.width > 768 ? true : false}" }
                      children:
                        - Button:
                            styles:
                               backgroundColor: 0xFFFF9000
                               borderColor: 0xFFFF9000
                               borderRadius: 100
                               labelStyle:
                                 color: black
                                 fontWeight: bold
                            label: r@kpn.modem.system_reset
                            onTap:
                              showDialog:
                                widget: FactoryResetDialog
                                options:
                                  style: none

            - Divider:
                styles: { margin: 16 0 }
            # upgrade me now
            - Row:
                styles: { gap: 20 }
                children:
                  - Text:
                      text: r@kpn.modem.upgrade_modem
                      styles:
                        width: 240
                        textStyle:
                          fontWeight: bold
                  - Column:
                      styles: { expanded: true }
                      children:
                        - Column:
                            id: upgradeMessage
                            visible: false
                            styles: { backgroundColor: 0xFFDAECF8, borderRadius: 8, margin: 0 0 16 0 }
                            children:
                              - Divider:
                                  styles: { color: 0xFF0078CD, thickness: 4 }
                              - Text:
                                  styles:
                                    padding: 12 16
                                    overflow: wrap
                                    width: "${device.width >= 768 ? '' : 110}"
                                  text: '${getLatestVersion.body.data.updateAvailable ? "r@kpn.modem.available_upgrade_version " + getLatestVersion.body.data.newVersion : "r@kpn.modem.upgrade_unavailable" }'
                        - Button:
                            id: upgradeBtn
                            label: r@kpn.modem.upgrade
                            enabled: false
                            onTap:
                              showDialog:
                                widget: UpgradeDialog
                                options:
                                  style: none


UpgradeDialog:
  Column:
    styles: { width: 420,  backgroundColor: white }
    children:
      # adjust reboot time
      - Column:
          id: progressIndicator
          visible: false
          children:
            - Progress:
                display: linear
                countdown: 300
                styles: { color: 0xFF009900, thickness: 8 }
                onCountdownComplete: |
                  //@code
                  ensemble.navigateScreen('Login');

      - Column:
          styles: { padding: 24, gap: 24 }
          children:
            - Markdown:
                text: r@kpn.modem.upgrade_modem_description
            - Text:
                id: error
            - Row:
                id: confirmForm
                styles: { mainAxis: end, gap: 24 }
                children:
                  - Button:
                      styles: { outline: true, color: 0xFF0077CC }
                      label: r@kpn.cancel
                      onTap: closeAllDialogs
                  - Button:
                      label: r@kpn.confirm
                      onTap:
                        invokeAPI:
                          name: upgradeModem
                          onResponse: |-
                            //@code
                            progressIndicator.visible = true;
                            confirmForm.visible = false;
                          onError: |-
                            error.text = 'r@kpn.error';


GroupRebootDialog:
  Column:
    styles: { width: 420, backgroundColor: white }
    children:
      - Column:
          id: progressIndicator
          visible: false
          children:
            - Progress:
                display: linear
                countdown: 300
                styles: { color: 0xFF009900, thickness: 8 }
                onCountdownComplete: |
                  //@code
                  ensemble.navigateScreen('Login');

      - Column:
          styles: { padding: 24, gap: 24 }
          children:
            - Markdown:
                text: r@kpn.modem.group_reboot_description
            - Row:
                id: confirmForm
                styles: { mainAxis: end, crossAxis: center, gap: 24 }
                children:
                  - Button:
                      styles:
                        outline: true
                        labelStyle:
                          color: 0xFF0077CC
                      label: r@kpn.cancel
                      onTap: closeAllDialogs

                  - Button:
                      styles:
                        backgroundColor: 0xFFE52E2E
                        borderColor: 0xFFE52E2E
                        borderRadius: 100
                      label: r@kpn.confirm
                      onTap:
                        invokeAPI:
                          name: rebootGroup
                          onResponse: |-
                            //@code
                            progressIndicator.visible = true;
                            confirmForm.visible = false;


ModemRebootDialog:
  Column:
    styles: { width: 420, backgroundColor: white }
    children:
      - Column:
          id: progressIndicator
          visible: false
          children:
            - Progress:
                display: linear
                countdown: 300
                styles: { color: 0xFF009900, thickness: 8 }
                onCountdownComplete: |
                  //@code
                  ensemble.navigateScreen('Login');

      - Column:
          styles: { padding: 24, gap: 24 }
          children:
            - Markdown:
                text: r@kpn.modem.device_reboot_dialog
            - Row:
                id: confirmForm
                styles: { mainAxis: end, crossAxis: center, gap: 24 }
                children:
                  - Button:
                      styles:
                        outline: true
                        labelStyle:
                          color: 0xFF0077CC
                      label: r@kpn.cancel
                      onTap: closeAllDialogs

                  - Button:
                      styles:
                        backgroundColor: 0xFFE52E2E
                        borderColor: 0xFFE52E2E
                        borderRadius: 100
                      label: r@kpn.confirm
                      onTap:
                        invokeAPI:
                          name: rebootGateway
                          onResponse: |-
                            //@code
                            progressIndicator.visible = true;
                            confirmForm.visible = false;


GroupFactoryResetDialog:
  Column:
    styles: { width: 420, backgroundColor: white }
    children:
      - Column:
          id: progressIndicator
          visible: false
          children:
            - Progress:
                display: linear
                countdown: 300
                styles: { color: 0xFF009900, thickness: 8 }
                onCountdownComplete: |
                  //@code
                  ensemble.navigateScreen('Login');
      - Column:
          styles: { padding: 24, gap: 24 }
          children:
            - Markdown:
                text: r@kpn.modem.group_reset_description
            - Row:
                id: confirmForm
                styles: { mainAxis: end, crossAxis: center, gap: 24 }
                children:
                  - Button:
                      styles:
                        outline: true
                        labelStyle:
                          color: 0xFF0077CC
                      label: r@kpn.cancel
                      onTap: closeAllDialogs

                  - Button:
                      styles:
                        backgroundColor: 0xFFE52E2E
                        borderColor: 0xFFE52E2E
                        borderRadius: 100
                      label: r@kpn.confirm
                      onTap:
                        invokeAPI:
                          name: resetGroup
                          onResponse: |-
                            //@code
                            progressIndicator.visible = true;
                            confirmForm.visible = false;


FactoryResetDialog:
  Column:
    styles: { width: 420, backgroundColor: white }
    children:
      - Column:
          id: progressIndicator
          visible: false
          children:
            - Progress:
                display: linear
                countdown: 300
                styles: { color: 0xFF009900, thickness: 8 }
                onCountdownComplete: |
                  //@code
                  ensemble.navigateScreen('Login');
      - Column:
          styles: { padding: 24, gap: 24 }
          children:
            - Markdown:
                text: r@kpn.modem.factory_reset_dialog
            - Row:
                id: confirmForm
                styles: { mainAxis: end, crossAxis: center, gap: 24 }
                children:
                  - Button:
                      styles:
                        outline: true
                        labelStyle:
                          color: 0xFF0077CC
                      label: r@kpn.cancel
                      onTap: closeAllDialogs
                  
                  - Button:
                      styles:
                        backgroundColor: 0xFFE52E2E
                        borderColor: 0xFFE52E2E
                        borderRadius: 100
                      label: r@kpn.confirm
                      onTap:
                        invokeAPI:
                          name: resetGateway
                          onResponse: |-
                            //@code
                            progressIndicator.visible = true;
                            confirmForm.visible = false;


WifiResetDialog:
  Column:
    styles: { width: 420, backgroundColor: white }
    children:
      - Column:
          id: progressIndicator
          visible: false
          children:
            - Progress:
                display: linear
                countdown: 60
                styles: { color: 0xFF009900, thickness: 8 }
      - Column:
          styles: { padding: 24, gap: 24 }
          children:
            - Markdown:
                text: r@kpn.wifi.wifi_reset_description
                id: resetTitle
            - Row:
                id: confirmForm
                styles: { mainAxis: end, gap: 24, crossAxis: center }
                children:
                  - Button:
                      styles:
                        outline: true
                        labelStyle:
                          color: 0xFF0077CC
                      label: r@kpn.cancel
                      onTap: closeAllDialogs

                  - Button:
                      styles:
                        backgroundColor: 0xFFE52E2E
                        borderColor: 0xFFE52E2E
                        borderRadius: 100
                      label: r@kpn.reset
                      onTap:
                        executeCode:
                          body: |
                            //@code
                            progressIndicator.visible = true;
                            confirmForm.visible = false;
                          onComplete:
                            invokeAPI:
                              name: wifiFactoryReset
                              onResponse:
                                invokeAPI:
                                  name: getPrivWiFi
                                  onResponse: |
                                    postSubmitContent.visible = true;
                                    progressIndicator.visible = false;
                                    resetTitle.visible = false;
                            onError:
                              showToast:
                                options:
                                  dismissable: true
                                  type: error
                                  message: r@kpn.error
                                  duration: 15
                                  alignment: center

            - Column:
                id: postSubmitContent
                visible: false
                styles:
                  gap: 16
                  fontSize: 16
                children:
                  - Text:
                      text: r@kpn.wifi_confirmations.main_wifi_new
                      styles: { color: 0xFF009900, fontWeight: bold, fontSize: 20 }
                  - Text:
                      text: r@kpn.wifi_confirmations.main_wifi_new_description
                  - Spacer:
                      styles: { size: 1 }
                  - Divider
                  - Row:
                      children:
                        - Text:
                            text: r@kpn.wifi.name_ssid
                            styles: { expanded: true }
                        - Text:
                            text: ${getPrivWiFi.body.status.wlanvap.vap2g0priv.SSID}
                            styles: { expanded: true }

                  - Divider
                  - Row:
                      children:
                        - Text:
                            text: r@kpn.wifi.password
                            styles: { expanded: true }
                        - Text:
                            text: ${getPrivWiFi.body.status.wlanvap.vap2g0priv.Security.KeyPassPhrase}
                            styles: { expanded: true }
                  - Divider
                  - Row:
                      children:
                        - Text:
                            text: r@kpn.wifi.encryption_type
                            styles: { expanded: true }
                        - Text:
                            text: ${getPrivWiFi.body.status.wlanvap.vap2g0priv.Security.ModeEnabled}
                            styles: { expanded: true }
                  - Divider
                  - Spacer:
                      styles: { size: 1 }
                  - Row:
                      styles: { mainAxis: center }
                      children:
                        - QRCode:
                            value: ${getWifiQrCode(getPrivWiFi.body.status.wlanvap.vap2g0priv.SSID, getPrivWiFi.body.status.wlanvap.vap2g0priv.Security.KeyPassPhrase)}
                            styles: { size: 200 }
                  - Divider
                  - Row:
                      styles: { mainAxis: center }
                      children:
                        - Button:
                            label: r@kpn.close
                            styles: { outline: true, color: 0xFF0077CC }
                            onTap: closeAllDialogs


PerformanceCharts:
  onLoad:
    invokeAPI:
      name: getGatewayDevice
      onResponse:
        invokeAPI:
          name: startEventing
          inputs:
            gatewayMac: ${getGatewayDevice.body.status[0].Key}
          onResponse:
            invokeAPI:
              name: getEventsChannel
              inputs:
                gatewayMac: ${getGatewayDevice.body.status[0].Key}
              onResponse:
                startTimer:
                  id: performanceChartsTimer
                  options:
                    repeat: true
                    startAfter: 0
                    repeatInterval: 5
                    maxNumberOfTimes: 30
                  onTimer:
                    invokeAPI:
                      name: getEvents
                      inputs:
                        channel: ${getEventsChannel.body.status.channelid}
                      onResponse:
                        executeCode:
                          body: |
                            //@code
                            var cpuData = {};
                            var memoryData = {};
            
                            if (response.body.status.events.length > 0) {
                              response.body.status.events.map(function(e) {
                                if (e.data.object.reason == 'cpu')
                                  cpuData = e.data.object.attributes;
                                else if (e.data.object.reason == 'sysinfo')
                                  memoryData = e.data.object.attributes;
                              });
                            }
            
                            if (response.body.status.events.length > 0) {
                              if ( numTimes % 5 != 0 ) {
                                memoryChart.addLabels(['']);
                                cpuChart.addLabels(['']);
                              } else {
                                var utcTimeArr = cpuData.path('$..cpu.Timestamp',function (match) { return match });
                                var gmtTime = convertUtcToGmtPlus1TimeOnly(utcTimeArr[0]);
                                cpuChart.addLabels([gmtTime]);
                                memoryChart.addLabels([gmtTime]);
                              }
                              cpuChart.addData(0,cpuData.path('$..Total',function (match) {match}));
                              cpuChart.update();
                              var totalRam = memoryData.path('$..totalram',null)[0];
                              var freeRam = memoryData.path('$..freeram',null)[0];
                              var mem = ((totalRam - freeRam)/totalRam) * 100;
            
                              memoryChart.addData(0,[mem.toFixed(3)]);
                              memoryChart.update();
                              incrementIndex();
                            }

  Column:
    styles:
      padding: 16
    children:
      - Column:
          styles:
            backgroundColor: 0xFFFFFFFF
            shadowColor: 0xFFDEDEDE
            shadowRadius: 3
            shadowOffset: [ 0, 0 ]
            borderRadius: 10
            padding: 16
            gap: 12
          children:
            - ChartJs:
                id: cpuChart
                styles: { width: 780, height: 400 }
                config: |
                  {
                    type: "line",
                    data: {
                      labels: [],
                      datasets: [{
                        label: "CPU",
                        backgroundColor: ['rgba(255, 99, 132, 0.2)'],
                        borderColor: ['rgb(255, 99, 132)'],
                        borderWidth: 0.5,
                        data: [],
                        fill: 'start'
                      }]
                    },
                    options: {
                      scales: {
                        y: {
                          min: 0,
                          max: 100
                        }
                      },
                    }
                  }

            - ChartJs:
                id: memoryChart
                styles: { width: 780, height: 400 }
                config: |
                  {
                    type: "line",
                    data: {
                      labels: [],
                      datasets: [{
                        label: "Memory",
                        backgroundColor: ['rgba(75, 192, 192, 0.2)'],
                        borderColor: ['rgb(75, 192, 192)'],
                        borderWidth: 0.5,
                        data: [],
                        fill: 'start'
                      }]
                    },
                    options: {
                      scales: {
                        y: {
                          min: 0,
                          max: 100
                        }
                      },
                    }
                  }


API:

  getDeviceInfo:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getDeviceInfo }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "DeviceInfo"
      "method": "get"
      "parameters": ""
  
  getDeviceInfoHGW:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getDeviceInfoHGW }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices.Device.HGW"
      "method": "get"
      "parameters": { }

  getUserSettings:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getUserSettings }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "UserManagement.User.admin"
      "method": "get"
      "parameters": ""

  getDeviceSettings:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getDeviceSettings }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NMC"
      "method": "get"
      "parameters": ""

  getTime:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getTime }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Time"
      "method": "getTime"
      "parameters": ""

  getNtpServers:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getNtpServers }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Time"
      "method": "getNTPServers"
      "parameters": ""


  setNtpServers:
    inputs: [ntpServer1, ntpServer2, ntpServer3, ntpServer4, ntpServer5]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Time"
      "method": "setNTPServers"
      "parameters":
        "servers":
          "1": "${ntpServer1}"
          "2": "${ntpServer2}"
          "3": "${ntpServer3}"
          "4": "${ntpServer4}"
          "5": "${ntpServer5}"


  changePassword:
    inputs: [ currentPassword, password ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "UserManagement"
      "method": "changePasswordSec"
      "parameters": {
        "name": "admin",
        "password": "${password}",
        "old_password": "${currentPassword}"
      }


  rebootGateway:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NMC"
      "method": "reboot"
      "parameters":
        "reason": "WebUI reboot"

  rebootGroup:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NMC.GroupFunction"
      "method": "reboot"
      "parameters":
        "reason": "WebUI reboot"

  resetGateway:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NMC"
      "method": "reset"
      "parameters":
        "reason": "WebUI reset"

  resetGroup:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NMC.GroupFunction"
      "method": "factoryReset"
      "parameters":
        "reason": "WebUI reset"
  

  getEvents:
    inputs: [ channel ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getEvents }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "eventmanager"
      "method": "get_events"
      "parameters": {
        "channelid": "${channel}"
      }

  startEventing:
    inputs: [ gatewayMac ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_startEventing }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices.Device.${gatewayMac}"
      "method": "startEventing"
      "parameters": {
        "name": "sah-systemInformation",
        "types": "cpu sysinfo network"
      }


  getEventsChannel:
    inputs: [ gatewayMac ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getEventsChannel }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "eventmanager"
      "method": "get_events"
      "parameters": {
        "events": [
          {
            "service": "Devices.Device.${gatewayMac}",
            "event": "cpu"
          },
          {
            "service": "Devices.Device.${gatewayMac}",
            "event": "sysinfo",
            "data": {
              "types": "sysinfo"
            }
          },
          {
            "service": "Devices.Device.LAN",
            "event": "network",
            "data": {
              "types": "network"
            }
          }
        ],
        "channelid": 0
      }

  getGatewayDevice:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getGatewayDevice }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices"
      "method": "get"
      "parameters": {
        "expression": "self && wan && hgw",
        "flags": ""
      }


  getPrivWiFi:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getPrivWiFi }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NeMo.Intf.lan"
      "method": "getMIBs"
      "parameters": {
        "mibs": "wlanvap",
        "flag": "!backhaul"
      }


  wifiFactoryReset:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NMC.Wifi"
      "method": "wififactoryReset"
      "parameters": {}

  upgradeModem:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "WebuiupgradeService"
      "method": "upgrade"
      "parameters": {}

  getLatestVersion:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getLatestVersion }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "WebuiupgradeService"
      "method": "getLatestVersion"
      "parameters": {}
      

  getDeviceInterfaces:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getDeviceInterfaces }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices"
      "method": "get"
      "parameters":
        "expression": "self and interface and not logical"
        "flags": "no_recurse|no_actions"
    onResponse: |
      var interfaceMacs = {
        "vap2g0priv": "",
        "vap5g0priv": "",
        "guest": "",
        "vap2g0guest": "",
        "vap5g0guest": "",
        "vap2g0ext": "",
        "vap5g0ext": ""
      }

      response.body.status.map(function (interface) {
        if (interface.Key == 'vap2g0priv') {
          interfaceMacs.vap2g0priv = interface.BSSID;
        } else if (interface.Key == 'vap5g0priv') {
          interfaceMacs.vap5g0priv = interface.BSSID;
        } else if (interface.Key == 'vap2g0guest') {
          interfaceMacs.vap2g0guest = interface.BSSID;
        } else if (interface.Key == 'vap5g0guest') {
          interfaceMacs.vap5g0guest = interface.BSSID;
        } else if (interface.Key == 'vap2g0ext') {
          interfaceMacs.vap2g0ext = interface.BSSID;
        } else if (interface.Key == 'vap5g0ext') {
          interfaceMacs.vap5g0ext = interface.BSSID;
        }
      })

      response.body.interfaceMacs = interfaceMacs;


Global: |
  //@code
  var passwordConditionsMet = 0
  var index = 1;
  var numTimes = 0;

  function incrementIndex() {
    numTimes++;
    index++;
    index = index % 3;
    if ( index == 0 ) {
      index = 3;
    }
  }

  function getWifiQrCode (ssid, password) {
    var qrCode = "WIFI:S:" + ssid + ";T:WPA;P:" + password +";;";
    return (qrCode);
  }