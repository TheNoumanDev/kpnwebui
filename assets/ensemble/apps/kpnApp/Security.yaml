Import:
  - common
  - mockData

View:
  onLoad:
    invokeAPI:
      name: getStaticLeases

  styles:
    scrollableView: true
    backgroundColor: 0xFFEAEAEA

  body:
    Column:
      styles:
        fontSize: 16
      children:

        -  PageHeader:
            inputs:
              title: r@kpn.nav.security
              showConnectionWarning: ${ensemble.storage.internetConnected == false}
              showSlaveDeviceWarning: ${ isMaster() == false }
        - TabBar:
            styles: { tabPadding: 0 16, color: 0xFF009900, tabBackgroundColor: 0xFFFFFFFF, tabFontWeight: bold, activeTabColor: 0xFF009900, indicatorColor: 0xFF009900, indicatorThickness: 4 }
            selectedIndex: ${securityTabIndex}
            items:
              - label: r@kpn.security.firewall
                body: Firewall
              - label: r@kpn.security.device_blocking
                body: MacFiltering
              - label: r@kpn.security.parental_control
                body: ParentalControl
              - label: r@kpn.security.port_forwarding
                body: PortForwarding
              - label: r@kpn.security.upnp
                body: UPnP
              - label: r@kpn.security.dmz
                body: DMZ


DeviceUpdateLoadingToast:
  onLoad:
    startTimer:
      options:
        startAfter: 5
      onTimer:
        invokeAPI:
          name: getDevicesSchedule
          onResponse:
            invokeAPI:
              name: getActiveDevices
  body:
    Column:
      styles: { backgroundColor: 0xFFDAF0DA, borderRadius: 4 , width: 100, height: 100, crossAxis: center, mainAxis: center}
      children:
        - Progress:
            id: progressIndicator
            display: circular
            styles: { color: 0xFF009900, thickness: 2 }



Firewall:
  onLoad:
    invokeAPI:
      name: getRespondToPing
      onResponse:
        invokeAPI:
          name: getFirewallLevel

  Column:
    styles:
      padding: 16
    children:
      - Column:
          styles:
            backgroundColor: 0xFFFFFFFF
            shadowColor: 0xFFDEDEDE
            shadowRadius: 3
            shadowOffset: [0, 0]
            borderRadius: 10
            padding: 16
            gap: 12
          children:
            - ContentTitle:
                inputs:
                  title: r@kpn.security.firewall
            - Text:
                text: r@kpn.security.firewall_description
            - FirewallFunctionDiagram
            - Divider
            - Form:
                styles:
                  labelPosition: '${device.width > 768 ? "start" : "top"}'
                  gap: 16
                children:
                  - Switch:
                      label: r@kpn.security.allow_ping
                      value: ${getRespondToPing.body.status.enableIPv4}
                      onChange:
                        invokeAPI:
                          name: setRespondToPing
                          inputs:
                            value: ${this.value}
                          onResponse:
                            showToast:
                              widget: SuccessToast
                              styles:
                                padding: 0
                              options:
                                type: custom
                                duration: 15
                                dismissable: true
                                alignment: center

            - Divider
            - Spacer:
                styles:
                  size: 1
            - Form:
                styles:
                  labelPosition: '${device.width > 768 ? "start" : "top"}'
                  gap: 16
                children:
                  - Dropdown:
                      id: firewallLevel
                      label: r@kpn.security.firewall_level
                      value: ${getFirewallLevel.body.status}
                      items:
                        - { "label": "r@kpn.security.firewall_level_low", "value": "Low" }
                        - { "label": "r@kpn.security.firewall_level_medium" , "value": "Medium" }
                        - { "label": "r@kpn.security.firewall_level_high" , "value": "High" }
                        - { "label": "r@kpn.security.firewall_level_custom" , "value": "Custom" }
                      onChange:
                        showDialog:
                          widget: FirewallLevelEditConfirmation
                          options:
                            maxWidth: 720

                  - Text:
                      text: ${getFirewallLevelDescription(getFirewallLevel.body.status)}

            - Conditional:
                conditions:
                  - if: ${getFirewallLevel.body.status == 'Custom'}
                    CustomRules:
                  - elseif: ${getFirewallLevel.body != null}
                    StaticRules:
                      inputs:
                        firewallLevel: ${getFirewallLevel.body.status}
                  - else:
                    Progress:



FirewallLevelEditConfirmation:
  body:
    Column:
      styles:
        gap: 24
      children:
        - Text:
            text: r@kpn.security.firewall_level_edit_confirmation
            styles:
              textStyle:
                fontSize: 18
        - Row:
            styles: { mainAxis: end, crossAxis: center }
            children:
              - Button:
                  label: r@kpn.cancel
                  styles:
                    outline: true
                    margin: 0 20
                    labelStyle:
                      color: 0xFF0077CC
                    onTap:
                      invokeAPI:
                        name: getFirewallLevel
                        onResponse: closeAllDialogs
              - Button:
                  label: r@kpn.save
                  onTap:
                    invokeAPI:
                      name: setFirewallLevel
                      inputs:
                        level: ${firewallLevel.value}
                      onResponse:
                        invokeAPI:
                          name: getFirewallLevel
                          onResponse: closeAllDialogs

StaticRules:
  inputs:
    - firewallLevel
  onLoad: |
    if (getFirewallLevel.body.status == "Low")
      staticRuleDescription.text = "r@kpn.security.static_rules_description_low";
    else if (getFirewallLevel.body.status == "Medium")
      staticRuleDescription.text = "r@kpn.security.static_rules_description_medium";
    else if (getFirewallLevel.body.status == "High")
      staticRuleDescription.text = "r@kpn.security.static_rules_description_high";
  body:
    Column:
      styles:
        gap: 16
      children:
        - Divider
        - Column:
            children:
              - GreenTitle:
                  inputs:
                    title: r@kpn.security.static_rules_title
              - Text:
                  id: staticRuleDescription
                  styles:
                    textStyle:
                      overflow: wrap

        - GreenSubtitle:
            inputs:
              title: r@kpn.ip4_ip6

        - StaticRulesIp

        - Text:
            text: r@kpn.security.static_rules_remark
            styles:
              textStyle:
                color: grey
                overflow: wrap

StaticRulesIp:
  body:
    Column:
      children:
        - DataGrid:
            styles:
              headingText: { font: heading, fontSize: 16, color: grey }
            borderColor: white
            horizontalMargin: 0
            headingRowHeight: 32
            columnSpacing: 12
            DataColumns:
              - label: r@kpn.protocol
                type: text
                sortable: true
                sortKey: ProtocolLabel
              - label: r@kpn.security.custom_source_prefix
                type: text
                sortable: true
                sortKey: SourcePrefix
              - label: r@kpn.security.custom_source_port
                type: text
                sortable: true
                sortKey: SourcePort
              - label: r@kpn.security.destination_ip
                type: text
                sortable: true
                sortKey: DestinationPrefix
              - label: r@kpn.security.destination_port
                type: text
                sortable: true
                sortKey: DestinationPort
              - label: r@kpn.security.rule_id
                type: text
                sortable: true
                sortKey: Id
              - label: r@kpn.security.action
                type: text
                sortable: true
                sortKey: Target
            children:
              - DataRow:
                  visible: ${getStaticRules(getFirewallLevel.body.status).length == 0}
                  children:
                    - Text:
                        text: "-"
                    - Text:
                        text: "-"
                    - Text:
                        text: "-"
                    - Text:
                        text: "-"
                    - Text:
                        text: "-"
                    - Text:
                        text: "-"
                    - Text:
                        text: "-"
            item-template:
              data: ${getStaticRules(getFirewallLevel.body.status)}
              name: i
              template:
                DataRow:
                  children:
                    - Text:
                        text: ${i.ProtocolLabel}
                        styles:
                          textStyle:
                            color: 0xFF939393
                    - Text:
                        text: "${i.SourcePrefix.length > 0 ? i.SourcePrefix : '-'}"
                        styles:
                          textStyle:
                            color: 0xFF939393
                    - Text:
                        text: ${i.SourcePort}
                        styles:
                          textStyle:
                            color: 0xFF939393
                    - Text:
                        text: "${i.DestinationPrefix.length > 0 ? i.DestinationPrefix : '-'}"
                        styles:
                          textStyle:
                            color: 0xFF939393
                    - Text:
                        text: ${i.DestinationPort}
                        styles:
                          textStyle:
                            color: 0xFF939393
                    - Text:
                        text: ${i.Id}
                        styles:
                          textStyle:
                            color: 0xFF939393
                    - Icon:
                        name: '${i.Target == "Drop" ? 0xe993 : 0xe944}'
                        library: kpnUI
                        styles:
                          color: 0xFF939393

CustomRules:
  onLoad: |
    ensemble.invokeAPI("getFirewallPolicy"); 
    ensemble.invokeAPI("getCustomRules");
    ensemble.invokeAPI("getCustomRulesIpv6Out");
  body:
    Column:
      styles:
        gap: 16
      children:
        - Divider
        - Column:
            children:
              - GreenTitle:
                  inputs:
                    title: r@kpn.security.custom_rules_title
              - Text:
                  text: r@kpn.security.custom_rules_description
                  styles:
                    textStyle:
                      overflow: wrap
        - Flex:
            direction: '${device.width > 768 ? "horizontal" : "vertical"}'
            styles:
              mainAxis: spaceBetween
              margin: 8 0
              crossAxis: center
            children:
              - Row:
                  styles:
                    gap: 8
                    crossAxis: center
                  children:
                    - Text:
                        text: Mode
                        styles:
                          textStyle:
                            fontWeight: bold
                    - Spacer:
                        styles:
                          size: 8
                    - Row:
                        styles:
                          width: 180
                          height: 40
                          mainAxis: center
                          crossAxis: center
                          gap: 6
                          borderRadius: 4
                          borderColor: 0xFF009900
                          backgroundColor: '${ensemble.storage.customFirewallMode == "Drop" ? 0xFF009900 : "white"}'
                        children:
                          - Icon:
                              name: 0xe993
                              library: kpnUI
                              styles:
                                color: '${ensemble.storage.customFirewallMode == "Drop" ?  "white" : 0xFF009900}'
                          - Text:
                              text: r@kpn.security.drop_all
                              selectable: false
                              styles:
                                textStyle:
                                  color: '${ensemble.storage.customFirewallMode == "Drop" ?  "white" : 0xFF009900}'
                                  fontSize: 15
                                  fontWeight: bold
                        onTap:
                          showDialog:
                            widget: SetToDropAllDialog
                    - Row:
                        styles:
                          width: 180
                          height: 40
                          mainAxis: center
                          crossAxis: center
                          gap: 6
                          borderRadius: 4
                          borderColor: 0xFF009900
                          backgroundColor: '${ensemble.storage.customFirewallMode == "Accept" ? 0xFF009900 : "white"}'
                        children:
                          - Icon:
                              name: 0xe944
                              library: kpnUI
                              styles:
                                color: '${ensemble.storage.customFirewallMode == "Accept" ?  "white" : 0xFF009900}'
                          - Text:
                              text: r@kpn.security.allow_all
                              selectable: false
                              styles:
                                textStyle:
                                  color: '${ensemble.storage.customFirewallMode == "Accept" ?  "white" : 0xFF009900}'
                                  fontSize: 15
                                  fontWeight: bold
                        onTap:
                          showDialog:
                            widget: SetToAllowAllDialog

              - Button:
                  label: r@kpn.security.add_custom_rule
                  onTap:
                    showDialog:
                      widget: AddCustomRule
                      options:
                        maxWidth: 720

        - Text:
            text: r@kpn.security.custom_firewall_rules_description
        - Spacer:
            styles:
              size: 1

        - TabBar:
            styles: 
              indicatorSize: tab
              tabPadding: 4 32
              indicatorThickness: 4
              borderRadius: 8
              indicatorColor: 0xFF009900
              activeTabColor: 0xFF009900
              inactiveTabColor: 0xFF535353
              activeTabBackgroundColor: 0xFF009900
              tabBackgroundColor: 0xFFF3F3F3
              tabFontSize: 15
              tabFontWeight: bold
            items:
              - label: r@kpn.ip4
                body: CustomRulesIp4

              - label: r@kpn.ip6
                body: CustomRulesIp6

SetToDropAllDialog:
  onLoad:
    executeCode:
      body: |
        ensemble.invokeAPI("setFirewallPolicy", {
          "chain": "Custom",
          "policy": "Drop"
        });
        ensemble.invokeAPI("setFirewallPolicy", {
          "chain": "Custom_V6Out",
          "policy": "Drop"
        });
        resetRuleIndex();
      onComplete:
        startTimer:
          options:
            repeat: true
            repeatInterval: 1
            maxNumberOfTimes: "${getCustomRules.body.CustomList.length > getCustomRulesIpv6Out.body.CustomList.length ? getCustomRules.body.CustomList.length : getCustomRulesIpv6Out.body.CustomList.length}"
            startAfter: 0
          onTimer:
            executeCode:
              body: |
                //@code
                // turn relevant rules on, and the rest off
                var enable = false;
                var i = getRuleIndex();
                var thisRule = getCustomRules.body.CustomList[i];

                if (thisRule != null) {
                  if (thisRule.Target == "Accept")
                    enable = true;
                  ensemble.invokeAPI("setCustomRule", {
                    "chain": "Custom",
                    "status": enable,
                    "id": thisRule.Id,
                    "action": thisRule.Target,
                    "destinationPort": thisRule.DestinationPort,
                    "sourcePort": thisRule.SourcePort,
                    "destinationPrefix": thisRule.DestinationPrefix,
                    "sourcePrefix": thisRule.SourcePrefix,
                    "protocol": thisRule.Protocol,
                    "ipversion": thisRule.IPVersion
                  });
                }

                var thisRuleIpv6Out = getCustomRulesIpv6Out.body.CustomList[i];

                if (thisRuleIpv6Out != null) {
                  if (thisRuleIpv6Out.Target == "Accept")
                    enable = true;
                  ensemble.invokeAPI("setCustomRule", {
                    "chain": "Custom_V6Out",
                    "status": enable,
                    "id": thisRuleIpv6Out.Id,
                    "action": thisRuleIpv6Out.Target,
                    "destinationPort": thisRuleIpv6Out.DestinationPort,
                    "sourcePort": thisRuleIpv6Out.SourcePort,
                    "destinationPrefix": thisRuleIpv6Out.DestinationPrefix,
                    "sourcePrefix": thisRuleIpv6Out.SourcePrefix,
                    "protocol": thisRuleIpv6Out.Protocol,
                    "ipversion": thisRuleIpv6Out.IPVersion
                  });
                }
                incrementRuleIndex();
          onTimerComplete:
            invokeAPI:
              name: getCustomRules
              onResponse:
                invokeAPI:
                  name: getCustomRulesIpv6Out
                  onResponse: closeAllDialogs

  body:
    Column:
      styles: {borderRadius: 4 , width: 200, height: 150, crossAxis: center, mainAxis: center}
      children:
        - Progress:
            id: progressIndicator
            display: circular
            styles: { color: 0xFF009900, thickness: 2 }
        - Text:
            text: r@kpn.security.firewalls_rules_progress
            styles:
              padding: 20 5 5 5
              textStyles:
                overflow: wrap

SetToAllowAllDialog:
  onLoad:
    executeCode:
      body: |
        ensemble.invokeAPI("setFirewallPolicy", {
          "chain": "Custom",
          "policy": "Accept"
        });
        ensemble.invokeAPI("setFirewallPolicy", {
          "chain": "Custom_V6Out",
          "policy": "Accept"
        });
        resetRuleIndex();
      onComplete:
        startTimer:
          options:
            repeat: true
            repeatInterval: 1
            maxNumberOfTimes: "${getCustomRules.body.CustomList.length > getCustomRulesIpv6Out.body.CustomList.length ? getCustomRules.body.CustomList.length : getCustomRulesIpv6Out.body.CustomList.length}"
            startAfter: 0
          onTimer:
            executeCode:
              body: |
                //@code
                // turn relevant rules on, and the rest off
                var enable = false;
                var i = getRuleIndex();
                var thisRule = getCustomRules.body.CustomList[i];

                if (thisRule != null) {
                  if (thisRule.Target == "Drop")
                    enable = true;
                  ensemble.invokeAPI("setCustomRule", {
                    "chain": "Custom",
                    "status": enable,
                    "id": thisRule.Id,
                    "action": thisRule.Target,
                    "destinationPort": thisRule.DestinationPort,
                    "sourcePort": thisRule.SourcePort,
                    "destinationPrefix": thisRule.DestinationPrefix,
                    "sourcePrefix": thisRule.SourcePrefix,
                    "protocol": thisRule.Protocol,
                    "ipversion": thisRule.IPVersion
                  });
                }

                var thisRuleIpv6Out = getCustomRulesIpv6Out.body.CustomList[i];

                if (thisRuleIpv6Out != null) {
                  if (thisRuleIpv6Out.Target == "Drop")
                    enable = true;
                  ensemble.invokeAPI("setCustomRule", {
                    "chain": "Custom_V6Out",
                    "status": enable,
                    "id": thisRuleIpv6Out.Id,
                    "action": thisRuleIpv6Out.Target,
                    "destinationPort": thisRuleIpv6Out.DestinationPort,
                    "sourcePort": thisRuleIpv6Out.SourcePort,
                    "destinationPrefix": thisRuleIpv6Out.DestinationPrefix,
                    "sourcePrefix": thisRuleIpv6Out.SourcePrefix,
                    "protocol": thisRuleIpv6Out.Protocol,
                    "ipversion": thisRuleIpv6Out.IPVersion
                  });
                }
                incrementRuleIndex();
          onTimerComplete:
            invokeAPI:
              name: getCustomRules
              onResponse:
                invokeAPI:
                  name: getCustomRulesIpv6Out
                  onResponse: closeAllDialogs

  body:
    Column:
      styles: {borderRadius: 4 , width: 200, height: 150, crossAxis: center, mainAxis: center}
      children:
        - Progress:
            id: progressIndicator
            display: circular
            styles: { color: 0xFF009900, thickness: 2 }
        - Text:
            text: r@kpn.security.firewalls_rules_progress
            styles:
              padding: 20 5 5 5
              textStyles:
                overflow: wrap


CustomRulesIp4:
  body:
    Column:
      styles:
        padding: 16 0
      children:
        - DataGrid:
            styles:
              headingText: { font: heading, fontSize: 16, color: grey }
            borderColor: white
            horizontalMargin: 0
            headingRowHeight: 32
            columnSpacing: 12
            DataColumns:
              - label: " "
                type: text
              - label: r@kpn.protocol
                type: text
                sortable: true
                sortKey: ProtocolLabel
              - label: r@kpn.security.custom_source_prefix
                type: text
              - label: r@kpn.security.custom_source_port
                type: text
              - label: r@kpn.security.destination_ip
                type: text
              - label: r@kpn.security.destination_port
                type: text
              - label: r@kpn.security.rule_id
                type: text
                sortable: true
                sortKey: Id
              - label: r@kpn.security.action
                type: text
              - label: " "
                type: text
            children:
              - DataRow:
                  visible: "${getCustomRules.body.CustomList.length > 0 ? false : true }"
                  children:
                    - Text: {text: ''}
                    - Text: {text: '-'}
                    - Text: {text: '-'}
                    - Text: {text: '-'}
                    - Text: {text: '-'}
                    - Text: {text: '-'}
                    - Text: {text: '-'}
                    - Text: {text: '-'}
                    - Text: {text: ''}

            item-template:
              data: ${getCustomRules.body.CustomList}
              name: i
              template:
                DataRow:
                  children:
                    - Switch:
                        id: customRuleEnable
                        value: ${i.Enable}
                        onChange:
                          invokeAPI:
                            name: setCustomRule
                            inputs:
                              chain: Custom
                              status: ${customRuleEnable.value}
                              id: ${i.Id}
                              action: ${i.Target}
                              destinationPort: ${i.DestinationPort}
                              sourcePort: ${i.SourcePort}
                              destinationPrefix: ${i.DestinationPrefix}
                              sourcePrefix: ${i.SourcePrefix}
                              protocol: ${i.Protocol}
                              ipversion: ${i.IPVersion}

                            onResponse:
                              executeCode:
                                body: |
                                  //@code
                                  ensemble.invokeAPI("getCustomRules");
                                onComplete:
                                  showToast:
                                    widget: SuccessToast
                                    styles:
                                      padding: 0
                                    options:
                                      type: custom
                                      duration: 15
                                      dismissible: true
                                      position: center
                    - Text:
                        text: ${i.ProtocolLabel}
                    - Text:
                        text: "${i.SourcePrefix.length > 0 ? i.SourcePrefix : '-'}"
                    - Text:
                        text: ${i.SourcePort}
                    - Text:
                        text: "${i.DestinationPrefix.length > 0 ? i.DestinationPrefix : '-'}"
                    - Text:
                        text: ${i.DestinationPort}
                    - Text:
                        id: customRuleIdToEdit
                        text: ${i.Id}
                    - Icon:
                        name: '${i.Target == "Drop" ? 0xe993 : 0xe944}'
                        library: kpnUI
                    - Row:
                        styles:
                          gap: 8
                        children:
                          - Icon:
                              testId: editCustomRuleAction
                              name: 0xe931
                              library: kpnUI
                              styles: { color: 0xFF0077CC }
                              onTap:
                                showDialog:
                                  widget: EditCustomRule
                                  options:
                                    maxWidth: 720
                          ## if destination port is either 1883 and 1893, show a confirmation first
                          - Conditional:
                              conditions:
                                - if: ${i.DestinationPort == 1883 || i.DestinationPort == 1893}
                                  Icon:
                                    testId: deleteCustomRuleAction
                                    name: 0xe92a
                                    library: kpnUI
                                    styles: { color: 0xFF0077CC }
                                    onTap:
                                      showDialog:
                                        widget: 
                                          DeleteCustomRuleConfirmation:
                                            inputs:
                                              ruleId: ${i.Id}
                                        options:
                                          maxWidth: 600
                                
                                - else:
                                  Icon:
                                    testId: deleteCustomRuleAction
                                    name: 0xe92a
                                    library: kpnUI
                                    styles: { color: 0xFF0077CC }
                                    onTap:
                                      invokeAPI:
                                        name: deleteCustomRule
                                        inputs:
                                          id: ${i.Id}
                                          chain: Custom
                                        onResponse:
                                          invokeAPI:
                                            name: getCustomRules

DeleteCustomRuleConfirmation:
  inputs:
    - ruleId
  body:
    Column:
      styles:
        gap: 24
      children:
        - Text:
            text: r@kpn.security.delete_custom_rule_wifi_management
            styles:
              textStyle:
                fontSize: 18
        - Row:
            styles: { mainAxis: end, crossAxis: center }
            children:
              - Button:
                  label: r@kpn.cancel
                  styles:
                    outline: true
                    margin: 0 20
                    labelStyle:
                      color: 0xFF0077CC
                    onTap: closeAllDialogs
              - Button:
                  label: r@kpn.apply
                  onTap:
                    invokeAPI:
                      name: deleteCustomRule
                      inputs:
                        id: ${ruleId}
                        chain: Custom
                      onResponse:
                        invokeAPI:
                          name: getCustomRules
                          onResponse: closeAllDialogs


CustomRulesIp6:
  body:
    Column:
      styles:
        padding: 16 0
      children:
        - DataGrid:
            styles:
              headingText: { font: heading, fontSize: 16, color: grey }
            borderColor: white
            horizontalMargin: 0
            headingRowHeight: 32
            columnSpacing: 12
            DataColumns:
              - label: " "
                type: text
              - label: r@kpn.protocol
                type: text
                sortable: true
                sortKey: ProtocolLabel
              - label: r@kpn.security.custom_source_prefix
                type: text
                sortable: true
                sortKey: SourcePrefix
              - label: r@kpn.security.custom_source_port
                type: text
                sortable: true
                sortKey: SourcePort
              - label: r@kpn.security.destination_ip
                type: text
                sortable: true
                sortKey: DestinationPrefix
              - label: r@kpn.security.destination_port
                type: text
                sortable: true
                sortKey: DestinationPort
              - label: r@kpn.security.rule_id
                type: text
                sortable: true
                sortKey: Id
              - label: r@kpn.security.action
                type: text
                sortable: true
                sortKey: Target
              - label: " "
                type: text
            children:
              - DataRow:
                  visible: "${getCustomRulesIpv6Out.body.CustomList.length > 0 ? false : true }"
                  children:
                    - Text: {text: ''}
                    - Text: {text: '-'}
                    - Text: {text: '-'}
                    - Text: {text: '-'}
                    - Text: {text: '-'}
                    - Text: {text: '-'}
                    - Text: {text: '-'}
                    - Text: {text: '-'}
                    - Text: {text: ''}

            item-template:
              data: ${getCustomRulesIpv6Out.body.CustomList}
              name: i
              template:
                DataRow:
                  children:
                    - Switch:
                        id: customRuleEnable
                        value: ${i.Enable}
                        onChange:
                          invokeAPI:
                            name: setCustomRule
                            inputs:
                              chain: Custom_V6Out
                              status: ${customRuleEnable.value}
                              id: ${i.Id}
                              action: ${i.Target}
                              destinationPort: ${i.DestinationPort}
                              sourcePort: ${i.SourcePort}
                              destinationPrefix: ${i.DestinationPrefix}
                              sourcePrefix: ${i.SourcePrefix}
                              protocol: ${i.Protocol}
                              ipversion: ${i.IPVersion}

                            onResponse:
                              executeCode:
                                body: |
                                  //@code
                                  ensemble.invokeAPI("getCustomRulesIpv6Out");
                                onComplete:
                                  showToast:
                                    widget: SuccessToast
                                    styles:
                                      padding: 0
                                    options:
                                      type: custom
                                      duration: 15
                                      dismissible: true
                                      position: center
                    - Text:
                        text: ${i.ProtocolLabel}
                    - Text:
                        text: "${i.SourcePrefix.length > 0 ? i.SourcePrefix : '-'}"
                    - Text:
                        text: ${i.SourcePort}
                    - Text:
                        text: "${i.DestinationPrefix.length > 0 ? i.DestinationPrefix : '-'}"
                    - Text:
                        text: ${i.DestinationPort}
                    - Text:
                        id: customRuleIdToEdit
                        text: ${i.Id}
                    - Icon:
                        name: '${i.Target == "Drop" ? 0xe993 : 0xe944}'
                        library: kpnUI
                    - Row:
                        styles:
                          gap: 8
                        children:
                          - Icon:
                              testId: editCustomRuleIpv6Action
                              name: 0xe931
                              library: kpnUI
                              styles: { color: 0xFF0077CC }
                              onTap:
                                showDialog:
                                  widget: EditCustomRuleIpv6
                                  options:
                                    maxWidth: 720
                          - Icon:
                              testId: deleteCustomRuleAction
                              name: 0xe92a
                              library: kpnUI
                              styles: { color: 0xFF0077CC }
                              onTap:
                                invokeAPI:
                                  name: deleteCustomRule
                                  inputs:
                                    id: ${i.Id}
                                    chain: Custom_V6Out
                                  onResponse:
                                    invokeAPI:
                                      name: getCustomRulesIpv6Out


AddCustomRule:
  body:
    Column:
      styles:
        gap: 12
      children:
        - GreenTitle:
            inputs:
              title: r@kpn.security.custom_rules_title
        - Form:
            styles:
              labelPosition: '${device.width > 768 ? "start" : "top"}'
              labelMaxWidth: 200
              gap: 16
            children:
              - Switch:
                  id: activateCustomRule
                  label: r@kpn.activate
                  value: true
              - Dropdown:
                  id: customRuleIpVersion
                  label: r@kpn.security.ip_version
                  items:
                    - {"label": "r@kpn.ip4_address", "value": 4}
                    - {"label": "r@kpn.ip6_address", "value": 6}
                  value: 4
                  required: true
              - Dropdown:
                  id: customRuleProtocol
                  label: r@kpn.protocol
                  items:
                    - {"label": "UDP", "value": "17"}
                    - {"label": "TCP", "value": "6"}
                    - {"label": "UDP/TCP", "value": "6,17"}
                  value: "6,17"
                  required: true
              - TextInput:
                  id: customRuleSourcePrefix
                  label: r@kpn.security.custom_source_prefix
                  labelHint: r@kpn.security.rule_ip_tooltip
              - TextInput:
                  id: customRuleSourcePort
                  label: r@kpn.security.custom_source_port
                  validator:
                    regex: ^(?:(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])(?:-(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5]))?)$
                    regexError: r@kpn.invalid_port
                  labelHint: r@kpn.security.rule_port_tooltip
              - TextInput:
                  id: customRuleDestinationIp
                  label: r@kpn.security.destination_ip
                  # inputType: ipAddress
                  labelHint: r@kpn.security.rule_ip_tooltip
              - TextInput:
                  id: customRuleDestinationPort
                  label: r@kpn.security.destination_port
                  validator:
                    regex: ^(?:(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])(?:-(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5]))?)$
                    regexError: r@kpn.invalid_port
                  labelHint: r@kpn.security.rule_port_tooltip
              - TextInput:
                  id: customRuleId
                  label: r@kpn.security.rule_id
                  required: true
              - Dropdown:
                  id: customRuleAction
                  label: r@kpn.security.action
                  items:
                    - {"label": "r@kpn.security.action_accept", "value": "Accept"}
                    - {"label": "r@kpn.security.action_drop", "value": "Drop"}
                  value: '${ensemble.storage.customFirewallMode == "Drop" ? "Accept" : "Drop"}'
                  required: true
                  onChange: |
                    if (ensemble.storage.customFirewallMode == "Drop") {
                      if (this.value == "Drop") {
                        customRuleActionHelpText.text = "r@kpn.security.drop_all_action_description";
                        saveButton.enabled = false;
                      } else {
                        saveButton.enabled = true;
                        customRuleActionHelpText.text = '';
                      }
                    } else if (ensemble.storage.customFirewallMode == "Accept") {
                      if (this.value == "Accept") {
                        customRuleActionHelpText.text = "r@kpn.security.allow_all_action_description";
                        saveButton.enabled = false;
                      } else {
                        saveButton.enabled = true;
                        customRuleActionHelpText.text = '';
                      }
                    } else {
                      saveButton.enabled = true;
                      customRuleActionHelpText.text = '';
                    }
              - Text:
                  id: customRuleActionHelpText
                  
              - Row:
                  styles: { mainAxis: end, crossAxis: center }
                  children:
                    - Text:
                        id: customRuleFormStatus
                    - Button:
                        label: r@kpn.cancel
                        styles:
                          outline: true
                          margin: 0 20
                          labelStyle:
                            color: 0xFF0077CC
                          onTap: closeAllDialogs
                    - Button:
                        label: r@kpn.save
                        validateForm: true
                        id: saveButton
                        onTap:
                          invokeAPI:
                            name: setCustomRule
                            inputs:
                              chain: '${customRuleIpVersion.value == 4 ? "Custom" : "Custom_V6Out"}'
                              status: ${activateCustomRule.value}
                              id: ${customRuleId.value}
                              protocol: ${customRuleProtocol.value}
                              action: ${customRuleAction.value}
                              destinationPort: ${customRuleDestinationPort.value}
                              destinationIp: ${customRuleDestinationIp.value}
                              sourcePort: ${customRuleSourcePort.value}
                              sourcePrefix: ${customRuleSourcePrefix.value}
                              ipversion: ${customRuleIpVersion.value}
                            onResponse:
                              executeCode:
                                body: |
                                  if (customRuleIpVersion.value == 4)
                                    ensemble.invokeAPI("getCustomRules");
                                  else
                                    ensemble.invokeAPI("getCustomRulesIpv6Out");
                                onComplete: closeAllDialogs
                            onError: |
                              //@code
                              customRuleFormStatus.text = 'r@kpn.error';


EditCustomRule:
  body:
    Column:
      styles:
        gap: 12
      children:
        - GreenTitle:
            inputs:
              title: r@kpn.security.edit_custom_rule
        - Form:
            styles:
              labelPosition: '${device.width > 768 ? "start" : "top"}'
              labelMaxWidth: 200
              gap: 16
            children:
              - Switch:
                  id: activateCustomRule
                  label: r@kpn.activate
                  value: ${getCustomRules.body.status[customRuleIdToEdit.text].Enable}
              - Dropdown:
                  id: customRuleIpVersion
                  label: r@kpn.security.ip_version
                  items:
                    - { "label": "r@kpn.ip4_address", "value": 4 }
                    - { "label": "r@kpn.ip6_address", "value": 6 }
                  value: ${getCustomRules.body.status[customRuleIdToEdit.text].IPVersion}
                  required: true

              - Dropdown:
                  id: customRuleProtocol
                  label: r@kpn.protocol
                  items:
                    - { "label": "UDP", "value": "17" }
                    - { "label": "TCP", "value": "6" }
                    - { "label": "UDP/TCP", "value": "6,17" }
                  value: ${getCustomRules.body.status[customRuleIdToEdit.text].Protocol}
                  required: true
              - TextInput:
                  id: customRuleSourcePrefix
                  label: r@kpn.security.custom_source_prefix
                  labelHint: r@kpn.security.rule_ip_tooltip
                  value: ${getCustomRules.body.status[customRuleIdToEdit.text].SourcePrefix}
              - TextInput:
                  id: customRuleSourcePort
                  label: r@kpn.security.custom_source_port
                  value: ${getCustomRules.body.status[customRuleIdToEdit.text].SourcePort}
                  labelHint: r@kpn.security.rule_port_tooltip
                  validator:
                    regex: ^(?:(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])(?:-(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5]))?)$
                    regexError: r@kpn.invalid_port
              - TextInput:
                  id: customRuleDestinationIp
                  label: r@kpn.security.destination_ip
                  labelHint: r@kpn.security.rule_ip_tooltip
                  value: ${getCustomRules.body.status[customRuleIdToEdit.text].DestinationPrefix}
              - TextInput:
                  id: customRuleDestinationPort
                  label: r@kpn.security.destination_port
                  value: ${getCustomRules.body.status[customRuleIdToEdit.text].DestinationPort}
                  labelHint: r@kpn.security.rule_port_tooltip
                  validator:
                    regex: ^(?:(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])(?:-(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5]))?)$
                    regexError: r@kpn.invalid_port
              - TextInput:
                  id: customRuleCurrentId
                  enabled: false
                  required: true
                  label: r@kpn.description
                  value: ${customRuleIdToEdit.text}
              - Dropdown:
                  id: customRuleAction
                  label: r@kpn.security.action
                  items:
                    - { "label": "r@kpn.security.action_accept", "value": "Accept" }
                    - { "label": "r@kpn.security.action_drop", "value": "Drop" }
                  value: ${getCustomRules.body.status[customRuleIdToEdit.text].Target}
                  required: true
                  onChange: |
                    if (ensemble.storage.customFirewallMode == "Drop") {
                      if (this.value == "Drop") {
                        customRuleActionHelpText.text = "r@kpn.security.drop_all_action_description";
                        saveButton.enabled = false;
                      } else {
                        saveButton.enabled = true;
                        customRuleActionHelpText.text = '';
                      }
                    } else if (ensemble.storage.customFirewallMode == "Accept") {
                      if (this.value == "Accept") {
                        customRuleActionHelpText.text = "r@kpn.security.allow_all_action_description";
                        saveButton.enabled = false;
                      } else {
                        saveButton.enabled = true;
                        customRuleActionHelpText.text = '';
                      }
                    } else {
                      saveButton.enabled = true;
                      customRuleActionHelpText.text = '';
                    }
              - Text:
                  id: customRuleActionHelpText
              - Row:
                  styles: { mainAxis: end, crossAxis: center }
                  children:
                    - Text:
                        id: customRuleFormStatus
                    - Button:
                        label: r@kpn.cancel
                        styles:
                          outline: true
                          margin: 0 20
                          labelStyle:
                            color: 0xFF0077CC
                          onTap: closeAllDialogs
                    - Button:
                        label: r@kpn.save
                        validateForm: true
                        onTap:
                          invokeAPI:
                            name: setCustomRule
                            inputs:
                              chain: '${customRuleIpVersion.value == 4 ? "Custom" : "Custom_V6Out"}'
                              id: ${customRuleCurrentId.value}
                              status: ${activateCustomRule.value}
                              description: ${customRuleApplicationInput.value}
                              protocol: ${customRuleProtocol.value}
                              action: ${customRuleAction.value}
                              destinationPort: ${customRuleDestinationPort.value}
                              destinationIp: ${customRuleDestinationIp.value}
                              sourcePort: ${customRuleSourcePort.value}
                              sourcePrefix: ${customRuleSourcePrefix.value}
                              ipversion: ${customRuleIpVersion.value}
                            onResponse:
                              executeCode:
                                body: |
                                  if (customRuleIpVersion.value == 4)
                                    ensemble.invokeAPI("getCustomRules");
                                  else
                                    ensemble.invokeAPI("getCustomRulesIpv6Out");
                                onComplete: closeAllDialogs
                            onError: |
                              //@code
                              customRuleFormStatus.text = 'r@kpn.error';



EditCustomRuleIpv6:
  body:
    Column:
      styles:
        gap: 12
      children:
        - GreenTitle:
            inputs:
              title: r@kpn.security.edit_custom_rule
        - Form:
            styles:
              labelPosition: '${device.width > 768 ? "start" : "top"}'
              labelMaxWidth: 200
              gap: 16
            children:
              - Switch:
                  id: activateCustomRule
                  label: r@kpn.activate
                  value: ${getCustomRulesIpv6Out.body.status[customRuleIdToEdit.text].Enable}
              - Dropdown:
                  id: customRuleIpVersion
                  label: r@kpn.security.ip_version
                  items:
                    - { "label": "r@kpn.ip4_address", "value": 4 }
                    - { "label": "r@kpn.ip6_address", "value": 6 }
                  value: ${getCustomRulesIpv6Out.body.status[customRuleIdToEdit.text].IPVersion}
                  required: true

              - Dropdown:
                  id: customRuleProtocol
                  label: r@kpn.protocol
                  items:
                    - { "label": "UDP", "value": "17" }
                    - { "label": "TCP", "value": "6" }
                    - { "label": "UDP/TCP", "value": "6,17" }
                  value: ${getCustomRulesIpv6Out.body.status[customRuleIdToEdit.text].Protocol}
                  required: true
              - TextInput:
                  id: customRuleSourcePrefix
                  label: r@kpn.security.custom_source_prefix
                  labelHint: r@kpn.security.rule_ip_tooltip
                  value: ${getCustomRulesIpv6Out.body.status[customRuleIdToEdit.text].SourcePrefix}
              - TextInput:
                  id: customRuleSourcePort
                  label: r@kpn.security.custom_source_port
                  value: ${getCustomRulesIpv6Out.body.status[customRuleIdToEdit.text].SourcePort}
                  labelHint: r@kpn.security.rule_port_tooltip
                  validator:
                    regex: ^(?:(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])(?:-(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5]))?)$
                    regexError: r@kpn.invalid_port
              - TextInput:
                  id: customRuleDestinationIp
                  label: r@kpn.security.destination_ip
                  labelHint: r@kpn.security.rule_ip_tooltip
                  value: ${getCustomRulesIpv6Out.body.status[customRuleIdToEdit.text].DestinationPrefix}
              - TextInput:
                  id: customRuleDestinationPort
                  label: r@kpn.security.destination_port
                  value: ${getCustomRulesIpv6Out.body.status[customRuleIdToEdit.text].DestinationPort}
                  labelHint: r@kpn.security.rule_port_tooltip
                  validator:
                    regex: ^(?:(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])(?:-(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5]))?)$
                    regexError: r@kpn.invalid_port
              - TextInput:
                  id: customRuleCurrentId
                  enabled: false
                  required: true
                  label: r@kpn.description
                  value: ${customRuleIdToEdit.text}
              - Dropdown:
                  id: customRuleAction
                  label: r@kpn.security.action
                  items:
                    - { "label": "r@kpn.security.action_accept", "value": "Accept" }
                    - { "label": "r@kpn.security.action_drop", "value": "Drop" }
                  value: ${getCustomRulesIpv6Out.body.status[customRuleIdToEdit.text].Target}
                  required: true
                  onChange: |
                    if (ensemble.storage.customFirewallMode == "Drop") {
                      if (this.value == "Drop") {
                        customRuleActionHelpText.text = "r@kpn.security.drop_all_action_description";
                        saveButton.enabled = false;
                      } else {
                        saveButton.enabled = true;
                        customRuleActionHelpText.text = '';
                      }
                    } else if (ensemble.storage.customFirewallMode == "Accept") {
                      if (this.value == "Accept") {
                        customRuleActionHelpText.text = "r@kpn.security.allow_all_action_description";
                        saveButton.enabled = false;
                      } else {
                        saveButton.enabled = true;
                        customRuleActionHelpText.text = '';
                      }
                    } else {
                      saveButton.enabled = true;
                      customRuleActionHelpText.text = '';
                    }
              - Text:
                  id: customRuleActionHelpText
              - Row:
                  styles: { mainAxis: end, crossAxis: center }
                  children:
                    - Text:
                        id: customRuleFormStatus
                    - Button:
                        label: r@kpn.cancel
                        styles:
                          outline: true
                          margin: 0 20
                          labelStyle:
                            color: 0xFF0077CC
                          onTap: closeAllDialogs
                    - Button:
                        label: r@kpn.save
                        validateForm: true
                        onTap:
                          invokeAPI:
                            name: setCustomRule
                            inputs:
                              chain: '${customRuleIpVersion.value == 4 ? "Custom" : "Custom_V6Out"}'
                              id: ${customRuleCurrentId.value}
                              status: ${activateCustomRule.value}
                              description: ${customRuleApplicationInput.value}
                              protocol: ${customRuleProtocol.value}
                              action: ${customRuleAction.value}
                              destinationPort: ${customRuleDestinationPort.value}
                              destinationIp: ${customRuleDestinationIp.value}
                              sourcePort: ${customRuleSourcePort.value}
                              sourcePrefix: ${customRuleSourcePrefix.value}
                              ipversion: ${customRuleIpVersion.value}
                            onResponse:
                              executeCode:
                                body: |
                                  if (customRuleIpVersion.value == 4)
                                    ensemble.invokeAPI("getCustomRules");
                                  else
                                    ensemble.invokeAPI("getCustomRulesIpv6Out");
                                onComplete: closeAllDialogs
                            onError: |
                              //@code
                              customRuleFormStatus.text = 'r@kpn.error';



Ipv6OpenPortForm:
  onLoad:
    executeActionGroup:
      actions:
        - executeCode:
            body: |
              ensemble.storage.deviceIpv6Items = null;
        - invokeAPI:
            name: getDevices
            onResponse: |
              var deviceList = [];
              response.body.status.map(function(d){
                deviceList.push({
                  "label": d.Name,
                  "value": d.Key
                });
              });
              ipv6OpenPortDeviceList.items = deviceList;
  Column:
    children:
      - Form:
          styles:
            labelPosition: '${device.width > 768 ? "start" : "top"}'
            labelMaxWidth: 200
            gap: 16
          children:
            - Switch:
                id: activate
                label: r@kpn.activate
                value: false
            - Dropdown:
                id: ipv6RuleApplication
                label: r@kpn.security.service
                itemsFromString: 'HTTP,HTTPS,POP3,POP3S,SMTPAuth,SMTP,FTP,SSH,NTP,NNTP,NNTPS,DNS,IRC,IMAP,IMAPS,ISAKMP,PSEC-NAT-T,ESP-ALARM-TOOL,ESP-ALARM,Nieuw...'
                required: true
                onChange: |
                  //@code
                  if (this.value == 'Nieuw...') {
                    ipv6RuleApplicationInput.visible = true;
                    ipv6RuleApplicationInput.value = '';
                  } else {
                    ipv6RuleApplicationInput.visible = false;
                    ipv6RuleApplicationInput.value = this.value;
                    port.value = servicesPort[this.value];
                  }
            - TextInput:
                id: ipv6RuleApplicationInput
                visible: false
                required: true

            - Dropdown:
                id: protocol
                label: r@kpn.protocol
                items: [
                  {"label": "UDP", "value": "17"},
                  {"label": "TCP", "value": "6"},
                  {"label": "UDP/TCP", "value": "6,17"}
                ]
                value: 6,17
                required: true


            - Dropdown:
                id: ipv6OpenPortDeviceList
                label: r@kpn.device
                required: false
                onChange: |
                  ensemble.storage.deviceIpv6Items = getDeviceGlobalIpv6List (getDevices.body.status, this.value);

            - Ipv6DeviceSelector:
                events:
                  onIpSelect:
                    executeCode:
                      body: |
                        equipmentIP.value = event.data.ip;
            - TextInput:
                id: equipmentIP
                label: r@kpn.ip6_address
                required: true
                validator:
                  regex: ^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$
                  regexError: r@kpn.invalid_ipv6
            - TextInput:
                id: port
                label: r@kpn.port
                required: true
                validator:
                  regex: ^(?:(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])(?:-(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5]))?)$
                  regexError: r@kpn.invalid_port
            - Row:
                styles: { mainAxis: end, gap: 20, crossAxis: center }
                children:
                  - Text:
                      id: saveStatus
                  - Button:
                      label: r@kpn.cancel
                      styles:
                        outline: true
                        labelStyle:
                          color: 0xFF0077CC
                      onTap:
                        action: closeAllDialogs
                  - Button:
                      label: r@kpn.save
                      validateForm: true
                      onTap:
                        invokeAPI:
                          name: addIPv6OpenPort
                          inputs:
                            enable: ${activate.value}
                            description: ${ipv6RuleApplicationInput.value}
                            port: ${port.value}
                            ip: ${equipmentIP.value}
                            protocol: ${protocol.value}
                          onResponse:
                            invokeAPI:
                              name: getIPv6OpenPorts
                          onError:
                            //@code
                            saveStatus.text = 'r@kpn.error';


FunctionDiagramMacFiltering:
  body:
    Row:
      styles:
        crossAxis: center
        gap: 16
        width: 428
      children:
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Icon:
                  name: 0xe970
                  library: kpnSI
                  styles: 
                    size: 80
                    color: 0xFF009900
              - Text:
                  text: internet
                  styles:
                    textStyle:
                      color: 0xFF009900
                      fontWeight: w600
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Image:
                  source: arrow_left.png
                  styles:
                    width: 48
              - Text:
                  text: " " 
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Icon:
                  name: 0xe9cc
                  library: kpnSI
                  styles:
                    size: 80
                    color: 0xFF009900
              - Text:
                  text: modem
                  styles:
                    textStyle:
                      color: 0xFF009900
                      fontWeight: w600
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Image:
                  source: arrow_left.png
                  styles:
                    width: 48
              - Text:
                  text: " " 
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Icon:
                  name: 0xE8E6
                  library: kpnUI
                  styles:
                    size: 80
                    color: 0xFF009900
              - Text:
                  text: wifinetwerk
                  styles:
                    textStyle:
                      color: 0xFF009900
                      fontWeight: w600

MacFiltering:
  onLoad:
    invokeAPI:
      name: getMacFiltering
      onResponse:
        invokeAPI:
          name: getWifiDevices
          onResponse: |
            ensemble.storage.filteredDevicesMac = [];
            var extenders = getExtenderMacsToBeWhiteListed();
            var extenderMacs = extenders.keys();
            var currentFilteredDevices = getMacFiltering.body.status.wlanvap.vap2g0priv.MACFiltering.Entry;
            for (key in currentFilteredDevices) {
              if ( extenders[currentFilteredDevices[key].MACAddress] != null 
                    && extenders[currentFilteredDevices[key].MACAddress]['incrementedMac'] == true ) {
                continue;//this is the fake incremented MAC address, we won't show it to avoid confusion
              }
              ensemble.storage.filteredDevicesMac.push(currentFilteredDevices[key].MACAddress);;
            }
            
            var devicesList = [];
            getWifiDevices.body.status.wifi.map(function(d) {
              // we will not add extenders to this list
              if (extenderMacs.indexOf(d.Key) == -1)
                devicesList.push({
                  "label": d.Name,
                  "value": d.Key
                });
            });
            macFilteringDeviceSelector.items = devicesList;

  Column:
    styles:
      padding: 16
    children:
      - Column:
          styles:
            backgroundColor: 0xFFFFFFFF
            shadowColor: 0xFFDEDEDE
            shadowRadius: 3
            shadowOffset: [ 0, 0 ]
            borderRadius: 10
            padding: 16
            gap: 12
          children:
            - ContentTitle:
                inputs:
                  title: r@kpn.security.device_blocking_title
            - Text:
                text: r@kpn.security.device_blocking_description
            - FunctionDiagramMacFiltering

            - Divider:
                styles:
                  margin: 8 0
            - Form:
                styles:
                  labelPosition: '${device.width > 768 ? "start" : "top"}'
                  gap: 16
                children:
                  - Switch:
                      id: macFilteringSwitch
                      label: r@kpn.security.device_blocking_switch
                      value: ${getMacFiltering.body.status.wlanvap.vap2g0priv.MACFiltering.Mode == "WhiteList" }
                      onChange:
                        executeCode:
                          body: |
                            if (ensemble.storage.filteredDevicesMac.length > 0)
                              setMacFilteringObject(true); // add extenders
                            else
                              setMacFilteringObject(false);
                          onComplete:
                            invokeAPI:
                              name: setMacFiltering
                              inputs:
                                state: '${macFilteringSwitch.value == true ? "WhiteList" : "Off"}'
                                entryObject: ${ensemble.storage.macFilteringObject}
                              onResponse: |
                                if (macFilteringSwitch.value == true) {
                                  var widget = "MacFilteringEnabledToast";
                                  var styles = {
                                    padding: 0
                                  };
                                  var options = {
                                    type: 'custom',
                                    duration: 60,
                                    dismissible: true,
                                    alignment: 'topCenter'
                                  };
                                  showToast(widget, styles, options);
                                }

            - Divider:
                styles:
                  margin: 8 0
            - Form:
                styles:
                  labelPosition: '${device.width > 768 ? "start" : "top"}'
                  gap: 16
                children:
                  - Dropdown:
                      id: macFilteringDeviceSelector
                      label: r@kpn.device
                      required: false
                      onChange: |
                        //@code
                        macAddress.value = this.value;
                  - TextInput:
                      id: macAddress
                      label: r@kpn.mac_address
                      required: true
                      labelHint: r@kpn.security.device_blocking_mac_address_hint
                  - Button:
                      validateForm: true
                      label: r@kpn.add
                      styles:
                        alignment: topRight
                      onTap:
                        executeCode:
                          body: |
                            // allow entering multiple macs using comma
                            var macAddressesArray = [];
                            macAddressesArray = macAddress.value.split(",");
                            macAddressesArray.map(function (mac) {
                              if (mac != "")
                                ensemble.storage.filteredDevicesMac.push(mac);
                            });
                            setMacFilteringObject(true);
                          onComplete:
                            invokeAPI:
                              name: setMacFiltering
                              inputs:
                                state: '${macFilteringSwitch.value == true ? "WhiteList" : "Off"}'
                                entryObject: ${ensemble.storage.macFilteringObject}
                                   

            - Divider:
                styles:
                  margin: 8 0

            - Flex:
                direction: '${device.width > 768 ? "horizontal" : "vertical"}'
                styles: 
                  mainAxis: spaceBetween
                  crossAxis: center
                  gap: 16
                children:
                  - GreenSubtitle:
                      inputs:
                        title: r@kpn.security.allowed_devices
                        
                  - Row:
                      styles:
                        gap: 16
                      children:
                        - Button:
                            label: r@kpn.security.whitelist_all_wifi_devices
                            onTap:
                              executeCode:
                                body: |
                                  getWifiDevices.body.status.wifi.map(function(d) {
                                    if (d.SSW == null)
                                      ensemble.storage.filteredDevicesMac.push(d.Key);
                                  });
                                  setMacFilteringObject(true);
                                onComplete:
                                  invokeAPI:
                                    name: setMacFiltering
                                    inputs:
                                      state: '${macFilteringSwitch.value == true ? "WhiteList" : "Off"}'
                                      entryObject: ${ensemble.storage.macFilteringObject}

                        - Button:
                            label: r@kpn.security.remove_whitelisted_devices
                            onTap:
                              executeCode:
                                body: |
                                  ensemble.storage.filteredDevicesMac = [];
                                  ensemble.storage.macFilteringObject = {};
                                onComplete:
                                  invokeAPI:
                                    name: setMacFiltering
                                    inputs:
                                      state: '${macFilteringSwitch.value == true ? "WhiteList" : "Off"}'
                                      entryObject: ${ensemble.storage.macFilteringObject}

            - Spacer:
                styles:
                  size: 8
                  
            - DataGrid:
                styles:
                  headingText: { font: heading, fontSize: 14, color: grey }
                borderColor: white
                horizontalMargin: 0
                headingRowHeight: 32
                columnSpacing: 60
                border:
                  horizontalInside:
                    color: 0xFFD3D3D3
                    width: 1
                DataColumns:
                  - label: r@kpn.device
                    type: text
                  - label: r@kpn.mac_address
                    type: text
                    sortable: true
                    sortKey: mac
                  - label: r@kpn.local_network.mac_address_randomized
                    type: text
                    tooltip: r@kpn.local_network.mac_address_randomized_tooltip
                  - label: ""
                    type: text
                item-template:
                  data: ${ensemble.storage.filteredDevicesMac}
                  name: mac
                  template:
                    DataRow:
                      children:
                        - Row:
                            styles:
                              gap: 4
                              crossAxis: center
                            children:
                              - Icon:
                                  visible: ${getExtenderMacsToBeWhiteListed().keys().indexOf(mac) > -1}
                                  name: 0xe903
                                  # TODO
                                  # make icon dynamic based on externder product class
                                  # this requires storing the product class when we initially get extenders
                                  library: kpnSI
                                  styles:
                                    size: 32
                              - Text:
                                  text: ${getDeviceName(mac, getWifiDevices.body.status.wifi)}
                                  styles:
                                    width: 240
                        - Text:
                            text: ${mac}
                            styles:
                              width: 180
                        - Text:
                            text: '${isMacRandomized(mac) ? "r@kpn.yes" : "r@kpn.no"}'
                        - Icon:
                            testId: setMacFilteringAction
                            name: 0xe92a
                            library: kpnUI
                            styles: { color: 0xFF0077CC }
                            visible: ${getExtenderMacsToBeWhiteListed().keys().indexOf(mac) == -1}
                            onTap:
                              executeCode:
                                body: |
                                  //@code
                                  var filteredArray = ensemble.storage.filteredDevicesMac.filter(function(m) { 
                                    m != mac
                                  });
                                  ensemble.storage.filteredDevicesMac = filteredArray;
                                  setMacFilteringObject(false);

                                onComplete:
                                  invokeAPI:
                                    name: setMacFiltering
                                    inputs:
                                      state: '${macFilteringSwitch.value == true ? "WhiteList" : "Off"}'
                                      entryObject: ${ensemble.storage.macFilteringObject}
                                    
                children:
                  - DataRow:
                      visible: "${ ensemble.storage.filteredDevicesMac.length == 0 ? true : false }"
                      children:
                        - Text:
                            text: "-"
                            styles:
                              width: 240
                        - Text:
                            text: "-"
                            styles:
                              width: 180
                        - Text:
                            text: "-"
                        - Text:
                            text: " "


MacFilteringEnabledToast:
  body:
    Column:
      styles:
        backgroundColor: 0xFFDAF0DA
        borderRadius: 4
        width: 400
        height: 220
      children:
        - Progress:
            id: progressIndicator
            display: linear
            countdown: 60
            styles:
              color: 0xFF009900
              thickness: 4
        - Text:
            text: r@kpn.security.mac_filtering_success_message
            styles:
              padding: 16

FunctionDiagramPortForwarding:
  body:
    Row:
      styles:
        crossAxis: center
        gap: 16
        width: 428
      children:
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Icon:
                  name: 0xe970
                  library: kpnSI
                  styles: 
                    size: 80
                    color: 0xFF009900
              - Text:
                  text: internet
                  styles:
                    textStyle:
                      color: 0xFF009900
                      fontWeight: w600
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Image:
                  source: arrow_right.png
                  styles:
                    width: 48
              - Text:
                  text: " " 
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Icon:
                  name: 0xe9cc
                  library: kpnSI
                  styles:
                    size: 80
                    color: 0xFF009900
              - Text:
                  text: modem
                  styles:
                    textStyle:
                      color: 0xFF009900
                      fontWeight: w600
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Image:
                  source: arrow_right.png
                  styles:
                    width: 48
              - Text:
                  text: " " 
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Icon:
                  name: 0xE8E4
                  library: kpnUI
                  styles:
                    size: 80
                    color: 0xFF009900
              - Text:
                  text: r@kpn.devices
                  styles:
                    textStyle:
                      color: 0xFF009900
                      fontWeight: w600

PortForwarding:
  onLoad:
    invokeAPI:
      name: getDevices
      onResponse:
        invokeAPI:
          name: getIPv4Rules

  Column:
    styles:
      padding: 16
    children:
      - Column:
          styles:
            backgroundColor: 0xFFFFFFFF
            shadowColor: 0xFFDEDEDE
            shadowRadius: 3
            shadowOffset: [0, 0]
            borderRadius: 10
            padding: 16
            gap: 8
          children:
            - ContentTitle:
                inputs:
                  title: r@kpn.security.port_forwarding
            - Text:
                text: r@kpn.security.port_forwarding_description
            - FunctionDiagramPortForwarding
            - Spacer:
                styles:
                  size: 16
            - TabBar:
                styles:
                  indicatorSize: tab
                  tabPadding: 4 32
                  indicatorThickness: 4
                  borderRadius: 8
                  indicatorColor: 0xFF009900
                  activeTabColor: 0xFF009900
                  inactiveTabColor: 0xFF535353
                  activeTabBackgroundColor: 0xFF009900
                  tabBackgroundColor: 0xFFF3F3F3
                  tabFontSize: 15
                  tabFontWeight: bold
                items:
                  - label: IPv4
                    body: PortForwardingIpv4

                  - label: IPv6
                    body: PortForwardingIpv6


PortForwardingIpv6:
  onLoad:
    invokeAPI:
      name: getIPv6OpenPorts

  body:
    Column:
      styles:
        gap: 12
        padding: 24 0
      children:
        - Ipv6OpenPortForm
        - DataGrid:
            id: ipv6OpenPorts
            styles:
              headingText: { font: heading, fontSize: 16, fontWeight: bold }
            borderColor: white
            horizontalMargin: 0
            columnSpacing: 32
            visible: "${getIPv6OpenPorts.body.CustomList.length > 0 ? true : false }"
            DataColumns:
              - label: " "
                type: text
              - label: r@kpn.security.service
                type: text
                sortable: true
                sortKey: Description
              - label: r@kpn.protocol
                type: text
                sortable: true
                sortKey: ProtocolLabel
              - label: r@kpn.device
                type: text
                sortable: true
                sortKey: DestinationIPAddress
              - label: r@kpn.ip6_address
                type: text
                sortable: true
                sortKey: DestinationIPAddress
              - label: r@kpn.port
                type: text
                sortable: true
                sortKey: DestinationPort
              - label: r@kpn.status
                type: text
                sortable: true
                sortKey: Status
              - label: " "
                type: text
            item-template:
              data: ${getIPv6OpenPorts.body.CustomList}
              name: i
              template:
                DataRow:
                  children:
                    - Switch:
                        id: port_switch_ipv6
                        value: ${i.Enable}
                        onChange:
                          invokeAPI:
                            name: editIPv6OpenPort
                            inputs:
                              enable: ${this.value}
                              description: ${i.Description}
                              id: ${i.Id}
                              port: ${i.DestinationPort}
                              ip: ${i.DestinationIPAddress}
                              protocol: ${i.Protocol}

                            onResponse:
                              executeCode:
                                body: |
                                  //@code
                                  ensemble.invokeAPI("getIPv6OpenPorts");
                                onComplete:
                                  showToast:
                                    widget: SuccessToast
                                    styles:
                                      padding: 0
                                    options:
                                      type: custom
                                      duration: 15
                                      dismissible: true
                                      alignment: center

                    - Text:
                        id: port_service
                        text: ${i.Description}
                    - Text:
                        id: port_protocolLabel_ipv6
                        text: ${i.ProtocolLabel}
                    - Text:
                        id: port_apparaat_ipv6
                        text: ${deviceNameIPv6(i.DestinationIPAddress)}
                    - Text:
                        id: port_address_ipv6
                        text: ${i.DestinationIPAddress}
                    - Text:
                        id: port_DestinationPortAddress_ipv6
                        text: ${i.DestinationPort}
                    - Text:
                        id: port_status_ipv6
                        text: ${i.Status}
                    - Row:
                        styles:
                          gap: 16
                        children:
                          - Icon:
                              testId: editPortForwardingIPV6Action
                              name: 0xe931
                              library: kpnUI
                              styles: { color: 0xFF0077CC }
                              onTap:
                                showDialog:
                                  widget: EditPortForwardingIPV6
                          - Icon:
                              testId: deletePortForwardingIPV6Action
                              name: 0xe92a
                              library: kpnUI
                              styles: { color: 0xFF0077CC }
                              onTap:
                                invokeAPI:
                                  name: deleteIPv6OpenPorts
                                  inputs:
                                    id: ${i.Id}
                                  onResponse:
                                    invokeAPI:
                                      name: getIPv6OpenPorts


PortForwardingIpv4:
  onLoad:
    invokeAPI:
      name: getDevices
      onResponse: |
        //@code
        var devicesList = [];
        response.body.status.map(function(d) {
          devicesList.push({
            "label": d.Name,
            "value": d.IPAddress
          });
        });
        ipv4RuleDeviceSelector.items = devicesList;

  body:
    Column:
      styles:
        gap: 12
        padding: 24 0
      children:
        - Form:
            styles:
              labelPosition: '${device.width > 768 ? "start" : "top"}'
              labelMaxWidth: 200
              gap: 16
            children:
              - Switch:
                  id: activateIpv4Rule
                  label: r@kpn.activate
                  value: false
              - Dropdown:
                  id: ipv4RuleApplication
                  label: r@kpn.security.service
                  itemsFromString: 'HTTP,HTTPS,POP3,POP3S,SMTPAuth,SMTP,FTP,SSH,NTP,NNTP,NNTPS,DNS,IRC,IMAP,IMAPS,ISAKMP,PSEC-NAT-T,ESP-ALARM-TOOL,ESP-ALARM,Nieuw...'
                  required: true
                  onChange: |
                    //@code
                    if (this.value == 'Nieuw...') {
                      ipv4RuleApplicationInput.visible = true;
                      ipv4RuleApplicationInput.value = '';
                    } else {
                      ipv4RuleApplicationInput.visible = false;
                      ipv4RuleApplicationInput.value = this.value;
                      ipv4RuleDestinationPort.value = servicesPort[this.value];
                      ipv4RuleSourcePort.value = servicesPort[this.value];
                    }

              - TextInput:
                  id: ipv4RuleApplicationInput
                  visible: false
                  required: true
              - Dropdown:
                  id: ipv4RuleProtocol
                  label: r@kpn.protocol
                  items: [
                    {"label": "UDP", "value": "17"},
                    {"label": "TCP", "value": "6"},
                    {"label": "UDP/TCP", "value": "6,17"}
                  ]
                  value: 6,17
                  required: true
              - TextInput:
                  id: ipv4RuleSourcePrefix
                  label: r@kpn.security.source_prefix
                  labelHint: r@kpn.security.source_prefix_tooltip
              - TextInput:
                  id: ipv4RuleSourcePort
                  label: r@kpn.security.source_port
                  required: true
                  validator:
                    regex: ^(?:(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])(?:-(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5]))?)$
                    regexError: r@kpn.invalid_port
                  onChange:
                    executeCode:
                      body: |
                        //@code
                        ipv4RuleDestinationPort.value = this.value;
              - Dropdown:
                  id: ipv4RuleDeviceSelector
                  label: r@kpn.device
                  required: false
                  onChange: |
                    //@code
                    ipv4RuleDestinationIp.value = this.value;
              - TextInput:
                  id: ipv4RuleDestinationIp
                  label: r@kpn.security.destination_ip
                  inputType: ipAddress
                  required: true
              - TextInput:
                  id: ipv4RuleDestinationPort
                  label: r@kpn.security.destination_port
                  required: true
                  validator:
                    regex: ^(?:(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])(?:-(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5]))?)$
                    regexError: r@kpn.invalid_port
              - Row:
                  styles: { mainAxis: end, crossAxis: center }
                  children:
                    - Text:
                        id: portForwardingFormStatus
                    - Button:
                        label: r@kpn.cancel
                        styles:
                          outline: true
                          margin: 0 20
                          labelStyle:
                            color: 0xFF0077CC
                        onTap: closeAllDialogs
                    - Button:
                        label: r@kpn.save
                        validateForm: true
                        onTap:
                          invokeAPI:
                            name: addIPv4Rules
                            inputs:
                              status: ${activateIpv4Rule.value}
                              description: ${ipv4RuleApplicationInput.value}
                              protocol: ${ipv4RuleProtocol.value}
                              action: ${ipv4RuleAction.value}
                              destinationPort: ${ipv4RuleDestinationPort.value}
                              destinationIp: ${ipv4RuleDestinationIp.value}
                              sourcePort: ${ipv4RuleSourcePort.value}
                              sourcePrefix: ${ipv4RuleSourcePrefix.value}
                            onResponse:
                              invokeAPI:
                                name: getIPv4Rules
                            onError: |
                              //@code
                              portForwardingFormStatus.text = 'r@kpn.error';

        - Spacer:
            styles:
              size: 24
        - DataGrid:
            id: ipv4RulesGridData
            styles:
              headingText: { font: heading, fontSize: 16, color: grey }
            borderColor: white
            horizontalMargin: 0
            headingRowHeight: 32
            columnSpacing: 32
            DataColumns:
              - label: " "
                type: text
              - label: r@kpn.security.service
                type: text
                sortable: true
                sortKey: Description
              - label: r@kpn.protocol
                type: text
                sortable: true
                sortKey: ProtocolLabel
              - label: r@kpn.device
                type: text
                sortable: true
                sortKey: DestinationIPAddress
              - label: r@kpn.security.source_prefix
                type: text
                sortable: true
                sortKey: SourcePrefix
              - label: r@kpn.security.source_port
                type: text
                sortable: true
                sortKey: ExternalPort
              - label: r@kpn.security.destination_ip
                type: text
                sortable: true
                sortKey: DestinationIPAddress
              - label: r@kpn.security.destination_port
                type: text
                sortable: true
                sortKey: InternalPort
              - label: r@kpn.status
                type: text
                sortable: true
                sortKey: Status
              - label: " "
                type: text

            item-template:
              data: ${getIPv4Rules.body.CustomList}
              name: i
              template:
                DataRow:
                  children:
                    - Switch:
                        id: port_switch_ipv4
                        value: ${i.Enable}
                        onChange:
                          invokeAPI:
                            name: editIPv4Rules
                            inputs:
                              enable: ${port_switch_ipv4.value}
                              id: ${i.Id}
                              port: ${i.InternalPort}
                              ip: ${i.DestinationIPAddress}
                              protocol: ${i.Protocol}
                              sourcePort: ${i.ExternalPort}
                              description: ${i.Description}
                              sourcePrefix: ${i.SourcePrefix}

                            onResponse:
                              executeCode:
                                body: |
                                  //@code
                                  ensemble.invokeAPI("getIPv4Rules");
                                onComplete:
                                  showToast:
                                    widget: SuccessToast
                                    styles:
                                      padding: 0
                                    options:
                                      type: custom
                                      duration: 15
                                      dismissible: true
                                      position: center
                    - Text:
                        id: port_service
                        text: ${i.Description}
                    - Text:
                        id: port_ProtocolLabel
                        text: ${i.ProtocolLabel}
                    - Text:
                        text: ${deviceNameIPv4(i.DestinationIPAddress)}
                    - Text:
                        id: port_SourcePrefix
                        text: ${i.SourcePrefix}
                    - Text:
                        id: port_ExternalPort
                        text: ${i.ExternalPort}
                    - Text:
                        id: port_DestinationIPAddress
                        text: ${i.DestinationIPAddress}
                    - Text:
                        id: port_InternalPort
                        text: ${i.InternalPort}
                    - Text:
                        id: port_Status
                        text: ${i.Status}
                    - Row:
                        styles:
                          gap: 8
                        children:
                          - Icon:
                              testId: editPortForwardingACtion
                              name: 0xe931
                              library: kpnUI
                              styles: { color: 0xFF0077CC }
                              onTap:
                                showDialog:
                                  widget: EditPortForwarding
                          - Icon:
                              testId: deleteIPv4RulesACtion
                              name: 0xe92a
                              library: kpnUI
                              styles: { color: 0xFF0077CC }
                              onTap:
                                invokeAPI:
                                  name: deleteIPv4Rules
                                  inputs:
                                    id: ${i.Id}
                                    destinationIp: ${i.DestinationIPAddress}
                                  onResponse:
                                    invokeAPI:
                                      name: getIPv4Rules
                                      onResponse: |
                                        //@code
                                        var ipv4RulesArray = [];
      
                                        for (key in response.body.status) {
                                          ipv4RulesArray.push(response.body.status[key]);
                                        }
                                        response.body.CustomList = ipv4RulesArray;


EditPortForwarding:
  onLoad:
    executeCode:
      body: |
        //@code
        if (port_ProtocolLabel.text == "UDP") {
          ipv4RuleProtocol.value = "17"
        } else if (port_ProtocolLabel.text == "TCP") {
          ipv4RuleProtocol.value = "6"
        } else if (port_ProtocolLabel.text == "UDP/TCP") {
          ipv4RuleProtocol.value = "6,17"
        }
  Column:
    styles:
      width: 720
    children:
      # pre submit content
      - Column:
          id: preSubmitContent
          styles:
            gap: 16
            fontSize: 16
          children:
            - Row:
                styles: { mainAxis: spaceBetween }
                children:
                  - GreenTitle:
                      inputs:
                        title: r@kpn.security.port_forwarding_edit_title

                  - Icon:
                      name: 0xe993
                      library: kpnUI
                      styles: { color: grey }
                      onTap: closeAllDialogs
            - Text:
                text: r@kpn.security.port_forwarding_description
            - Divider
            - Form:
                styles:
                  labelPosition: '${device.width > 768 ? "start" : "top"}'
                  gap: 16
                children:

                  - TextInput:
                      id: ipv4RuleApplication
                      label: r@kpn.security.service
                      value: ${port_service.text}
                      enabled: false

                  - Dropdown:
                      id: ipv4RuleProtocol
                      label: r@kpn.protocol
                      items: [
                        { "label": "UDP", "value": "17" },
                        { "label": "TCP", "value": "6" },
                        { "label": "UDP/TCP", "value": "6,17" }
                      ]
                      required: true

                  - TextInput:
                      id: ipv4RuleSourcePrefix
                      label: r@kpn.security.source_prefix
                      value: ${port_SourcePrefix.text}

                  - TextInput:
                      id: ipv4RuleSourcePort
                      label: r@kpn.security.source_port
                      value: ${port_ExternalPort.text}
                      required: true
                  - TextInput:
                      id: ipv4RuleDestinationIp
                      label: r@kpn.security.destination_ip
                      value: ${port_DestinationIPAddress.text}
                      required: true
                  - TextInput:
                      id: ipv4RuleDestinationPort
                      label: r@kpn.security.destination_port
                      value: ${port_InternalPort.text}
                      required: true
                      validator:
                        regex: ^(?:(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])(?:-(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5]))?)$
                        regexError: r@kpn.invalid_port
                  - Row:
                      styles: { gap: 20, mainAxis: end, crossAxis: center }
                      children:
                        - Text:
                            id: portForwardingFormStatus
                        - Button:
                            label: r@kpn.cancel
                            styles:
                              outline: true
                              labelStyle:
                                color: 0xFF0077CC
                            onTap: closeAllDialogs
                        - Button:
                            label: r@kpn.save
                            validateForm: true
                            onTap:
                              executeCode:
                                body: |
                                  //@code
                                  preSubmitContent.visible = false;
                                  loading.visible = true;
                                onComplete:
                                  invokeAPI:
                                    name: addIPv4Rules
                                    inputs:
                                      status: true
                                      description: ${ipv4RuleApplication.value}
                                      protocol: ${ipv4RuleProtocol.value}
                                      action: ${ipv4RuleAction.value}
                                      destinationPort: ${ipv4RuleDestinationPort.value}
                                      destinationIp: ${ipv4RuleDestinationIp.value}
                                      sourcePort: ${ipv4RuleSourcePort.value}
                                      sourcePrefix: ${ipv4RuleSourcePrefix.value}
                                    onResponse:
                                      invokeAPI:
                                        name: getIPv4Rules
                                        onResponse:
                                          executeCode:
                                            body: |
                                              //@code
                                              loading.visible = false;
                                            onComplete:
                                              closeAllDialogs
                                    onError: |
                                      //@code
                                      portForwardingFormStatus.text = 'r@kpn.error';

      # loading
      - Column:
          id: loading
          visible: false
          styles:
            mainAxis: center
            crossAxis: center
            height: 500
          children:
            - Row:
                styles: { mainAxis: center }
                children:
                  - Progress:
                      styles: { margin: 20, padding: 20 }


EditPortForwardingIPV6:
  onLoad:
    executeCode:
      body: |
        //@code
        if (port_protocolLabel_ipv6.text == "UDP") {
          ipv6RuleProtocol.value = "17"
        } else if (port_protocolLabel_ipv6.text == "TCP") {
          ipv6RuleProtocol.value = "6"
        } else if (port_protocolLabel_ipv6.text == "UDP/TCP") {
          ipv6RuleProtocol.value = "6,17"
        }
  Column:
    styles:
      width: 720
    children:
      # pre submit content
      - Column:
          id: preSubmitContent
          styles:
            gap: 16
            fontSize: 16
          children:
            - Row:
                styles: { mainAxis: spaceBetween }
                children:
                  - GreenTitle:
                      inputs:
                        title: r@kpn.security.port_forwarding_edit_title

                  - Icon:
                      name: 0xe993
                      library: kpnUI
                      styles: { color: grey }
                      onTap: closeAllDialogs
            - Text:
                text: r@kpn.security.port_forwarding_description
            - Divider
            - Form:
                styles:
                  labelPosition: '${device.width > 768 ? "start" : "top"}'
                  gap: 16
                children:
                  - TextInput:
                      id: ipv6RuleApplication
                      label: r@kpn.security.service
                      value: ${port_service.text}
                      enabled: false
                  - Dropdown:
                      id: ipv6RuleProtocol
                      label: r@kpn.protocol
                      items: [
                        { "label": "UDP", "value": "17" },
                        { "label": "TCP", "value": "6" },
                        { "label": "UDP/TCP", "value": "6,17" }
                      ]
                      required: true

                  - TextInput:
                      id: ipv6_address
                      label: r@kpn.ip6_address
                      value: ${port_address_ipv6.text}
                      validator:
                        regex: ^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$
                        regexError: r@kpn.invalid_ipv6
                  - TextInput:
                      id: ipv6RuleDestinationPort
                      label: r@kpn.port
                      value: ${port_DestinationPortAddress_ipv6.text}
                      required: true
                      validator:
                        regex: ^(?:(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])(?:-(?:[1-9]\d{0,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5]))?)$
                        regexError: r@kpn.invalid_port
                  - Row:
                      styles: { gap: 20, mainAxis: end, crossAxis: center }
                      children:
                        - Text:
                            id: portForwardingFormStatus
                        - Button:
                            label: r@kpn.cancel
                            styles:
                              outline: true
                              labelStyle:
                                color: 0xFF0077CC
                            onTap: closeAllDialogs
                        - Button:
                            label: r@kpn.save
                            validateForm: true
                            onTap:
                              executeCode:
                                body: |
                                  //@code
                                  preSubmitContent.visible = false;
                                  loading.visible = true;
                                onComplete:
                                  invokeAPI:
                                    name: editIPv6OpenPort
                                    inputs:
                                      enable: ${port_switch_ipv6.value}
                                      description: ${ipv6RuleApplication.value}
                                      id: ${i.Id}
                                      port: ${ipv6RuleDestinationPort.value}
                                      ip: ${ipv6_address.value}
                                      protocol: ${ipv6RuleProtocol.value}
                                    onResponse:
                                      invokeAPI:
                                        name: getIPv6OpenPorts
                                        onResponse:
                                          executeCode:
                                            body: |
                                              //@code
                                              loading.visible = false;
                                            onComplete:
                                              closeAllDialogs
                                    onError: |
                                      //@code
                                      portForwardingFormStatus.text = 'r@kpn.error';

      # loading
      - Column:
          id: loading
          visible: false
          styles:
            mainAxis: center
            crossAxis: center
            height: 500
          children:
            - Row:
                styles: { mainAxis: center }
                children:
                  - Progress:
                      styles: { margin: 20, padding: 20 }

FunctionDiagramUPnP:
  body:
    Row:
      styles:
        crossAxis: center
        gap: 16
        width: 428
      children:
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Icon:
                  name: 0xe970
                  library: kpnSI
                  styles: 
                    size: 80
                    color: 0xFF009900
              - Text:
                  text: internet
                  styles:
                    textStyle:
                      color: 0xFF009900
                      fontWeight: w600
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Image:
                  source: arrow_right.png
                  styles:
                    width: 48
              - Text:
                  text: " " 
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Icon:
                  name: 0xe9cc
                  library: kpnSI
                  styles:
                    size: 80
                    color: 0xFF009900
              - Text:
                  text: modem
                  styles:
                    textStyle:
                      color: 0xFF009900
                      fontWeight: w600
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Image:
                  source: arrow_two_way.png
                  styles:
                    width: 48
              - Text:
                  text: " " 
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Icon:
                  name: 0xE8E4
                  library: kpnUI
                  styles:
                    size: 80
                    color: 0xFF009900
              - Text:
                  text: r@kpn.devices
                  styles:
                    textStyle:
                      color: 0xFF009900
                      fontWeight: w600

UPnP:
  onLoad:
    invokeAPI:
      name: getUpnp
      onResponse:
        invokeAPI:
          name: getUpnpRules
  Column:
    styles:
      padding: 16
    children:
      - Column:
          styles:
            backgroundColor: 0xFFFFFFFF
            shadowColor: 0xFFDEDEDE
            shadowRadius: 3
            shadowOffset: [0, 0]
            borderRadius: 10
            padding: 16
            gap: 12
          children:
            - ContentTitle:
                inputs:
                  title: r@kpn.security.upnp
            - Text:
                text: r@kpn.security.upnp_description
            - FunctionDiagramUPnP
            - Divider

            - Form:
                styles:
                  labelPosition: '${device.width > 768 ? "start" : "top"}'
                  gap: 16
                children:
                  - Switch:
                      id: upnpSwitch
                      value: ${getUpnp.body.status.UpnpPortForwardingStatus}
                      label: r@kpn.security.upnp_igd
                      onChange:
                        invokeAPI:
                          name: setUpnp
                          inputs:
                            status: ${upnpSwitch.value}
                          onResponse:
                            showToast:
                              widget: SuccessToast
                              styles:
                                padding: 0
                              options:
                                type: custom
                                duration: 15
                                dismissible: true
                                position: center
                          onError:
                            showToast:
                              message: r@kpn.error
                              options:
                                dismissible: true
                                type: error
                                duration: 15
                                position: center

            - Divider

            - Spacer:
                styles:
                  size: 24
            - DataGrid:
                styles:
                  headingText: { font: heading, fontSize: 16, color: grey }
                borderColor: white
                horizontalMargin: 0
                headingRowHeight: 32
                columnSpacing: 32
                DataColumns:
                  - label: r@kpn.security.service
                    type: text
                    sortable: true
                    sortKey: Description
                  - label: r@kpn.protocol
                    type: text
                    sortable: true
                    sortKey: ProtocolLabel
                  - label: r@kpn.device
                    type: text
                    sortable: true
                    sortKey: DestinationIPAddress
                  - label: r@kpn.security.source_prefix
                    type: text
                    sortable: true
                    sortKey: SourcePrefix
                  - label: r@kpn.security.source_port
                    type: text
                    sortable: true
                    sortKey: ExternalPort
                  - label: r@kpn.security.destination_ip
                    type: text
                    sortable: true
                    sortKey: DestinationIPAddress
                  - label: r@kpn.security.destination_port
                    type: text
                    sortable: true
                    sortKey: InternalPort
                  - label: r@kpn.status
                    type: text
                    sortable: true
                    sortKey: Status
                
                children:
                  - DataRow:
                      visible: ${getUpnpRules.body.CustomList.length == 0}
                      children:
                        - Text:
                            text: "-"
                        - Text:
                            text: "-"
                        - Text:
                            text: "-"
                        - Text:
                            text: "-"
                        - Text:
                            text: "-"
                        - Text:
                            text: "-"
                        - Text:
                            text: "-"
                        - Text:
                            text: "-"
                item-template:
                  data: ${getUpnpRules.body.CustomList}
                  name: i
                  template:
                    DataRow:
                      children:
                        - Text:
                            id: port_service
                            text: ${i.Description}
                        - Text:
                            id: port_ProtocolLabel
                            text: ${i.ProtocolLabel}
                        - Text:
                            text: ${deviceNameIPv4(i.DestinationIPAddress)}
                        - Text:
                            id: port_SourcePrefix
                            text: ${i.SourcePrefix}
                        - Text:
                            id: port_ExternalPort
                            text: ${i.ExternalPort}
                        - Text:
                            id: port_DestinationIPAddress
                            text: ${i.DestinationIPAddress}
                        - Text:
                            id: port_InternalPort
                            text: ${i.InternalPort}
                        - Text:
                            id: port_Status
                            text: ${i.Status}
      
FunctionDiagramDMZ:
  body:
    Row:
      styles:
        crossAxis: center
        gap: 16
        width: 428
      children:
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Icon:
                  name: 0xe970
                  library: kpnSI
                  styles: 
                    size: 80
                    color: 0xFF009900
              - Text:
                  text: internet
                  styles:
                    textStyle:
                      color: 0xFF009900
                      fontWeight: w600
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Image:
                  source: arrow_right.png
                  styles:
                    width: 48
              - Text:
                  text: " " 
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Icon:
                  name: 0xe9cc
                  library: kpnSI
                  styles:
                    size: 80
                    color: 0xFF009900
              - Text:
                  text: modem
                  styles:
                    textStyle:
                      color: 0xFF009900
                      fontWeight: w600
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Image:
                  source: arrow_right.png
                  styles:
                    width: 48
              - Text:
                  text: " " 
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Icon:
                  name: 0xE972
                  library: kpnSI
                  styles:
                    size: 80
                    color: 0xFF009900
              - Text:
                  text: r@kpn.device
                  styles:
                    textStyle:
                      color: 0xFF009900
                      fontWeight: w600

DMZ:
  Column:
    styles:
      padding: 16
    children:
      - Column:
          styles:
            backgroundColor: 0xFFFFFFFF
            shadowColor: 0xFFDEDEDE
            shadowRadius: 3
            shadowOffset: [0, 0]
            borderRadius: 10
            padding: 16
            gap: 12
          children:
            - ContentTitle:
                inputs:
                  title: r@kpn.security.dmz
            - Text:
                text: r@kpn.security.dmz_description
            - FunctionDiagramDMZ
            - Divider
            - TabBar:
                selectedIndex: ${dmzTabIndex}
                styles: 
                  indicatorSize: tab
                  tabPadding: 4 32
                  indicatorThickness: 4
                  borderRadius: 8
                  indicatorColor: 0xFF009900
                  activeTabColor: 0xFF009900
                  inactiveTabColor: 0xFF535353
                  activeTabBackgroundColor: 0xFF009900
                  tabBackgroundColor: 0xFFF3F3F3
                  tabFontSize: 15
                  tabFontWeight: bold
                items:
                  - label: IPv4
                    body: DmzIpv4

                  - label: IPv6
                    body: DmzIpv6


DmzIpv4:
  onLoad:
    invokeAPI:
      name: getDMZ
      onResponse:
        invokeAPI:
          name: getDevices
          onResponse: |
            var devicesList = [];
    
            response.body.status.map(function(d) {
              devicesList.push({
                "label": d.Name,
                "value": d.IPAddress
              });
            });
    
            deviceSelector.items = devicesList;
  body:
    Column:
      styles:
        gap: 12
        padding: 16 0
      children:

        # DMZ is set
        - Conditional:
            conditions:
              - if: ${getDMZ.body.status.webui != null}
                Row:
                  styles:
                    padding: 8 16
                    margin: 16 0
                    backgroundColor: 0xFFddebf7
                    borderRadius: 4
                    gap: 8
                    crossAxis: center
                  children:
                    - Markdown:
                        text: |-
                          #### Current IPv4 in DMZ: **${getDMZ.body.status.webui.DestinationIPAddress}**

                    - Icon:
                        testId: deleteDMZAction
                        library: kpnUI
                        name: 0xe92a
                        styles: { color: 0xFF0077CC }
                        onTap:
                          invokeAPI:
                            name: deleteDMZ
                            onResponse:
                              invokeAPI:
                                name: getDMZ
        - Form:
            styles:
              labelPosition: '${device.width > 768 ? "start" : "top"}'
              gap: 16
              labelMaxWidth: 200
            children:
              - Dropdown:
                  id: deviceSelector
                  label: r@kpn.device
                  required: false
                  onChange: |
                    dmzIpAddress.value = this.value;
              - TextInput:
                  id: dmzIpAddress
                  label: r@kpn.ip_address
                  required: true

              - Row:
                  styles: { mainAxis: end }
                  children:
                    - Button:
                        validateForm: true
                        label: r@kpn.save
                        onTap:
                          executeCode:
                            body: |
                              //@code
                              var device = getDevices.body.status.find(function(item) {
                                return item.IPAddress == dmzIpAddress.value && item.IPAddressSource == 'DHCP'
                              });
                              
                              if (device != -1)
                                ensemble.invokeAPI("addStaticLease", { "mac": device.PhysAddress, "ip": device.IPAddress });
                            onComplete:
                              invokeAPI:
                                name: setDMZ
                                inputs:
                                  ip: ${dmzIpAddress.value}
                                onResponse:
                                  invokeAPI:
                                    name: getDMZ
                                    onResponse: |
                                      //@code
                                      if (getDMZ.body.status.webui != null)
                                        dmzStatus.text = '#### Current IPv4 in DMZ: **' + getDMZ.body.status.webui.DestinationIPAddress + '**';
                                      else
                                        dmzStatus.text = ' ';

FunctionDiagramParentalControl:
  body:
    Row:
      styles:
        crossAxis: center
        gap: 16
        width: 428
      children:
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Icon:
                  name: 0xe970
                  library: kpnSI
                  styles: 
                    size: 80
                    color: 0xFF009900
              - Text:
                  text: internet
                  styles:
                    textStyle:
                      color: 0xFF009900
                      fontWeight: w600
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Image:
                  source: arrow_left.png
                  styles:
                    width: 48
              - Text:
                  text: " " 
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Icon:
                  name: 0xe9cc
                  library: kpnSI
                  styles:
                    size: 80
                    color: 0xFF009900
              - Text:
                  text: modem
                  styles:
                    textStyle:
                      color: 0xFF009900
                      fontWeight: w600
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Image:
                  source: arrow_left.png
                  styles:
                    width: 48
              - Text:
                  text: " " 
        - Column:
            styles:
              crossAxis: center
              gap: 8
            children:
              - Icon:
                  name: 0xE8E5
                  library: kpnUI
                  styles:
                    size: 80
                    color: 0xFF009900
              - Text:
                  text: r@kpn.devices
                  styles:
                    textStyle:
                      color: 0xFF009900
                      fontWeight: w600

DmzIpv6:
  onLoad:
    executeActionGroup:
      actions:
        - executeCode:
            body: |
              ensemble.storage.deviceIpv6Items = null;
        - invokeAPI:
            name: getIPv6OpenPorts
        - invokeAPI:
            name: getDevices
            onResponse: |
              var ipv6DevicesList = [];
              getDevices.body.status.map(function(d) {
                ipv6DevicesList.push({
                  "label": d.Name,
                  "value": d.Key
                });
              });
              dmzIpv6DeviceSelector.items = ipv6DevicesList;
  body:
    Column:
      styles:
        gap: 12
        padding: 16 0
      children:


        # DMZ is set
        - Conditional:
            conditions:
              - if: ${ getIPv6OpenPorts.body.DmzList.length > 0 }
                Row:
                  styles:
                    padding: 8 16
                    margin: 16 0
                    backgroundColor: 0xFFddebf7
                    borderRadius: 4
                    gap: 8
                    crossAxis: center
                  children:
                    - Markdown:
                        text: |-
                          #### Current IPv6 in DMZ: **${getIPv6OpenPorts.body.DmzList[0].DestinationIPAddress}**

                    - Icon:
                        testId: deleteIPv6OpenPortsAction
                        library: kpnUI
                        name: 0xe92a
                        styles: { color: 0xFF0077CC }
                        onTap:
                          invokeAPI:
                            name: deleteIPv6OpenPorts
                            inputs:
                              id: ${getIPv6OpenPorts.body.DmzList[0].Id}
                            onResponse:
                              invokeAPI:
                                name: getIPv6OpenPorts

        - Form:
            styles:
              labelPosition: '${device.width > 768 ? "start" : "top"}'
              labelMaxWidth: 200
              gap: 16
            children:
              - Dropdown:
                  id: dmzIpv6DeviceSelector
                  label: r@kpn.device
                  required: false
                  onChange: |
                    ensemble.storage.deviceIpv6Items = getDeviceGlobalIpv6List (getDevices.body.status, this.value);


              - Ipv6DeviceSelector:
                  events:
                    onIpSelect:
                      executeCode:
                        body: |
                          dmzIpv6Input.value = event.data.ip;

        - Form:
            styles:
              labelPosition: '${device.width > 768 ? "start" : "top"}'
              labelMaxWidth: 200
              gap: 16
            children:
              - TextInput:
                  id: dmzIpv6Input
                  label: r@kpn.ip6_address
                  required: true
                  validator:
                    regex: ^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$
                    regexError: r@kpn.invalid_ipv6
              
              - Row:
                  styles: { mainAxis: end, gap: 20, crossAxis: center }
                  children:
                    - Text:
                        id: saveStatus
                    - Button:
                        label: r@kpn.save
                        validateForm: true
                        onTap:
                          executeCode:
                            # Limit IPv6 DMZ to one IP
                            # first, clear any existing open porst
                            body: |
                              if (getIPv6OpenPorts.body.DmzList.length > 0) {
                                ensemble.invokeAPI("deleteIPv6OpenPorts", {
                                  "id": getIPv6OpenPorts.body.DmzList[0].Id
                                });
                              }
                            onComplete:
                              invokeAPI:
                                name: addIPv6OpenPort
                                inputs:
                                  enable: true
                                  description: ipv6_dmz
                                  port: 1-65535
                                  ip: ${dmzIpv6Input.value}
                                  protocol: 6,17
                                onResponse: |
                                  ensemble.invokeAPI('getIPv6OpenPorts');
                                  dmzIpv6Input.value = '';

                                onError: |
                                  saveStatus.text = 'r@kpn.error';


ParentalControl:
  onLoad:
    executeCode:
      body: |
        ensemble.storage.devicesWithParentalControl = {};
      onComplete:
        invokeAPI:
          name: getDevicesSchedule
          onResponse:
            invokeAPI:
              name: listMST
              onResponse:
                invokeAPI:
                  name: getActiveDevices
                  onResponse: |
                    var devicesList = [];
                    
                    response.body.allDevices.map(function(d) {
                      devicesList.push({
                        "label": d.Name,
                        "value": d.Key
                      });
                    });
                    
                    deviceSelector.items = devicesList;

  body:
    Column:
      styles:
        padding: 16
      children:
        - Column:
            styles:
              backgroundColor: 0xFFFFFFFF
              shadowColor: 0xFFDEDEDE
              shadowRadius: 3
              shadowOffset: [ 0, 0 ]
              borderRadius: 10
              padding: 16
              gap: 12
            children:
              - ContentTitle:
                  inputs:
                    title: r@kpn.security.parental_control
              - Text:
                  text: r@kpn.security.parental_control_description
              - FunctionDiagramParentalControl
              - Divider

              - Column:
                  styles:
                    width: 900
                  children:
                    - Form:
                        styles:
                          labelPosition: '${device.width > 768 ? "start" : "top"}'
                          gap: 16
                          labelMaxWidth: 130
                        children:
                          - Dropdown:
                              id: deviceSelector
                              label: r@kpn.device
                              required: true

                    - Row:
                        styles: { mainAxis: end, gap: 20, padding: 16 0 32 0, width: 740 }
                        children:
                          - Button:
                              label: r@kpn.modify
                              onTap:
                                showDialog:
                                  widget: 
                                    ClientDeviceDetails:
                                      inputs:
                                        mac: ${deviceSelector.value}
                                  options:
                                    maxWidth: 700
                                    style: none
                    
                    - DataGrid:
                        styles:
                          headingText: { font: heading, fontSize: 14, color: grey }
                        borderColor: white
                        horizontalMargin: 0
                        headingRowHeight: 32
                        columnSpacing: 32
                        border:
                          horizontalInside:
                            color: 0xFFD3D3D3
                        DataColumns:
                          - label: r@kpn.device
                            type: r@kpn.device
                            sortable: true
                            sortKey: Name
                          - label: r@kpn.ip4_address
                            type: text
                            sortable: true
                            sortKey: IPAddress
                          - label: r@kpn.verbinding_type
                            type: text
                            sortable: true
                            sortKey: typeLabel
                          - label: r@kpn.network_name
                            type: text
                            sortable: true
                            sortKey: networklabel
                          - label: r@kpn.action
                            type: text
                          - label: ' '
                            type: text
                        children:
                          # display indicator while loading
                          - DataRow:
                              visible: "${getActiveDevices.body.allDevices == null ? true : false }"
                              children:
                                - Progress:
                                    styles: { size: 32 }
                                - Text:
                                    text: ' '
                                - Text:
                                    text: ' '
                                - Text:
                                    text: ' '
                                - Text:
                                    text: ' '
                                - Text:
                                    text: ' '

                        item-template:
                          data: ${getActiveDevices.body.allDevices}
                          name: device
                          template:
                            DataRow:
                              visible: ${ensemble.storage.devicesWithParentalControl[device.Key] != null}
                              children:
                                - Row:
                                    styles: { width: 200, gap: 8, crossAxis: center }
                                    children:
                                      - Icon:
                                          name: ${getDeviceIcon(device.DeviceType)}
                                          library: kpnUI
                                          styles: { size: 24 }
                                      - Text:
                                          text: ${device.Name}
                                          styles:
                                            expanded: true
                                            textStyle:
                                              overflow: ellipsis
                                - Row:
                                    styles: { width: 100, crossAxis: center }
                                    children:
                                      - Text:
                                          text: "${isIpv4(device.IPAddress) == true ? device.IPAddress : '-'}"
                                - Row:
                                    styles: { crossAxis: center, gap: 4 }
                                    children:
                                      - Icon:
                                          name: "${ device.connectionDetails.type == 'Ethernet' ? 0xe978 : 0xe9be }"
                                          library: kpnUI
                                      - Text:
                                          text: ${device.connectionDetails.typeLabel}
                                - Text:
                                    text: ${device.connectionDetails.networklabel}
                                    styles: { width: 100 }
                                # filter icon
                                - Conditional:
                                    conditions:
                                      - if: ${ensemble.storage.devicesWithParentalControl[device.Key] == "Time"}
                                        widget:
                                          Icon:
                                            name: 0xE8E1
                                            library: kpnUI
                                      - elseif: ${ensemble.storage.devicesWithParentalControl[device.Key] == "Weekly"}
                                        widget:  
                                          Icon:
                                            name: 0xe925
                                            library: kpnUI
                                      - elseif: ${ensemble.storage.devicesWithParentalControl[device.Key] == "Block"}
                                        widget:  
                                          Icon:
                                            name: 0xe993
                                            library: kpnUI

                                - Icon:
                                    name: 0xe931
                                    library: kpnUI
                                    styles: { color: 0xFF0077CC }
                                    onTap:
                                      showDialog:
                                        widget: 
                                          ClientDeviceDetails:
                                            inputs:
                                              mac: ${device.Key}
                                        options:
                                          maxWidth: 700
                                          style: none



ClientDeviceDetails:
  inputs:
    - mac
  onLoad:
    invokeAPI:
      name: getDeviceDetails
      inputs:
        mac: ${mac}
      onResponse:
        executeCode:
          body: |
            deviceIcon.name = getDeviceIcon(getDeviceDetails.body.status.DeviceType);

  body:
    Column:
      styles:
        backgroundColor: white
        padding: 16 0
        height: 800
        scrollable: true
      children:
        - Row:
            styles: 
              mainAxis: spaceBetween
              padding: 0 16
            children:
              - Spacer
              - CloseDialogIcon
        - Row:
            styles:
              mainAxis: center
            children:
              - Column:
                  styles:
                    gap: 16
                    mainAxis: center
                    crossAxis: center
                    padding: 8 24
                  children:
                    - Icon:
                        name: 0xe972
                        id: deviceIcon
                        library: kpnUI
                        styles: { size: 40, color: white, backgroundColor: 0xFF00AAFF, padding: 16, borderRadius: 100 }
                    - Text:
                        text: ${getDeviceDetails.body.status.Name}
                        styles:
                          textStyle:
                            fontSize: 18

        - Spacer:
            styles:
              size: 8
        - ClientDeviceSchedule:
            inputs:
              mac: ${mac}

ClientDeviceSchedule:
  inputs:
    - mac
  onLoad:
    invokeAPI:
      name: getMST
      inputs:
        id: ${getDeviceMstId(mac)}
      onResponse:
        invokeAPI:
          name: getDeviceSchedule
          inputs:
            mac: ${mac}
          onResponse:
            executeCode:
              body: |
                if (getMST.body.data != null && getMST.body.data.enable == true) {
                  deviceScheduleDropdown.value = 'Time';
                  scheduleWrapper.visible = false;
                } else {
                  if (getDeviceSchedule.body.data == null ) {
                    deviceScheduleDropdown.value = 'Allow';
                    scheduleWrapper.visible = false;
                  } else {
                    if (getDeviceSchedule.body.data.scheduleInfo.override == 'Disable') {
                      deviceScheduleDropdown.value = 'Block';
                      scheduleWrapper.visible = false;
                    } else if (getDeviceSchedule.body.data.scheduleInfo.override == 'Enable') {
                      deviceScheduleDropdown.value = 'Allow';
                      scheduleWrapper.visible = false;
                    } else if (getDeviceSchedule.body.data.scheduleInfo.override == '' && getDeviceSchedule.body.data.scheduleInfo.schedule.length == 0) {
                      deviceScheduleDropdown.value = 'Allow';
                      scheduleWrapper.visible = false;
                    } else if (getDeviceSchedule.body.data.scheduleInfo.override == '') {
                      deviceScheduleDropdown.value = 'Weekly';
                      scheduleWrapper.visible = true;
                      deviceScheduler.visible = true;
                      getDeviceSchedule.body.data.scheduleInfo.schedule.map(function(range) {
                        deviceScheduler.addSelectedRange(range.begin, range.end);
                      });
                      deviceScheduler.refresh();
                    }
                  }
                }
              
  body:
    Column:
      styles:
        padding: 24
        gap: 16
      children:
        - Dropdown:
            id: deviceScheduleDropdown
            label: r@kpn.security.parental_control
            items: [
              { "value": "Allow", "label": r@kpn.local_network.always_allow },
              { "value": "Block", "label": r@kpn.local_network.always_block },
              { "value": "Weekly", "label": r@kpn.local_network.schedule },
              { "value": "Time", "label": r@kpn.local_network.time_countdown }
            ]
            onChange:
              executeCode:
                body: |
                  //@code
                  if (this.value == 'Weekly') {
                    scheduleWrapper.visible = true;
                    deviceScheduler.visible = true;
                  } else {
                    scheduleWrapper.visible = false;
                    deviceScheduler.visible = false;
                  }

        - Conditional:
            conditions:
              - if: ${ deviceScheduleDropdown.value == "Daily" }
                Text:
                  text: Daily
              - elseif: ${ deviceScheduleDropdown.value == "Time" }
                ClientDeviceDailyLimit:
                  inputs:
                    mac: ${mac}
        
        - Column:
            id: scheduleWrapper
            styles: 
              gap: 8
              visible: false
            children:
              - Row:
                  styles: { margin: 0 0 0 25 }
                  children:
                    - Row: { styles: { width: 94 }, children: [ Text: { text: 0 } ] }
                    - Row: { styles: { width: 96 }, children: [ Text: { text: 4 } ] }
                    - Row: { styles: { width: 96 }, children: [ Text: { text: 8 } ] }
                    - Row: { styles: { width: 96 }, children: [ Text: { text: 12 } ] }
                    - Row: { styles: { width: 96 }, children: [ Text: { text: 16 } ] }
                    - Row: { styles: { width: 96 }, children: [ Text: { text: 20 } ] }
              
        - WeeklyScheduler:
            id: deviceScheduler
            visible: false
            slotInMinutes: 60
            slotWidth: 22
            slotHeight:   16
            dayLabels: [ 'M','D','W','D','V','Z','Z' ]
            selectedColor: blue
            unselectedColor: green
            paddingBetweenDays: 8
            gapBetweenSlots: 2
            dayLabelBoxWidth: 25
            dayLabelBoxHeight: 18
            displayDayLabels: true
            dayLabelStyles: { fontWeight: bold, color: 0xFF444444, fontSize: 14 }
            verticalDividerIndices: [ 4,8,12,16,20,24 ]
            verticalDividerLabels: [ '4h','8h','12h','16h','20h','24h' ]
            gapToLeaveForDivider: 8
        
        - Conditional:
            conditions:
              - if: ${deviceScheduleDropdown.value != 'Time'}
                Button:
                  label: r@kpn.apply
                  onTap:
                    executeActionGroup:
                      actions:
                        - executeCode:  
                            body: |
                              ensemble.storage.devicesWithParentalControl = {};
                        # delete any MST
                        - invokeAPI:
                            name: deleteDeviceMST
                            inputs:
                              id: ${getDeviceMstId(getDeviceDetails.body.status.Key)}
                        - executeConditionalAction:
                            conditions:
                              - if: ${ deviceScheduleDropdown.value == 'Allow' }
                                action:
                                  invokeAPI:
                                    name: deleteDeviceSchedule
                                    inputs:
                                      mac: ${getDeviceDetails.body.status.Key}
                                    onResponse:
                                      executeActionGroup:
                                        actions:
                                          - invokeAPI:
                                              name: getDevicesSchedule
                                          - invokeAPI:
                                              name: listMST
                                          - invokeAPI:
                                              name: getActiveDevices
                                          - closeAllDialogs
                              - elseif: ${ deviceScheduleDropdown.value == 'Block' }
                                action:
                                  invokeAPI:
                                    name: setDeviceSchedule
                                    inputs:
                                      mac: ${getDeviceDetails.body.status.Key}
                                      schedule: ${[]}
                                      override: 'Disable'
                                    onResponse:
                                      executeActionGroup:
                                        actions:
                                          - invokeAPI:
                                              name: getDevicesSchedule
                                          - invokeAPI:
                                              name: listMST
                                          - invokeAPI:
                                              name: getActiveDevices
                                          - closeAllDialogs
                              - else:
                                action:
                                  executeCode:
                                    body: |
                                      var selectedRanges = deviceScheduler.getSelectedRanges();
                                      var schedule = [];
                                      selectedRanges.map(function(range) {
                                        schedule.push({
                                          "state": "Disable",
                                          "begin": range.startTime,
                                          "end": range.endTime
                                        });
                                      });
                                    
                                      ensemble.invokeAPI('setDeviceSchedule',{
                                        'mac': getDeviceDetails.body.status.Key,
                                        'schedule': schedule
                                      });
                                    onComplete:
                                      executeActionGroup:
                                        actions:
                                          - invokeAPI:
                                              name: getDevicesSchedule
                                          - invokeAPI:
                                              name: listMST
                                          - invokeAPI:
                                              name: getActiveDevices
                                          - closeAllDialogs


ClientDeviceDailyLimit:
  onLoad:
    invokeAPI:
      name: getMST
      inputs:
        id: ${getDeviceMstId(mac)}
  body:
    Column:
      styles:
        padding: 24
        gap: 16
      children:
        - Row:
            children:
              - Form:
                  styles:
                    width: 350
                    labelPosition: start
                    labelMaxWidth: 90
                  children:
                    - Slider:
                        label: r@kpn.monday
                        id: maxTime_mon
                        divisions: 48
                        min: 0
                        max: 24
                        initialValue: '${ getMST.body.data != null ? getMST.body.data.allowedTime.Mon / 60 : 24 }'
                        onChange: |
                          maxTime_monValue.text = this.value;
                    - Slider:
                        label: r@kpn.tuesday
                        id: maxTime_tue
                        divisions: 48
                        min: 0
                        max: 24
                        initialValue: '${ getMST.body.data != null ? getMST.body.data.allowedTime.Tue / 60 : 24 }'
                        onChange: |
                          maxTime_tueValue.text = this.value;
                    - Slider:
                        label: r@kpn.wednesday
                        id: maxTime_wed
                        divisions: 48
                        min: 0
                        max: 24
                        initialValue: '${ getMST.body.data != null ? getMST.body.data.allowedTime.Wed / 60 : 24 }'
                        onChange: |
                          maxTime_wedValue.text = this.value;
                    - Slider:
                        label: r@kpn.thursday
                        id: maxTime_thu
                        divisions: 48
                        min: 0
                        max: 24
                        initialValue: '${ getMST.body.data != null ? getMST.body.data.allowedTime.Thu / 60 : 24 }'
                        onChange: |
                          maxTime_thuValue.text = this.value;
                    - Slider:
                        label: r@kpn.friday
                        id: maxTime_fri
                        divisions: 48
                        min: 0
                        max: 24
                        initialValue: '${ getMST.body.data != null ? getMST.body.data.allowedTime.Fri / 60 : 24 }'
                        onChange: |
                          maxTime_friValue.text = this.value;
                    - Slider:
                        label: r@kpn.saturday
                        id: maxTime_sat
                        divisions: 48
                        min: 0
                        max: 24
                        initialValue: '${ getMST.body.data != null ? getMST.body.data.allowedTime.Sat / 60 : 24 }'
                        onChange: |
                          maxTime_satValue.text = this.value;
                    - Slider:
                        label: r@kpn.sunday
                        id: maxTime_sun
                        divisions: 48
                        min: 0
                        max: 24
                        initialValue: '${ getMST.body.data != null ? getMST.body.data.allowedTime.Sun / 60 : 24 }'
                        onChange: |
                          maxTime_sunValue.text = this.value;
              - Column:
                  styles:
                    gap: 35
                    padding: 14 0
                    width: 50
                  children:
                    - Text:
                        id: maxTime_monValue
                    - Text:
                        id: maxTime_tueValue
                    - Text:
                        id: maxTime_wedValue
                    - Text:
                        id: maxTime_thuValue
                    - Text:
                        id: maxTime_friValue
                    - Text:
                        id: maxTime_satValue
                    - Text:
                        id: maxTime_sunValue
              - Button:
                  label: r@kpn.local_network.apply_to_all_days
                  styles:
                    outline: true
                    borderColor: white
                  onTap: |
                    var monValue = maxTime_mon.value;
                    maxTime_tue.initialValue = monValue;
                    maxTime_tueValue.text = monValue;
                    maxTime_wed.initialValue = monValue;
                    maxTime_wedValue.text = monValue;
                    maxTime_thu.initialValue = monValue;
                    maxTime_thuValue.text = monValue;
                    maxTime_fri.initialValue = monValue;
                    maxTime_friValue.text = monValue;
                    maxTime_sat.initialValue = monValue;
                    maxTime_satValue.text = monValue;
                    maxTime_sun.initialValue = monValue;
                    maxTime_sunValue.text = monValue;

        - Button:
            label: r@kpn.apply
            onTap:
              executeCode:
                body: |
                  ensemble.storage.devicesWithParentalControl = {};
                onComplete:
                  invokeAPI:
                    name: setMST
                    inputs:
                      id: ${getDeviceMstId(mac)}
                      mac: ${mac}
                      enable: true
                    onResponse:
                      executeActionGroup:
                        actions:
                          - invokeAPI:
                              name: getDevicesSchedule
                          - invokeAPI:
                              name: listMST
                          - invokeAPI:
                              name: getActiveDevices
                          - closeAllDialogs


ConnectedDeviceDetails:
  body:
    Column:
      styles: 
        gap: 8
        padding: 24
        scrollable: true
      children:

        # last connection
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.local_network.last_connection
                  selectable: true
              - Text:
                  text: ${getDeviceDetails.body.status.LastConnection}
                  selectable: true
        - Divider

        # Connection type
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.connection_type
                  selectable: true
              - Conditional:
                  conditions:
                    - if: "${getDeviceDetails.body.status.connectionDetails.type == 'Ethernet'}"
                      Text:
                        selectable: true
                        text: ${getDeviceDetails.body.status.connectionDetails.type} - ${getDeviceDetails.body.status.connectionDetails.networklabel}
                    - elseif: "${getDeviceDetails.body.status.connectionDetails.type == 'WiFi'}"
                      Text:
                        selectable: true
                        text: ${getDeviceDetails.body.status.connectionDetails.type} ${getDeviceDetails.body.status.OperatingFrequencyBand} - ${getDeviceDetails.body.status.connectionDetails.networklabel} - ${getWifiStandard(getDeviceDetails.body.status.OperatingStandard, true)}
                    - else:
                      Text:
                        text: '-'
        - Divider

        # bit rate
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.bitrate
                  selectable: true
              - Text:
                  text: "${ getDeviceDetails.body.status.connectionDetails.type == 'Ethernet' ? ensemble.storage.ethPorts[getDeviceDetails.body.status.InterfaceName].CurrentBitRateFormatted : getDeviceDetails.body.status.downloadUploadSpeed }"
                  selectable: true
        - Divider

        # MAC address
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.mac_address
                  selectable: true
              - Text:
                  text: ${getDeviceDetails.body.status.Key}
                  selectable: true
        - Divider

        # MAC address randomized
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.local_network.mac_address_randomized
                  selectable: true
              - Text:
                  text: "${getDeviceDetails.body.status.macRandomized == true ? 'r@kpn.local_network.mac_address_randomized_yes' : 'r@kpn.local_network.mac_address_randomized_no'}"
                  selectable: true
        - Divider

        # IPv4 address
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.ip4_address
                  selectable: true
              - Column:
                  item-template:
                    data: ${getDeviceDetails.body.status.IPv4Address}
                    name: i
                    template:
                      Text:
                        visible: '${i.Status == "reachable" ? true : false}'
                        text: ${i.Address}
                        selectable: true
        - Divider
        # IPv6 address
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.ip6_address
                  selectable: true
              - Column:
                  item-template:
                    data: ${getDeviceDetails.body.status.IPv6Address}
                    name: i
                    template:
                      Text:
                        visible: '${i.Status == "reachable" ? true : false}'
                        text: ${i.Address}
                        selectable: true
        - Divider

        # IP address source
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.local_network.ip_address_source
                  selectable: true
              - Text:
                  text: ${getDeviceDetails.body.status.IPAddressSourceLabel}
                  selectable: true
        - Divider

        # Manufacturer
        # display a dash if empty
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.manufacturer
                  selectable: true
              - Text:
                  text: "${getDeviceDetails.body.status.SSW.Manufacturer == '' ? '-' : getDeviceDetails.body.status.SSW.Manufacturer}"
                  selectable: true
        - Divider

        # SW version
        - FittedRow:
            children:
              - Text:
                  text: r@kpn.software_version
                  selectable: true
              - Text:
                  text: ${getDeviceDetails.body.status.SSW.SoftwareVersion}
                  selectable: true
        
        - Spacer:
            styles: { size: 8 }



API:

  setFirewallPolicy:
    inputs: [chain, policy]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "setChainPolicy"
      "parameters":
        "chain": "${chain}"
        "policy": "${policy}"
    onResponse: |
      ensemble.storage.customFirewallMode = policy;
      ensemble.invokeAPI("getCustomRules");
      ensemble.invokeAPI("getCustomRulesIpv6Out");

  # we set both IPv4 and IPv6 to the same mode
  # user IPv4 when checking the current mode
  getFirewallPolicy:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getFirewallPolicy }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "getChainPolicy"
      "parameters":
        "chain": "Custom"
    onResponse: |
      ensemble.storage.customFirewallMode = response.body.status;


  setDeviceName:
    inputs: [mac, name]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices.Device.${mac}"
      "method": "setName"
      "parameters":
        "name": "${name}"

  setDeviceType:
    inputs: [mac, type]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices.Device.${mac}"
      "method": "setType"
      "parameters":
        "type": "${type}"

  getActiveDevices:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getActiveDevices }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices"
      "method": "get"
      "parameters":
        "expression":
          "wifi": "not interface and not self and not ssw and wifi"
          "ethernet": "not interface and not self and not ssw and eth"
        "flags": "full_links"
    onResponse: |
      var allDevices = response.body.status.wifi.concat(response.body.status.ethernet);   
      response.body.allDevices = allDevices;
      

  getDevicesSchedule:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getDevicesSchedule }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Scheduler"
      "method": "getCompleteSchedules"
      "parameters":
        "type": "ToD"
    onResponse: |
      var devicesWithTimeLimit = ensemble.storage.devicesWithParentalControl; 
      response.body.data.scheduleInfo.map(function(s) {
        // always blocked
        if (s.override == "Disable")
          devicesWithTimeLimit[s.ID] = "Block";

        // blocked during certain hours
        if (s.override == "" && s.schedule.length > 0) 
          devicesWithTimeLimit[s.ID] = "Weekly";
      });

      ensemble.storage.devicesWithParentalControl = devicesWithTimeLimit;

  
  getDeviceSchedule:
    inputs: [ mac ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getDeviceSchedule }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Scheduler"
      "method": "getSchedule"
      "parameters":
        "type": "ToD"
        "ID": "${mac}"

  toggleDeviceSchedule:
    inputs: [ mac, status ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Scheduler"
      "method": "overrideSchedule"
      "parameters":
        "type": "ToD"
        "ID": "${mac}"
        "override": "${status}"

  setDeviceSchedule:
    inputs: [ mac, schedule, override ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Scheduler"
      "method": "addSchedule"
      "parameters":
        "type": "ToD"
        "info":
          "base": "Weekly"
          "def": "Enable"
          "ID": "${mac}"
          "schedule": "${schedule}"
          "enable": true
          "override": "${override}"

  getFirewallLevel:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getFirewallLevelSec }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "getFirewallLevel"
      "parameters": {}

  setFirewallLevel:
    inputs: [ level ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "setFirewallLevel"
      "parameters":
        "level": "${level}"
    onResponse:
      invokeAPI:
        name: setFirewallIPv6Level
        inputs:
          level: ${level}

  setFirewallIPv6Level:
    inputs: [ level ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "setFirewallIPv6Level"
      "parameters":
        "level": "${level}"

  getCustomRules:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getCustomRules }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "getCustomRule"
      "parameters": { }
    onResponse: |
      //@code
      var customRulesArray = [];
      for (key in response.body.status) {
        // protocol label
        if (response.body.status[key].Protocol == "17")
          response.body.status[key].ProtocolLabel = "UDP";
        else if (response.body.status[key].Protocol == "6")
          response.body.status[key].ProtocolLabel = "TCP";
        else
          response.body.status[key].ProtocolLabel = "r@kpn.security.both_protocols";
        customRulesArray.push(response.body.status[key]);
      }
      response.body.CustomList = customRulesArray;

  getCustomRulesIpv6Out:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getCustomRulesIpv6Out }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "getCustomRule"
      "parameters":
        "chain": "Custom_V6Out"
    onResponse: |
      //@code
      var customRulesArray = [];
      for (key in response.body.status) {
        // protocol label
        if (response.body.status[key].Protocol == "17")
          response.body.status[key].ProtocolLabel = "UDP";
        else if (response.body.status[key].Protocol == "6")
          response.body.status[key].ProtocolLabel = "TCP";
        else
          response.body.status[key].ProtocolLabel = "r@kpn.security.both_protocols";
        customRulesArray.push(response.body.status[key]);
      }
      response.body.CustomList = customRulesArray;
  
  getDeviceDetails:
    inputs: [ mac ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getDeviceDetails }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices.Device.${mac}"
      "method": "get"
      "parameters": { "flags": "full_links" }
    onResponse: |
      //@code
      var ULink = response.body.status.ULinks[0];
      
      var connectionDetails = {
        'type': '-',
        'typeLabel': '-',
        'networklabel': '-',
        'speed': '-'
      }
      
      connectionDetails = getDeviceConnectionDetails(ULink, response.body.status.InterfaceName);
      
      if (ULink.Type == 'wifi')
        response.body.status.downloadUploadSpeed = getWifiSpeed(response.body.status.MaxDownlinkRateReached,response.body.status.MaxUplinkRateReached);

      // set connection type      
      response.body.status.connectionDetails = connectionDetails;
      
      // set randomized mac true/false
      response.body.status.macRandomized = isMacRandomized(response.body.status.Key);
      
      // reformat last seen
      response.body.status.LastConnection = reformatDateTime(response.body.status.LastConnection);


      // set source label
      if (response.body.status.IPAddressSource == 'Static') {
        response.body.status.IPAddressSourceLabel = 'r@kpn.local_network.ip_type_static';
      } else {
        if ( getStaticLeases.body.leasesList.includes(response.body.status.IPAddress))
          response.body.status.IPAddressSourceLabel = 'r@kpn.local_network.ip_type_reserved';
        else
          response.body.status.IPAddressSourceLabel = 'r@kpn.local_network.ip_type_dynamic';
      }

  deleteCustomRule:
    inputs: [ id, chain ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "deleteCustomRule"
      "parameters":
        "id": "${id}"
        "chain": "${chain}"

  setCustomRule:
    inputs: [chain, status, id, action, destinationPort, sourcePort, destinationIp, sourcePrefix, protocol, ipversion ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "setCustomRule"
      "parameters":
        "id": "${id}"
        "chain": "${chain}"
        "action": "${action}"
        "destinationPort": "${destinationPort}"
        "sourcePort": "${sourcePort}"
        "destinationPrefix": "${destinationIp}"
        "sourcePrefix": "${sourcePrefix}"
        "protocol": "${protocol}"
        "ipversion": "${ipversion}"
        "enable": "${status}"

  getRespondToPing:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getRespondToPing }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "getRespondToPing"
      "parameters":
        "sourceInterface": "data"

  setRespondToPing:
    inputs: [ value ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "setRespondToPing"
      "parameters":
        "sourceInterface": "data"
        "service_enable":
          "enableIPv4": "${value}"
          "enableIPv6": "${value}"

  getDevices:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getDevices }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices"
      "method": "get"
      "parameters":
        "expression":
          "wifi": "not interface and not self and wifi and .Active==true"
          "ethernet": "not interface and not self and eth and .Active==true"
        "flags": "full_links"
    onResponse: |
      //@code
      var allDevices = response.body.status.wifi.concat(response.body.status.ethernet);
      response.body.status = allDevices;

  getWifiDevices:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getWifiDevices }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Devices"
      "method": "get"
      "parameters":
        "expression":
          "wifi": "not interface and not self and wifi and .Active==true"

  getStaticLeases:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getStaticLeases }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "DHCPv4.Server.Pool.default"
      "method": "getStaticLeases"
      "parameters": "default"
    onResponse: |
      //@code
      var leasesList = [];
      response.body.status.map(function (i) {
        leasesList.push(i.IPAddress);
      });
      response.body.leasesList = leasesList;

  addStaticLease:
    inputs: [ mac, ip ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "DHCPv4.Server.Pool.default"
      "method": "addStaticLease"
      "parameters":
        "MACAddress": "${mac}"
        "IPAddress": "${ip}"

  addIPv6OpenPort:
    inputs: [ enable, description, port, ip, protocol ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "setPinhole"
      "parameters":
        "origin": "webui"
        "sourceInterface": "data"
        "sourcePort": ""
        "destinationPort": "${port}"
        "destinationIPAddress": "${ip}"
        "protocol": "${protocol}"
        "ipversion": 6
        "enable": "${enable}"
        "description": "${description}"
        "persistent": true

  editIPv6OpenPort:
    inputs: [ id, enable, description, port, ip, protocol ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "setPinhole"
      "parameters":
        "id": "${id}"
        "enable": "${enable}"
        "description": "${description}"
        "origin": "webui"
        "sourceInterface": "data"
        "sourcePort": ""
        "destinationPort": "${port}"
        "destinationIPAddress": "${ip}"
        "protocol": "${protocol}"
        "ipversion": 6
        "persistent": true

  toggleIPv6OpenPort:
    inputs: [ id, enable ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "setPinhole"
      "parameters":
        "id": "${id}"
        "enable": "${enable}"

  getIPv6OpenPorts:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getIPv6OpenPorts }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "getPinhole"
      "parameters": {}
    onResponse:
      executeCode:
        body: |
          //@code
          var ipv6OpenPorts = [];
          var ipv6DmzDevices = [];
          
          for (key in response.body.status) {
            if (response.body.status[key].Protocol == "17")
              response.body.status[key].ProtocolLabel = "UDP";
            else if (response.body.status[key].Protocol == "6")
              response.body.status[key].ProtocolLabel = "TCP";
            else
              response.body.status[key].ProtocolLabel = "UDP/TCP";
          
            ipv6OpenPorts.push(response.body.status[key]);

            // if the port is 1-65535, add to DMZ list
            if (response.body.status[key].DestinationPort == "1-65535")
              ipv6DmzDevices.push(response.body.status[key]);
          }
            
          response.body.CustomList = ipv6OpenPorts;
          response.body.DmzList = ipv6DmzDevices;

  deleteIPv6OpenPorts:
    inputs: [id]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "deletePinhole"
      "parameters":
        "id": "${id}"
        "origin": "webui"

  getIPv4Rules:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getIPv4Rules }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "getPortForwarding"
      "parameters":
        "origin": "webui"
    onResponse: |
      //@code
      var ipv4RulesArray = [];
      
      for (key in response.body.status) {
        if (response.body.status[key].Protocol == "17")
          response.body.status[key].ProtocolLabel = "UDP";
        else if (response.body.status[key].Protocol == "6")
          response.body.status[key].ProtocolLabel = "TCP";
        else
          response.body.status[key].ProtocolLabel = "UDP/TCP";
      
        ipv4RulesArray.push(response.body.status[key]);
      }
      response.body.CustomList = ipv4RulesArray;

  getUpnpRules:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getUpnpRules }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "getPortForwarding"
      "parameters":
        "origin": "upnp"
    onResponse: |
      //@code
      var ipv4RulesArray = [];
      
      for (key in response.body.status) {
        if (response.body.status[key].Protocol == "17")
          response.body.status[key].ProtocolLabel = "UDP";
        else if (response.body.status[key].Protocol == "6")
          response.body.status[key].ProtocolLabel = "TCP";
        else
          response.body.status[key].ProtocolLabel = "UDP/TCP";
      
        ipv4RulesArray.push(response.body.status[key]);
      }
      response.body.CustomList = ipv4RulesArray;

  editIPv4Rules:
    inputs: [ id, enable, port, ip, protocol, sourcePort, description, sourcePrefix ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
        'Content-Type': 'application/x-sah-ws-4-call+json'
        'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
        'X-Context': '${ensemble.storage.get("contextId")}'
        'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "setPortForwarding"
      "parameters":
        "id": "${id}"
        "internalPort": "${port}"
        "externalPort": "${sourcePort}"
        "destinationIPAddress": "${ip}"
        "enable": "${enable}"
        "persistent": true
        "protocol": "${protocol}"
        "description": "${description}"
        "sourceInterface": "data"
        "origin": "webui"
        "destinationMACAddress": ""
        "sourcePrefix": "${sourcePrefix}"

  deleteIPv4Rules:
    inputs: [id,destinationIp]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "deletePortForwarding"
      "parameters":
        "id": "${id}"
        "origin": "webui"
        "destinationIPAddress": "${destinationIp}"

  addIPv4Rules:
    inputs: [status, description, protocol, action, destinationPort, destinationIp, sourcePort, sourcePrefix ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "setPortForwarding"
      "parameters":
        "id": "${description}"
        "internalPort": "${destinationPort}"
        "externalPort": "${sourcePort}"
        "destinationIPAddress": "${destinationIp}"
        "enable": "${status}"
        "persistent": true
        "protocol": "${protocol}"
        "description": "${description}"
        "sourceInterface": "data"
        "origin": "webui"
        "destinationMACAddress": ""
        "sourcePrefix": "${sourcePrefix}"

  getDMZ:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getDMZ }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "getDMZ"
      "parameters": { }

  deleteDMZ:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "deleteDMZ"
      "parameters":
        "id": "webui"

  setDMZ:
    inputs: [ip]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "setDMZ"
      "parameters":
        "id": "webui"
        "sourceInterface": "data"
        "destinationIPAddress": "${ip}"
        "enable": true

  getUpnp:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getUpnp }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "get"
      "parameters": {}

  setUpnp:
    inputs: [ status ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Firewall"
      "method": "set"
      "parameters":
        "UpnpPortForwardingEnable": "${status}"

  getMacFiltering:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getMacFiltering }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NeMo.Intf.lan"
      "method": "getMIBs"
      "parameters":
        "mibs": "wlanvap"
        "flag": "!backhaul"

  setMacFiltering:
    inputs: [ state, entryObject ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "NeMo.Intf.lan"
      "method": "setWLANConfig"
      "parameters":
        "mibs":
          "wlanvap":
            "vap2g0priv":
              "MACFiltering":
                "Mode": ${state}
                "Entry": ${entryObject}
            "vap5g0priv":
              "MACFiltering":
                "Mode": ${state}
                "Entry": ${entryObject}
            "vap2g0ext":
              "MACFiltering":
                "Mode": ${state}
                "Entry": ${entryObject}
            "vap5g0ext":
              "MACFiltering":
                "Mode": ${state}
                "Entry": ${entryObject}
    onResponse:
      invokeAPI:
        name: getMacFiltering
        onResponse:
          invokeAPI:
            name: getWifiDevices
            onResponse: |
              ensemble.storage.filteredDevicesMac = [];
              var extenders = getExtenderMacsToBeWhiteListed();
              var extenderMacs = extenders.keys();
              var currentFilteredDevices = getMacFiltering.body.status.wlanvap.vap2g0priv.MACFiltering.Entry;
              for (key in currentFilteredDevices) {
                if ( extenders[currentFilteredDevices[key].MACAddress] != null 
                      && extenders[currentFilteredDevices[key].MACAddress]['incrementedMac'] == true ) {
                  continue;//this is the fake incremented MAC address, we won't show it to avoid confusion
                }
                ensemble.storage.filteredDevicesMac.push(currentFilteredDevices[key].MACAddress);;
              }
              
              var devicesList = [];
              getWifiDevices.body.status.wifi.map(function(d) {
                // we will not add extenders to this list
                if (extenderMacs.indexOf(d.Key) == -1)
                  devicesList.push({
                    "label": d.Name,
                    "value": d.Key
                  });
              });
              macFilteringDeviceSelector.items = devicesList;

  listMST:
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_listMST }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "ToD"
      "method": "listMST"
      "parameters": {}
    onResponse: |
      response.body.data.ids.map(function(id) {
        ensemble.invokeAPI('getMST', { 'id': id });
      });

  getMST:
    inputs:
      - id
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    mockResponse: 
      body: ${ mock_getMST }
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "ToD"
      "method": "getMST"
      "parameters":
        "id": "${id}"
    onResponse:
      executeCode:
        body: |
          if (response.body.data != null && response.body.data.enable == true) {
            var devicesWithTimeLimit = ensemble.storage.devicesWithParentalControl;
            var mac = addColonsToMac(id);
            devicesWithTimeLimit[mac] = "Time";
            ensemble.storage.devicesWithParentalControl = devicesWithTimeLimit;
          }


  setMST:
    inputs:
      - id
      - mac
      - enable
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "ToD"
      "method": "setMST"
      "parameters":
          "id": "${id}"
          "subject": "MAC:${mac}"
          "enable": "${ enable }"
          "allowedTime":
            "Mon": ${parseInt(maxTime_mon.value * 60)}
            "Tue": ${parseInt(maxTime_tue.value * 60)}
            "Wed": ${parseInt(maxTime_wed.value * 60)}
            "Thu": ${parseInt(maxTime_thu.value * 60)}
            "Fri": ${parseInt(maxTime_fri.value * 60)}
            "Sat": ${parseInt(maxTime_sat.value * 60)}
            "Sun": ${parseInt(maxTime_sun.value * 60)}
    onResponse:
      invokeAPI:
        name: deleteDeviceSchedule
        inputs:
          mac: ${mac}

  deleteDeviceMST:
    inputs:
      - id
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "ToD"
      "method": "deleteMST"
      "parameters":
        "id": "${id}"


  deleteDeviceSchedule:
    inputs: [ mac ]
    uri: ${app.baseUrl}/ws/NeMo/Intf/lan:getMIBs
    method: 'POST'
    headers:
      'Content-Type': 'application/x-sah-ws-4-call+json'
      'Authorization': 'X-Sah ${ensemble.storage.get("contextId")}'
      'X-Context': '${ensemble.storage.get("contextId")}'
      'Cookie': '${ensemble.storage.get("cookie")}'
    body:
      "service": "Scheduler"
      "method": "removeSchedules"
      "parameters":
        "type": "ToD"
        "ID":
          - "${mac}"

Global: |-
  //@code
  var servicesPort = {
    'HTTP': '80',
    'HTTPS': '443',
    'POP3': '110',
    'POP3S': '995',
    'SMTPAuth': '587',
    'SMTP': '25',
    'FTP': '20-21',
    'SSH': '22',
    'NTP': '123',
    'NNTP': '119',
    'NNTPS': '563',
    'DNS': '53',
    'IRC': '6666-6667',
    'IMAP': '143',
    'IMAPS': '993',
    'ISAKMP': '500',
    'STUN': '3478',
    'PSEC-NAT-T': '4500',
    'ESP-ALARM-TOOL': '30000',
    'ESP-ALARM': '30100'
  };
  
  
  // use index when toggling custom rules using a timer
  var ruleIndex = 0;
  function incrementRuleIndex () { ruleIndex = ruleIndex + 1; }
  function getRuleIndex () { return (ruleIndex); }
  function resetRuleIndex () { ruleIndex = 0 ;}


  function getFirewallLevelDescription (level) {
    var desc = '';
  
    if (level == 'Low' )
      desc = "r@kpn.security.firewall_level_description_low";
    else if (level == 'Medium' )
      desc = "r@kpn.security.firewall_level_description_medium";
    else if (level == 'High' )
      desc = "r@kpn.security.firewall_level_description_high";
    else if (level == 'Custom' )
      desc = "r@kpn.security.firewall_level_description_custom";
    
    return (desc);
  }

  function isIpv4 (ip) {
    var regex = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
    if(ip == null)
      return false;
    else
      return (regex.test(ip));
  }
  function incrementMAC(mac, increment) {
    var hexParts = mac.split(':');
    var numericValue = parseInt(hexParts.join(''), 16);
    var incrementedValue = numericValue + increment;
    var incrementedHex = incrementedValue.toString(16).padStart(12, '0');
    
    var newMac = [];
    for (var i = 0; i < 12; i += 2) {
    newMac.push(incrementedHex.substring(i, i + 2));
    }
    return newMac.join(':').toUpperCase();
  }  
  //macFiltering to always whitelist extenders
  //we'll do MAC + MAC+1
  function getExtenderMacsToBeWhiteListed() {
    var extenderMacs = ensemble.storage.extendersMacs;
    var plus1 = {};
    extenderMacs.entries().forEach(function(entry) {
      plus1[entry.key] = {name: entry.value};
      var incrementedMac = incrementMAC(entry.key,1);
      plus1[incrementedMac] = {name: entry.value, incrementedMac: true};
    });
    return plus1;
  }
  function getMacFilteringObjectForExtenders() {
    var i = 1;
    var entry = {};
    var extenders = getExtenderMacsToBeWhiteListed();
    extenders.keys().forEach(function(mac) {
      entry[i.toString()] = { "MACAddress": mac };
      i = i + 1;
    });
    return entry;
    //ensemble.storage.macFilteringObject = entry;
  }
  
  function setMacFilteringObject(addExtenders) {
    var i = 1;
    var entry = {};
    var extenderMacs = getExtenderMacsToBeWhiteListed().keys();
    var allFilteredDevicesUnique = ensemble.storage.filteredDevicesMac.unique();

    if (addExtenders == true) {
      extenderMacs.forEach(function(mac) {
        if ( allFilteredDevicesUnique.indexOf(mac) == -1 ) {
          allFilteredDevicesUnique.push(mac);
        }
      });
    }
  
    allFilteredDevicesUnique.map(function(mac) {
      var iString = i.toString();
      entry[iString] = { "MACAddress": mac };
      i = i + 1;
    });
    ensemble.storage.macFilteringObject = entry;
  }
  

  function getDeviceName(mac, devices) {
    var name = "-";
    var extenderMacs = getExtenderMacsToBeWhiteListed();
    devices.map(function(thisDevice) {
      if (thisDevice.Key == mac)
        name = thisDevice.Name;
      else if ( extenderMacs[mac] != null ) 
        name = extenderMacs[mac]['name'];
    });
    return(name);
  }
  
  function isMacRandomized (mac) {
    // if second character of mac is either of [2,6,A,E], it is randomized
    var randomizedMacIndicator = ['2','6','A','E'];
    var secondCharOfMac = mac.substring(1,2);

    if (randomizedMacIndicator.indexOf(secondCharOfMac) > -1)
      return true;
    else
      return false;
  }
  
  function deviceNameIPv6 (ipAddress) {
    var deviceName = "N/A";
    getDevices.body.status.map(function(item) {
      if (item.IPv6Address != null) {
        item.IPv6Address.map(function(ip) {
          if (ip.Address == ipAddress) {
            deviceName = item.Name;
          }
        });
      }
    });
    return(deviceName);
  }
  
  function deviceNameIPv4 (ipAddress) {
    var deviceName = "-";
    getDevices.body.status.map(function(item) {
      if (item.IPAddress == ipAddress)
        deviceName = item.Name;
    });
    return(deviceName);
  }
  
  
  
  function getDeviceConnectionDetails (ULink, InterfaceName) {
    var connectionDetails = {
      'type': '-',
      'typeLabel': '-',
      'networklabel': '-'
    }

    if (ULink.Type == "ethernet") {
      var portNumber = reformatEthernetPort(ULink.Key);
      connectionDetails = {
        'type': 'Ethernet',
        'typeLabel': 'r@kpn.local_network.connection_type_ethernet',
        'networklabel': portNumber
      }
    } else if (ULink.Type == "wifi") {
      connectionDetails = {
        'type': 'WiFi',
        'typeLabel': 'r@kpn.local_network.connection_type_wifi',
        'networklabel': ensemble.storage.get(ULink.Key)
      }
    } else if (ULink.Type == "HNID") {
      var portNumber = reformatEthernetPort(InterfaceName);
      connectionDetails = {
        'type': 'Ethernet',
        'typeLabel': 'r@kpn.local_network.connection_type_ethernet',
        'networklabel': portNumber + ' / Switch'
      }
    }
    return (connectionDetails);
  }

  function getConnectionDetails (interface) {
    if (interface == '')
      interface = 'ethernet';

    if (interface.substring(0,3) == 'ETH')
      interface = 'ethernet';

    var connectionDetails = connectionTypes[interface];
    return (connectionDetails);
  }

  function reformatEthernetPort (interface) {
    var ethPort = '';
    if (interface == 'ETH0')
      ethPort = 'Ethernet 1'
    else if (interface == 'ETH1')
      ethPort = 'Ethernet 2'
    else if (interface == 'ETH2')
      ethPort = 'Ethernet 3'
    else if (interface == 'ETH3')
      ethPort = 'Ethernet 4'

    return (ethPort);
  }


  function getStaticRules(level) {
    if (level == 'High')
      return staticRulesHigh;
    else if (level == 'Medium')
      return staticRulesMedium;
    else if (level == 'Low')
      return staticRulesLow;
  }

  var staticRulesLow = [];

  var staticRulesMedium = [
    {
      'ProtocolLabel': 'TCP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': '20-21',
      'Id': 'ftp',
      'Target': 'Drop'
    },
    {
      'ProtocolLabel': 'TCP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 23,
      'Id': 'telnet',
      'Target': 'Drop'
    },
    {
      'ProtocolLabel': 'TCP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 25,
      'Id': 'smtp',
      'Target': 'Drop'
    },
    {
      'ProtocolLabel': 'UDP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 69,
      'Id': 'tftp',
      'Target': 'Drop'
    },
    {
      'ProtocolLabel': 'UDP/TCP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 135,
      'Id': 'rpc',
      'Target': 'Drop'
    },
    {
      'ProtocolLabel': 'UDP/TCP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': '137-139',
      'Id': 'netbios',
      'Target': 'Drop'
    },
    {
      'ProtocolLabel': 'UDP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': '161-162',
      'Id': 'snmp',
      'Target': 'Drop'
    },
    {
      'ProtocolLabel': 'TCP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 445,
      'Id': 'smb',
      'Target': 'Drop'
    },
    {
      'ProtocolLabel': 'UDP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 514,
      'Id': 'syslog',
      'Target': 'Drop'
    },
    {
      'ProtocolLabel': 'UDP/TCP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': '6660-6669',
      'Id': 'irc',
      'Target': 'Drop'
    },
  ];

  var staticRulesHigh = [
    {
      'ProtocolLabel': 'TCP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 22,
      'Id': 'ssh',
      'Target': 'Accept'
    },
    {
      'ProtocolLabel': 'UDP/TCP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 53,
      'Id': 'dns',
      'Target': 'Accept'
    },
    {
      'ProtocolLabel': 'TCP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 110,
      'Id': 'pop3',
      'Target': 'Accept'
    },
    {
      'ProtocolLabel': 'TCP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 119,
      'Id': 'NNTP',
      'Target': 'Accept'
    },
    {
      'ProtocolLabel': 'TCP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 123,
      'Id': 'ntp',
      'Target': 'Accept'
    },
    {
      'ProtocolLabel': 'UDP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 143,
      'Id': 'imap',
      'Target': 'Accept'
    },
    {
      'ProtocolLabel': 'TCP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 53,
      'Id': 'dns',
      'Target': 'Accept'
    },
    {
      'ProtocolLabel': 'TCP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 443,
      'Id': 'https',
      'Target': 'Accept'
    },
    {
      'ProtocolLabel': 'UDP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 500,
      'Id': 'vpn',
      'Target': 'Accept'
    },
    {
      'ProtocolLabel': 'UDP/TCP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 554,
      'Id': 'rtsp',
      'Target': 'Accept'
    },
    {
      'ProtocolLabel': 'TCP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 563,
      'Id': 'tls',
      'Target': 'Accept'
    },
    {
      'ProtocolLabel': 'TCP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 587,
      'Id': 'smtps',
      'Target': 'Accept'
    },
    {
      'ProtocolLabel': 'TCP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 993,
      'Id': 'imaps',
      'Target': 'Accept'
    },
    {
      'ProtocolLabel': 'TCP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 995,
      'Id': 'pop3s',
      'Target': 'Accept'
    },
    {
      'ProtocolLabel': 'UDP/TCP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 1755,
      'Id': 'mms',
      'Target': 'Accept'
    },
    {
      'ProtocolLabel': 'UDP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 3478,
      'Id': 'turn',
      'Target': 'Accept'
    },
    {
      'ProtocolLabel': 'UDP',
      'SourcePrefix': '',
      'SourcePort': '',
      'DestinationPrefix': '',
      'DestinationPort': 4500,
      'Id': 'nat',
      'Target': 'Accept'
    },
  ];

  
  function getWifiSpeed(download,upload) {
    var d = '0';
    if (download>1000000)
      d = Math.round(download / 1000000) + ' Gbps';
    else if (download>0)
      d = Math.round(download / 1000) + ' Mbps';
  
    var u = '0';
    if (upload>1000000)
      u = Math.round(upload / 1000000) + ' Gbps';
    else if (upload>0)
      u = Math.round(upload / 1000) + ' Mbps';
  
    return (d + ' / ' + u);
  }

  function reformatDateTime (d) {
    var dd = d.substring(8,10);
    var mm = d.substring(5,7);
    var yyyy = d.substring(0,4);
    var time = d.substring(11,19);
    return (dd + '-' + mm + '-' + yyyy + '  ' + time);
  }